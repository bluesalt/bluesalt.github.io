<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: java | Jeff Li]]></title>
  <link href="http://bluesalt.github.io/tags/java/atom.xml" rel="self"/>
  <link href="http://bluesalt.github.io/"/>
  <updated>2014-03-31T21:06:15+08:00</updated>
  <id>http://bluesalt.github.io/</id>
  <author>
    <name><![CDATA[Jeff Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Avro Cookbook : Part I]]></title>
    <link href="http://bluesalt.github.io/blog/2014/02/06/avro-cookbook-part-i/"/>
    <updated>2014-02-06T15:49:00+08:00</updated>
    <id>http://bluesalt.github.io/blog/2014/02/06/avro-cookbook-part-i</id>
    <content type="html"><![CDATA[<p>Avro is a data serialization framework. It is an Apache project led by Doug Cutting who is also the author of several other open source projects such as Hadoop, Lucene. Recently I need to leverage Avro to serialize/deserialize some data, however, I found its document is too poor, at least too poor for newbies like me who don&#39;t have much experience on data exchange format frameworks. </p>

<p>In fact, it is very easy to understand what Avro can do. It helps to convert Java objects into bytes and vice versa. The key information the framework needs to know is the format of the date, namely &#39;Schema&#39; in Avro. In this article, I won&#39;t spend any time on explaining what Avro is. </p>

<h2>Recipe 1: Create a Maven Avro Project</h2>

<p>Intellij IDEA is my favorite Java IDE. The free Community edition has less features than the commercial Ultimate edition, however, great experience may be gained when the free community IDEA works with Maven. They complete each other. So the examples in this article will use Maven and Intellij IDEA as the IDE. Besides, <strong>TestNG</strong> instead of JUnit will be used as the test framework.</p>

<h3>Initialize the project structure</h3>

<ul>
<li>Create an project with quickstart archetype:
<code>
mvn archetype:generate -DgroupId=me.jeffli -DartifactId=avrosamples -Dversion=0.01 -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
</code></li>
</ul>

<h3>Tweak the pom.xml</h3>

<ul>
<li><p>Add Avro dependency:
<code>xml
&lt;dependency&gt;
&lt;groupId&gt;org.apache.avro&lt;/groupId&gt;
&lt;artifactId&gt;avro&lt;/artifactId&gt;
&lt;version&gt;1.7.5&lt;/version&gt;
&lt;/dependency&gt;
</code></p></li>
<li><p>Use Avro Maven plugin
<code>xml
&lt;plugin&gt;
&lt;groupId&gt;org.apache.avro&lt;/groupId&gt;
&lt;artifactId&gt;avro-maven-plugin&lt;/artifactId&gt;
&lt;version&gt;1.7.5&lt;/version&gt;
&lt;executions&gt;
  &lt;execution&gt;
     &lt;phase&gt;generate-sources&lt;/phase&gt;
     &lt;goals&gt;
        &lt;goal&gt;schema&lt;/goal&gt;
     &lt;/goals&gt;
     &lt;configuration&gt;
        &lt;!-- make sure the directory is created --&gt;
        &lt;sourceDirectory&gt;${project.basedir}/src/main/avro/&lt;/sourceDirectory&gt;
        &lt;outputDirectory&gt;${project.basedir}/src/main/java/&lt;/outputDirectory&gt;
     &lt;/configuration&gt;
  &lt;/execution&gt;
&lt;/executions&gt;
&lt;/plugin&gt;
</code></p></li>
</ul>

<p>It should be noted that the directory <code>${project.basedir}/src/main/avro/</code> must be created even it is empty at first. It is used to place the Avro schema files. The whole pom.xml has been posted to <a href="https://gist.github.com/bluesalt/9807306">github gist</a>.</p>

<h3>Import the project into Intellij IDEA</h3>

<p>IDEA provides full support to Maven, so it is very easy to import the Maven project as a IDEA project. Click &quot;Import Project&quot; in the &#39;Quick Start&#39; panel. I suggest enable the Maven Auto-Import feature of IDEA before completing the importing process.</p>

<h2>Recipe 2: Define a Schema</h2>

<p>Assume that you want to log every access of your server, to make it simple, we only define 3 attributes in a log entry, namely the username, resource and ip. So the schema can be defined as :
<code>json
{
 &quot;namespace&quot;: &quot;me.jeffli.avrosamples.model&quot;,
 &quot;type&quot;: &quot;record&quot;,
 &quot;name&quot;: &quot;LogEntry&quot;,
 &quot;fields&quot;: [
     {&quot;name&quot;: &quot;name&quot;, &quot;type&quot;: &quot;string&quot;},
     {&quot;name&quot;: &quot;resource&quot;,  &quot;type&quot;: [&quot;string&quot;, &quot;null&quot;]},
     {&quot;name&quot;: &quot;ip&quot;, &quot;type&quot;: [&quot;string&quot;, &quot;null&quot;]}
 ]
}
</code></p>

<p>Save the content as <code>${project.basedir}/src/main/avro/LogEntry.avsc</code>. After running <code>mvn compile</code>, a Java class <code>me.jeffli.avrosamples.model.LogEntry</code> will be generated automatically thank to the Avro Maven plugin.  </p>

<h2>Recipe 3: Serialize the Log Data to Disk File</h2>

<p>Assume we want to store the log data to a disk file <code>/tmp/log</code>. The code snippet would be like this:
```java
@Test
public void testSerializeLogEntries() throws IOException {
   LogEntry entry1 = new LogEntry();
   entry1.setName(&quot;Jeff&quot;);
   entry1.setResource(&quot;readme.txt&quot;);
   entry1.setIp(&quot;192.168.1.1&quot;);</p>

<p>LogEntry entry2 = new LogEntry();
   entry2.setName(&quot;John&quot;);
   entry2.setResource(&quot;readme.md&quot;);
   entry2.setIp(&quot;192.168.1.2&quot;);</p>

<p>DatumWriter<LogEntry> logEntryDatumWriter = new SpecificDatumWriter&lt;&gt;(LogEntry.class);
   DataFileWriter<LogEntry> dataFileWriter = new DataFileWriter&lt;&gt;(logEntryDatumWriter);
   File file = new File(&quot;/tmp/log&quot;);
   dataFileWriter.create(entry1.getSchema(), file);</p>

<p>dataFileWriter.append(entry1);
   dataFileWriter.append(entry2);</p>

<p>dataFileWriter.close();
}
```  </p>

<h2>Recipe 4: Deserialize the Log Data from Disk File</h2>

<p>Assume you need to parse the log data from disk files <code>/tmp/log</code>. Then the code snippet would be:
<code>java
@Test (dependsOnMethods = &quot;testSerializeLogEntries&quot;)
public void testDeSerializeLogEntries() throws IOException {
   DatumReader&lt;LogEntry&gt; logEntryDatumReader = new SpecificDatumReader&lt;&gt;(LogEntry.class);
   File file = new File(&quot;/tmp/log&quot;);
   DataFileReader&lt;LogEntry&gt; dataFileReader = new DataFileReader&lt;&gt;(file, logEntryDatumReader);
   LogEntry entry = null;
   while (dataFileReader.hasNext()) {
      entry = dataFileReader.next(entry);
      System.out.println(entry);
   }
}
</code>   </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jetty-maven-plugin and https support]]></title>
    <link href="http://bluesalt.github.io/blog/2013/07/29/jetty-maven-plugin-and-https-support/"/>
    <updated>2013-07-29T22:46:00+08:00</updated>
    <id>http://bluesalt.github.io/blog/2013/07/29/jetty-maven-plugin-and-https-support</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p><code>jetty-maven-plugin</code>(formerly known as <code>maven-jetty-plugin</code>)is a maven plugin which enables the jetty container in maven project. It is very convenient in development environment since you can start the web app by issue only one command <code>mvn jetty:run</code>. By default it only supports http protocol. Additional configuration is necessary if https is required. Roughly we needs:</p>

<ul>
<li>A development certificate</li>
<li>Instruct the jetty plugin to use the certificate</li>
</ul>

<p>Besides <code>jetty-maven-plugin</code>, another maven plugin called <code>keytool-maven-plugin</code> is also needed to generate the certificate.
It should be noted that the plugin has evolved a lot since version 7. The configuration is different from different version. </p>

<h3>V6</h3>

<p>If you are still using the version 6 plugin, please refer to this blog: <a href="http://mrhaki.blogspot.com/2009/05/configure-maven-jetty-plugin-for-ssl.html">Configure Maven Jetty plugin for SSL communication</a>. I tried it in my project, but it is unstable. Sometimes it works and sometimes it fails. So I have to upgrade the plugin to V8.</p>

<h3>V8</h3>

<p>Add following sections to the <plugins> section in your pom.xml file(Pay attention to <code>Line 7 - Line9</code>, <code>Line 41</code>, <code>Line 47</code>):</p>
<div class="highlight"><pre><code class="xml"><span class="nt">&lt;plugin&gt;</span>
   <span class="nt">&lt;groupId&gt;</span>org.mortbay.jetty<span class="nt">&lt;/groupId&gt;</span>
   <span class="nt">&lt;artifactId&gt;</span>jetty-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
   <span class="nt">&lt;version&gt;</span>8.1.11.v20130520<span class="nt">&lt;/version&gt;</span>
   <span class="nt">&lt;configuration&gt;</span>
      <span class="nt">&lt;scanIntervalSeconds&gt;</span>5<span class="nt">&lt;/scanIntervalSeconds&gt;</span>
      <span class="nt">&lt;webApp&gt;</span>
         <span class="nt">&lt;contextPath&gt;</span>/context<span class="nt">&lt;/contextPath&gt;</span>
      <span class="nt">&lt;/webApp&gt;</span>
      <span class="nt">&lt;connectors&gt;</span>
         <span class="nt">&lt;connector</span> <span class="na">implementation=</span><span class="s">&quot;org.eclipse.jetty.server.nio.SelectChannelConnector&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;port&gt;</span>8080<span class="nt">&lt;/port&gt;</span>
            <span class="nt">&lt;maxIdleTime&gt;</span>60000<span class="nt">&lt;/maxIdleTime&gt;</span>
         <span class="nt">&lt;/connector&gt;</span>
         <span class="nt">&lt;connector</span> <span class="na">implementation=</span><span class="s">&quot;org.eclipse.jetty.server.ssl.SslSelectChannelConnector&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;port&gt;</span>8443<span class="nt">&lt;/port&gt;</span>
            <span class="nt">&lt;maxIdleTime&gt;</span>60000<span class="nt">&lt;/maxIdleTime&gt;</span>
            <span class="nt">&lt;keystore&gt;</span>${project.build.directory}/jetty-ssl.keystore<span class="nt">&lt;/keystore&gt;</span>
            <span class="nt">&lt;password&gt;</span>jetty8<span class="nt">&lt;/password&gt;</span>
            <span class="nt">&lt;keyPassword&gt;</span>jetty8<span class="nt">&lt;/keyPassword&gt;</span>
         <span class="nt">&lt;/connector&gt;</span>
      <span class="nt">&lt;/connectors&gt;</span>
   <span class="nt">&lt;/configuration&gt;</span>
<span class="nt">&lt;/plugin&gt;</span>

<span class="nt">&lt;plugin&gt;</span>
   <span class="nt">&lt;groupId&gt;</span>org.codehaus.mojo<span class="nt">&lt;/groupId&gt;</span>
   <span class="nt">&lt;artifactId&gt;</span>keytool-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
   <span class="nt">&lt;executions&gt;</span>
      <span class="nt">&lt;execution&gt;</span>
         <span class="nt">&lt;phase&gt;</span>generate-resources<span class="nt">&lt;/phase&gt;</span>
         <span class="nt">&lt;id&gt;</span>clean<span class="nt">&lt;/id&gt;</span>
         <span class="nt">&lt;goals&gt;</span>
            <span class="nt">&lt;goal&gt;</span>clean<span class="nt">&lt;/goal&gt;</span>
         <span class="nt">&lt;/goals&gt;</span>
      <span class="nt">&lt;/execution&gt;</span>
      <span class="nt">&lt;execution&gt;</span>
         <span class="nt">&lt;phase&gt;</span>generate-resources<span class="nt">&lt;/phase&gt;</span>
         <span class="nt">&lt;id&gt;</span>genkey<span class="nt">&lt;/id&gt;</span>
         <span class="nt">&lt;goals&gt;</span>
            <span class="nt">&lt;goal&gt;</span>generateKeyPair<span class="nt">&lt;/goal&gt;</span>
         <span class="nt">&lt;/goals&gt;</span>
      <span class="nt">&lt;/execution&gt;</span>
   <span class="nt">&lt;/executions&gt;</span>
   <span class="nt">&lt;configuration&gt;</span>
      <span class="nt">&lt;keystore&gt;</span>${project.build.directory}/jetty-ssl.keystore<span class="nt">&lt;/keystore&gt;</span>
      <span class="nt">&lt;dname&gt;</span>cn=localhost<span class="nt">&lt;/dname&gt;</span>
      <span class="nt">&lt;keypass&gt;</span>jetty8<span class="nt">&lt;/keypass&gt;</span>
      <span class="nt">&lt;storepass&gt;</span>jetty8<span class="nt">&lt;/storepass&gt;</span>
      <span class="nt">&lt;alias&gt;</span>jetty8<span class="nt">&lt;/alias&gt;</span>
      <span class="nt">&lt;keyalg&gt;</span>RSA<span class="nt">&lt;/keyalg&gt;</span>
   <span class="nt">&lt;/configuration&gt;</span>
<span class="nt">&lt;/plugin&gt;</span>
</code></pre></div>
<p>Every thing should be ready now. If you are using Postman as your test tool, please navigate to <code>https://loocalhost:8443/context</code> to accept the certificate before you make further tests after running <code>mvn jetty:run</code>.</p>
]]></content>
  </entry>
  
</feed>
