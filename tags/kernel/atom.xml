<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: kernel | Jeff Li]]></title>
  <link href="http://bluesalt.github.io/tags/kernel/atom.xml" rel="self"/>
  <link href="http://bluesalt.github.io/"/>
  <updated>2014-11-15T22:47:54+08:00</updated>
  <id>http://bluesalt.github.io/</id>
  <author>
    <name><![CDATA[Jeff Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pagemap Interface of Linux Explained]]></title>
    <link href="http://bluesalt.github.io/blog/2014/11/08/pagemap-interface-of-linux-explained/"/>
    <updated>2014-11-08T08:40:24+08:00</updated>
    <id>http://bluesalt.github.io/blog/2014/11/08/pagemap-interface-of-linux-explained</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#pagemap-interface-explained">Pagemap Interface Explained</a>    <ul>
      <li><a href="#procpidpagemap">/proc/${pid}/pagemap</a></li>
      <li><a href="#prockpagecount">/proc/kpagecount</a></li>
      <li><a href="#prockpageflags">/proc/kpageflags</a></li>
    </ul>
  </li>
  <li><a href="#parse-the-pagemap-interface">Parse the Pagemap Interface</a></li>
  <li><a href="#read-procpidpagemap">Read /proc/$PID/pagemap</a></li>
  <li><a href="#read-prockpagecount">Read /proc/kpagecount</a>    <ul>
      <li><a href="#section">#</a></li>
    </ul>
  </li>
  <li><a href="#read-prockpageflags">Read /proc/kpageflags</a>    <ul>
      <li><a href="#conclusion">Conclusion</a></li>
      <li><a href="#further-reading">Further Reading</a></li>
    </ul>
  </li>
</ul>

<p>As we know, Linux supports virtual memory. Actually, almost all modern general operating systems such as Solaris, Windows, Mac OS X support virtual memory. Every user space process in Linux has its own virtual address space. The virtual address will be translated to physical address by operating system finally. In fact, most CPU architectures such as x86 and arm provide hardware support for virtual to physical address translation with MMU. In that case, the translation is done by the cooperation of operating system(software) and CPU(hardware). In this post, I am trying to explain the pagemap interface which is used to explore the mapping information of physical memory.</p>

<!--more-->

<p>I assume you are familiar with the basic memory management principles. At least you must know</p>

<ul>
  <li>Terminologies like virtual page, page frame, page size</li>
  <li>How to locate an address within a page</li>
  <li>Basic administration knowledge of Linux such as proc file system</li>
  <li>Know how to figure out virtual addresses that are interesting to you of a process in the proc file system or with tools such as GDB and readelf </li>
</ul>

<h2 id="pagemap-interface-explained">Pagemap Interface Explained</h2>
<p>Managing hardware is one of the operating system’s main responsibilitiles. OS kernel needs some data structures to manage the physical memory. Since those data structures lives in kernel space, they can’t be accessed from the user space directly. The pagemap interface which has been introduced since 2.6.25 allows page tables and related information to be examined from user space. The information is exposed as virtual files living in proc file system:</p>

<ul>
  <li>/proc/$(pid}/pagemap</li>
  <li>/proc/kpagecount</li>
  <li>/proc/kpageflags</li>
</ul>

<p>Let’s start to explore these files now.</p>

<h3 id="procpidpagemap">/proc/${pid}/pagemap</h3>
<p>This file contains the map information between virtual pages and physical pages of a process. The mapping information between a virtual page and physical page is represented as a 64-bit long entry. The file is a virtual file which means that it does not exist in the disk. Even so, you can imagine that it consists of many 64-bit long records each of which contains the physical page frame number of a virtual memory page and some other attributes. For example, record 0, 1, 2  are for the first, second and third virtual page respectively. In other words, the records are indexed by the virtual page number.
<span class='caption-wrapper left'><img class='caption' src='/images/pagemap.png' width='500' height='250' alt='Fig-1: Format of Pagemap Entry' title='Fig-1: Format of Pagemap Entry'><span class='caption-text'>Fig-1: Format of Pagemap Entry</span></span>
Fig-1 is the format of pagemap entries. Please refer to the <a href="https://www.kernel.org/doc/Documentation/vm/pagemap.txt">design doc</a> of the pagemap interface to see the detail of the format. It should be noted that the entry’s content represent different information when page is present and swapped out.</p>

<h3 id="prockpagecount">/proc/kpagecount</h3>
<p>In linux, it is possible (and likely!) that a physical page is mapped to different virtual pages of different process. This kpagecount file contains the reference number of physical pages. It is also a virtual file in which each physical frame’s reference count is represent as a 64-bit integer and indexed by the physical frame number. For example, if you want to find second physical frame’s reference count, you can just need to simply read byte 8 to byte 15 of the kpagecount file. </p>

<h3 id="prockpageflags">/proc/kpageflags</h3>
<p>This virtual file contains the flags of physical frames. The flags of each page frame are present in a 64-bit long entry which is also indexed by the physical frame number. That means it is accessed in the same way as the kpagecount file. Each bit in the entry present a flag. I won’t explore every flags here because they are explained clearly in the <a href="https://www.kernel.org/doc/Documentation/vm/pagemap.txt">design doc</a>. Even the entry is 64-bit long, only 23 bit are used so far. </p>

<h2 id="parse-the-pagemap-interface">Parse the Pagemap Interface</h2>
<p>Following is a Python script to parse the files of pagemap interface. It accepts 2 arguments, one is the process’ pid and the other is the virtual address. Remember to append the <code>0x</code> prefix if you want to pass a hexadecimal address.</p>

<p>```python
#!/usr/bin/python</p>

<p>import sys
import os
import binascii
import struct</p>

<p>def read_entry(path, offset, size=8):
  with open(path, ‘r’) as f:
    f.seek(offset, 0)
    return struct.unpack(‘Q’, f.read(size))[0]</p>

<h1 id="read-procpidpagemap">Read /proc/$PID/pagemap</h1>
<p>def get_pagemap_entry(pid, addr):
  maps_path = “/proc/{0}/pagemap”.format(pid)
  if not os.path.isfile(maps_path):
    print “Process {0} doesn’t exist.”.format(pid)
    return</p>

<p>page_size = os.sysconf(“SC_PAGE_SIZE”)
  pagemap_entry_size = 8
  offset  = (addr / page_size) * pagemap_entry_size</p>

<p>return read_entry(maps_path, offset)</p>

<p>def get_pfn(entry):
  return entry &amp; 0x7FFFFFFFFFFFFF</p>

<p>def is_present(entry):
  return ((entry &amp; (1 « 63)) != 0)</p>

<p>def is_file_page(entry):
  return ((entry &amp; (1 « 61)) != 0)
##########################################################</p>

<h1 id="read-prockpagecount">Read /proc/kpagecount</h1>
<p>def get_pagecount(pfn):
  file_path = “/proc/kpagecount”
  offset = pfn * 8
  return read_entry(file_path, offset)</p>

<h6 id="section">#</h6>

<h1 id="read-prockpageflags">Read /proc/kpageflags</h1>
<p>def get_page_flags(pfn):
  file_path = “/proc/kpageflags”
  offset = pfn * 8
  return read_entry(file_path, offset)</p>

<p>if <strong>name</strong> == “<strong>main</strong>”:
  pid = sys.argv[1]
  if sys.argv[2].startswith(“0x”):
    addr = long(sys.argv[2], base=16)
  else:
    addr = long(sys.argv[2])</p>

<p>entry = get_pagemap_entry(pid, addr)
  pfn = get_pfn(entry)
  print “PFN: {}”.format(hex(pfn))
  print “Is Present? : {}”.format(is_present(entry))
  print “Is file-page: {}”.format(is_file_page(entry))
  print “Page count: {}”.format(get_pagecount(pfn))
  print “Page flags: {}”.format(hex(get_page_flags(pfn)))</p>

<p>```</p>

<p>Save the script as v2pfn.py. Usage:</p>

<p>```bash
sudo ./v2pfn $PID $ADDRESS</p>

<p>```</p>

<p>Of course, this script does not cover everything of the pagemap interface. What I want to show here is how to read the information of a physical frame from the interface. It is very to extend if you want to parse other flags. </p>

<h2 id="conclusion">Conclusion</h2>
<p>Pagemap interface is a quite simple tool to learn more about how Linux manage the physical memory. Hope this post can be helpful to understanding it. However, pagemap interface does <strong>NOT</strong> expose the origin PTE entry. This is kind of pity because PTE is very helpful to understand how virtual addresses are translated to physical address by CPU. In next post, I will show you how to inspect the raw PTE entry with SystemTap. Stay tuned.</p>

<h2 id="further-reading">Further Reading</h2>

<ul>
  <li><a href="https://www.kernel.org/doc/Documentation/vm/pagemap.txt">design doc</a>: The design doc of the pagemap. Besides explaining the interface, it also give some examples to use the interface. </li>
  <li><a href="http://lxr.linux.no/#linux+v3.17.3/tools/vm/page-types.c">page-type tool</a> A pagemap interface explore tool shipped with the linux kernel. It need to be compiled before you use it.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install SystemTap in Ubuntu 14.04]]></title>
    <link href="http://bluesalt.github.io/blog/2014/10/10/install-systemtap-in-ubuntu-14-dot-04/"/>
    <updated>2014-10-10T20:07:09+08:00</updated>
    <id>http://bluesalt.github.io/blog/2014/10/10/install-systemtap-in-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#install-systemtap">Install SystemTap</a></li>
  <li><a href="#install-debug-file">Install debug file</a></li>
  <li><a href="#troubleshooting">Troubleshooting</a>    <ul>
      <li><a href="#build-directory-not-found">build directory not found</a></li>
      <li><a href="#disktopstp-does-not-work">disktop.stp does not work</a></li>
      <li><a href="#pass-4-compile-error">pass 4 compile error</a></li>
    </ul>
  </li>
  <li><a href="#further-reading">Further Reading</a></li>
</ul>

<p>About 2 months ago, I happened to read a book about how to learn OS principles by hands-on experience on Solaris with MDB and DTrace. After reading the chapters about memory management, I was totally impressed by MDB and DTrace. They acts like a microscope to help you look into the kernel. For example, you can walk through the data structures used by Solaris kernel to manage the process. You can even observe the memory related data structures and emulate the translation between virtual address and physical address manually. Then I became curious about if Linux has similar tools because I am pretty sure that it will be very helpful to understand the design and implementation of Linux kernel. </p>

<!--more-->

<p>Since I have heard about SystemTap before, so after googling “systemtap ubuntu”, I found several articles about how to install SystemTap in Ubuntu. However, those are kind of outdated even the one posted in the SystemTap’s homepage. For example,  some complicated steps are not needed anymore while some are not applicable when working with latest kernel. So I decided to write down this experience. The environment is a Ubuntu 14.04(trust) box running in DigitalOcean with 3.13.0-36-generic kernel image.</p>

<h3 id="install-systemtap">Install SystemTap</h3>
<p>SystemTap 2.3 is available in the apt source thus it can be installed simply with <code>apt-get</code>. Gcc is also required since the SystemTap script will be translated into C source code which will be compiled as kernel module finally.</p>

<p><code>bash
sudo apt-get install systemtap
sudo apt-get install gcc 
sudo apt-get install linux-headers-$(uname -r)
</code></p>

<p>Test the installation with the HelloWorld example:</p>

<p><code>bash
sudo stap -e 'probe begin { printf("Hello, World!\n"); exit() }'
</code></p>

<p>You should see <code>Hello, World!</code> is emitted in the console.</p>

<h3 id="install-debug-file">Install debug file</h3>
<p>SystemTap is a powerful trace tool. Let’s see another example which will print <code>hello world</code> to the console when the system call <code>sys_call</code> is called.</p>

<p><code>bash
sudo stap -e 'probe kernel.function("sys_open") {log("hello world") exit()}'
</code></p>

<p>It is likely to end with the error information:</p>

<p>```
semantic error: while resolving probe point: identifier ‘kernel’ at <input />:1:7
        source: probe kernel.function(“sys_open”) {log(“hello world”) exit()}
                      ^</p>

<p>semantic error: missing x86_64 kernel/module debuginfo [man warning::debuginfo] under ‘/lib/modules/3.13.0-36-generic/build’
Pass 2: analysis failed.  [man error::pass2]
```</p>

<p>The debug symbols are required to solve this problem. You can following the instruction in the <a href="https://wiki.ubuntu.com/Kernel/Systemtap#Where_to_get_debug_symbols_for_kernel_X.3F">Ubuntu Wiki</a>.</p>

<p>You can also install the symbols manually if you failed by following above instructions.  Goto <a href="http://ddebs.ubuntu.com/pool/main/l/linux/">ddeb</a> and find a symbol file matched your kernel. If you are not able to find a matched symbol file, I suggest you upgrade your linux kernel or you will have to build it by yourself.</p>

<p><code>bash
wget http://ddebs.ubuntu.com/pool/main/l/linux/linux-image-3.13.0-36-generic-dbgsym_3.13.0-36.63_amd64.ddeb
sudo dpkg -i  linux-image-3.13.0-36-generic-dbgsym_3.13.0-36.63_amd64.ddeb
</code></p>

<h3 id="troubleshooting">Troubleshooting</h3>

<h4 id="build-directory-not-found">build directory not found</h4>

<p>Error Information:</p>

<p><code>
Checking "/lib/modules/3.13.0-36-generic/build/.config" failed with error: No such file or directory
</code></p>

<p><code>/lib/modules/3.13.0-36-generic/build</code> is actually a soft link to the linux header files directory. This error is not supposed to appear because when you install the headers by <code>sudo apt-get install linux-headers-$(uname -r)</code>, the soft link will be created automatically. But if you are as unlucky as me, please install the linux headers and make sure the <code>build</code> links to <code>/usr/src/linux-headers-3.13.0-36-generic/</code>.</p>

<h4 id="disktopstp-does-not-work">disktop.stp does not work</h4>
<p>SystemTap is also shipped with some <a href="https://sourceware.org/systemtap/examples/">examples</a>. <code>disktop.top</code> is a SystemTap script used to get the status of reading/writing. If you use the SystemTap provided by the apt software repository, the following error is likely to occur.</p>

<p><code>
/tmp/stapvSQlYC/stap_46806491689887ce5beb12ed5b6f2994_27689_src.c: In function ‘function_uid’:
/tmp/stapvSQlYC/stap_46806491689887ce5beb12ed5b6f2994_27689_src.c:3459:16: error: incompatible types when assigning to type ‘int64_t’ from type ‘kuid_t’
  STAP_RETVALUE = current_uid();
                ^
make[1]: *** [/tmp/stapvSQlYC/stap_46806491689887ce5beb12ed5b6f2994_27689_src.o] Error 1
make: *** [_module_/tmp/stapvSQlYC] Error 2
WARNING: kbuild exited with status: 2
Pass 4: compilation failed.  [man error::pass4]
Tip: /usr/share/doc/systemtap/README.Debian should help you get started.
</code></p>

<p>This is probably a <a href="https://bugs.launchpad.net/ubuntu/+source/systemtap/+bug/1286865">bug</a>. One way to fix it is building SystemTap from source. </p>

<p><code>bash
sudo apt-get remove systemtap
wget https://fedorahosted.org/releases/e/l/elfutils/0.160/elfutils-0.160.tar.bz2
wget https://sourceware.org/systemtap/ftp/releases/systemtap-2.5.tar.gz
tar jxf elfutils-0.160.tar.bz2
tar zxf systemtap-2.5.tar.gz
cd systemtap-2.5
./configure --with-elfutils=../elfutils-0.160
make 
sudo make install
</code> </p>

<h4 id="pass-4-compile-error">pass 4 compile error</h4>
<p>This is the most weird issue I have met. Almost all the examples can’t work and SystemTap keeps complaing <code>pass 4: compilation failed. [man error::pass4]</code>. That means the SystemTap script can be translated into C source code which can also be compile as a kernel module. However, it fails to load the kernel module. After downgrading the kernel from 3.13.0-36 to 3.13.0-32, I found ever thing is ok. After I switched back to 3.13.0-36, however, nothing is wrong. If you meet similar issue, try to clean the symbols file, linux headers and switch to other kernel version with matched debug symbol files and linux headers.</p>

<h3 id="further-reading">Further Reading</h3>
<ol>
  <li>
    <p><a href="http://www.opensourceforu.com/2011/12/getting-started-with-systemtap/">Getting Started with SystemTap</a>: A introduction with simple examples. It is simple and thus good for beginners.</p>
  </li>
  <li>
    <p><a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/SystemTap_Beginners_Guide/">SystemTap Beginners Guid</a>: SystemTap guide from Red Hat planned for beginners </p>
  </li>
  <li>
    <p><a href="https://sourceware.org/systemtap/wiki/SystemTapOnCentOS">SystemTap on CentOS</a>: Detail how to install SystemTap in CentOS. I followed the step on a CentOS 6.5 box. The whole process was very smooth. Every thing is fine including the disktop example.</p>
  </li>
  <li>
    <p><a href="https://sourceware.org/systemtap/examples/">SystemTap examples</a>: Examples from SystemTap’s homepage</p>
  </li>
</ol>
]]></content>
  </entry>
  
</feed>
