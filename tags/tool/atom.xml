<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: tool | Jeff Li]]></title>
  <link href="http://bluesalt.github.io/tags/tool/atom.xml" rel="self"/>
  <link href="http://bluesalt.github.io/"/>
  <updated>2017-09-05T21:38:27+08:00</updated>
  <id>http://bluesalt.github.io/</id>
  <author>
    <name><![CDATA[Jeff Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vagrant Networking Explained]]></title>
    <link href="http://bluesalt.github.io/blog/2017/04/22/vagrant-networking-explained/"/>
    <updated>2017-04-22T18:28:44+08:00</updated>
    <id>http://bluesalt.github.io/blog/2017/04/22/vagrant-networking-explained</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#concepts">Concepts</a></li>
  <li><a href="#vagrant-networking">Vagrant Networking</a>    <ul>
      <li><a href="#public-networking">Public Networking</a></li>
      <li><a href="#private-networking">Private Networking</a></li>
      <li><a href="#forwarded-ports">Forwarded Ports</a></li>
    </ul>
  </li>
  <li><a href="#epilogue">Epilogue</a></li>
</ul>

<h3 id="introduction">Introduction</h3>
<p>In the post <a href="https://blog.jeffli.me/blog/2016/12/06/a-beginners-guide-for-vagrant/">A Beginner’s Guide for Vagrant</a> we showed how to get started with Vagrant. I believe it is worthwhile to write a dedicated post to explain networking in Vagrant for several reasons.
<!--more--></p>

<ul>
  <li>I have found that some Vagrant beginner including me have got stuck on Vagrant networking such as failing to access the service in Vagrant VM.</li>
  <li>Networking is the first priority to figure out when it comes to <a href="https://www.vagrantup.com/docs/multi-machine/">multiple machines</a> which is very common since applications are getting more and more complicated.</li>
  <li>Sometimes you want to simulate a complex network environment.</li>
</ul>

<h3 id="concepts">Concepts</h3>

<p>Figure-1 depicts a typical home networking topology which is should be familiar to the readers. We’ll use this model to explain networking in Vagrant because it is much simpler than that in data center. But the concepts should be applied in any network where Vagrant runs. We assume that Vagrant is running in the laptop whose IP address is <code>192.168.1.10</code>.</p>

<p><span class='caption-wrapper'><span class='caption-text'>Figure-1: Home Networking Topology</span><img class='caption' src='/images/home-networking.png' width='' height='' alt='Figure-1: Home Networking Topology' title='Figure-1: Home Networking Topology'></span></p>

<p>It is worth mentioning that <code>192.168.1.10</code> is actually a <a href="https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces">private IPv4 address</a>. Ideally, every Vagrant host should be assigned with at least one public IP address. However, it is unrealistic at the moment due to the lack of IPv4 address resource and slow transformation from IPv4 to IPv6. Nevertheless, what we are gonna discuss should apply no matter the address of the host is public or not.</p>

<h3 id="vagrant-networking">Vagrant Networking</h3>

<p>So far, Vagrant has provide 3 networking options. The underlying implementation is provider-dependent hence it is possible that the option is unavailable with some specific provider—for example, the UDP port forwarding in <a href="https://github.com/vagrant-libvirt/vagrant-libvirt">libvirt provider</a> has not been implemented yet. If what is discussed in this post does not work as expected in your environment, please check the provider docs to see if it is fully supported.</p>

<h4 id="public-networking">Public Networking</h4>

<p>Public network gives the VM the same network visibility as the Vagrant host. Wherever the Vagrant host is accessable, the VM could be reached directly as another standalone machine because it has a dedicated IP address in the same network subnet with the Vagrant host. Figure-2 shows the network topology.</p>

<p><span class='caption-wrapper'><span class='caption-text'>Figure-2: Vagrant Public Networking</span><img class='caption' src='/images/vagrant-public-networking.png' width='' height='' alt='Figure-2: Vagrant Public Networking' title='Figure-2: Vagrant Public Networking'></span></p>

<p>Even the VM is running inside the host, it is able to be accessed directly by the desktop whose IP is <code>192.168.1.11</code>. Of course, this capability is implemented by the underlying providers instead of the Vagrant itself. Typically, it is achieved by a software bridge device. You can see that the IP address of the host has been shifted to the bridge device.</p>

<p>The word <code>public</code> does not mean that the IP addresses have to be <a href="https://en.wikipedia.org/wiki/IP_address#Public_address">public routable IP addresses</a>. Hence it is kind of confusing. The <a href="https://www.vagrantup.com/docs/networking/public_network.html">doc</a> also states that <code>bridged networking</code> would be more accurate. In fact, <code>public networking</code> is called <code>bridged networking</code> in the early days—see the <a href="http://docs-v1.vagrantup.com/v1/docs/bridged_networking.html">doc of old version</a>. Just keep one simple rule in mind—if the VM’s assigned IP is in the same subnet of the host, then it is a public networking configuration.</p>

<p>It should be noted that public networking is not always available even though the providers support bridged networking. It depends on whether you have control over the subnet where the host lives. Typically, the IP addresses—both public and private—assignment will be managed by network administrators in organizations which means you are not able to acquire extra IP addresses at will. In that case, the bridged networking will not work.</p>

<h4 id="private-networking">Private Networking</h4>

<blockquote>
  <p>Vagrant private networks allow you to access your guest machine by some address that is not publicly accessible from the global internet. In general, this means your machine gets an address in the private address space.</p>
</blockquote>

<p>The definition is quoted from <a href="https://www.vagrantup.com/docs/networking/private_network.html">Vagrant docs</a>. However, IMHO, it is vague. As an experienced Vagrant user, it is really uninformative. Figure-3 shows the sketch of the private networking in Vagrant.</p>

<p><span class='caption-wrapper'><span class='caption-text'>Figure-3: Vagrant Private Networking</span><img class='caption' src='/images/vagrant-private-networking.png' width='' height='' alt='Figure-3: Vagrant Private Networking' title='Figure-3: Vagrant Private Networking'></span></p>

<p>Technically, in private networking, a virtualized subnet that is invisible from outside of Vagrant host will be created by the underling provider—Vagrant just provides the abstraction with no implementation. Virtual machines attached to the same virtualized subnet are ables to communicate with each other. Unlike public networking, there is no way for the desktop whose ip is <code>192.168.1.11</code> to connect to the virtual machines directly.</p>

<p>Since the addresses assigned to the virtual machines are <a href="https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces">private IPv4 ones</a>, the IP address range chosen to the virtualized subnet shall not be conflict with any existing network. Especially when the host itself is running in a private subnet as shown in Figure-3. Per my experience, <code>172.16.0.0 – 172.31.255.255</code> is rarely used in organizations which makes it suitable in private networking.</p>

<p>As mentioned before, Vagrant itself just defines the high level abstract options which are implemented by underlying providers. Usually, Vagrant knows how to involve the underlying providers to create the necessary subnets automatically. Thus there is no need for users to configure subnets manually. However, if the IP address range chosen by the Vagrant needs to be changed, manual networking configuration in the provider is required. It varies from provider to provider and the docs of providers should be referenced if networking customization is required.</p>

<p>The private networking in Vagrant only specifies that the virtual machines within the same subnet are visible to each other—it does NOT tell whether the virtual machines are able to access the network outside the host. The behavior is provider-dependent. For example, private networking with VirtualBox is limited on the host while in Libvirt the virtual machines are able to reach the outside. The docs about providers’ networking should be turned to if you need to get the detail.</p>

<p>Finally, like the <code>public networking</code>, the <code>private</code> is kind of confusing, at least uninformative. <code>host-only</code> which was used to name the same method in <a href="http://docs-v1.vagrantup.com/v1/docs/host_only_networking.html">the early days</a> would be better. </p>

<h4 id="forwarded-ports">Forwarded Ports</h4>

<p>Forwarded ports expose the accessibility of virtual machines to the world outside the Vagrant host. In Figure-4, assume that an Nginx HTTP server runs in the virtual machine which uses private networking. Thus it is impossible to access the service from outside of the host. But through a forwarded port, the service is able to be exposed as a service of the Vagrant host which makes it public.</p>

<p><span class='caption-wrapper'><span class='caption-text'>Figure-4: Vagrant Fowarded Ports Networking</span><img class='caption' src='/images/vagrant-fowarded-ports.png' width='' height='' alt='Figure-4: Vagrant Fowarded Ports Networking' title='Figure-4: Vagrant Fowarded Ports Networking'></span></p>

<p>If public networking is used, forwarded ports would be useless because the VMs are already public. However, as mentioned, public networking is not always available due to the fact that it needs some prerequisites that are not always met. Under the circumstances, the combination of private networking and forwarded ports would be the only choice.</p>

<h3 id="epilogue">Epilogue</h3>

<p>Vagrant networking is not hard actually because it is an abstraction for the rich underlying providers. But it is not easy either so I hope this post would be a good complement to the official docs. Just keep the following rules in mind.</p>

<ul>
  <li>Don’t misunderstand the public/private networking for the public/private IPv4 addresses. They don’t address the same issues.</li>
  <li>Public networking attaches virtual machines to the same subnet with the Vagrant host</li>
  <li>Private networking hides virtual machines from the outside of the Vagrant host</li>
  <li>Forwarded ports create tunnels from virtual machines to outside world</li>
</ul>

<p>Besides the common options, provider-specific options are also allowed such as <a href="https://www.vagrantup.com/docs/virtualbox/networking.html">VirtualBox</a> and  <a href="https://github.com/vagrant-libvirt/vagrant-libvirt#networks">Libvirt</a>. If you use different providers, check the doc to see if any extra option is available.</p>

<p>The networking options provided by Vagrant are actually high level, abstraction ones. The implementation varies from provider to provider. Usually you don’t have to know the implementation detail but getting a deep view would helpful for troubleshooting. Learning the network models of each provider would be a good start.</p>

<ul>
  <li><a href="https://www.virtualbox.org/manual/ch06.html">VirtualBox Networking</a></li>
  <li><a href="https://libvirt.org/archnetwork.html">Libvirt Networking Architecture</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Beginner's Guide for Vagrant]]></title>
    <link href="http://bluesalt.github.io/blog/2016/12/06/a-beginners-guide-for-vagrant/"/>
    <updated>2016-12-06T07:28:04+08:00</updated>
    <id>http://bluesalt.github.io/blog/2016/12/06/a-beginners-guide-for-vagrant</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#getting-started">Getting Started</a></li>
  <li><a href="#how-it-works">How It Works</a>    <ul>
      <li><a href="#provider">Provider</a></li>
      <li><a href="#box">Box</a></li>
      <li><a href="#provisioner">Provisioner</a></li>
    </ul>
  </li>
  <li><a href="#what-is-next">What is Next</a></li>
</ul>

<h3 id="introduction">Introduction</h3>
<p><a href="https://www.vagrantup.com/">Vagrant</a> is a tool developed at <a href="https://www.hashicorp.com/">HashiCorp</a> intended to relieve the effort to setup development environment. According to its document, Vagrant is able to “create and configure lightweight, reproducible, and portable development environments”. It relizes the vision through virtualization technologies like VirtualBox.
By the way, besides Vagrant, HashiCorp also deliver several open source DevOps tools which are really cool. I suggest spending some time on exploring their products if you are interested in DevOps.
<!--more--></p>

<p>The biggest pain point Vagrant solves is how to boot up a consistent development environment in every host. The benefit is obvious.</p>

<ul>
  <li>Boot up a consistent development environment anywhere.
    <ul>
      <li>If you have multiple laptops, it makes you work seamlessly with any one of them.</li>
      <li>The development environment is able to be shared among the whole team. There is no need for new team members to spend a day on setting up the environment.</li>
    </ul>
  </li>
  <li>The whole development environment is defined in <code>Vagrantfile</code> which is Ruby code in fact. That means the environment can be versioned with version control system like <code>Git</code> and thus could be shared easily.</li>
</ul>

<h3 id="getting-started">Getting Started</h3>
<p>As mentioned before, Vagrant is built on virtualization, so before getting your hands dirty, you need</p>

<ul>
  <li>Grab and install Vagrant from the <a href="https://www.vagrantup.com/downloads.html">project’s website</a></li>
  <li>Choose a virtualization platform and have it installed. We’ll use <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a> as our example. Other <a href="https://www.vagrantup.com/docs/providers/">alternative choices</a> are also available if you are interested.</li>
</ul>

<p>From the <a href="https://www.vagrantup.com/docs/getting-started/">doc</a>, it is very easy to boot up a virtual machine.</p>

<p><code>
vagrant init centos/7
vagrant up
</code></p>

<p>Here is the list of what actually happen.  </p>

<ul>
  <li>The Vagrant command line tool create a <code>Vagrantfile</code> with following content which indicates that vagrant should boot up a virtual machine based on the OS image called <code>centos/7</code>. </li>
</ul>

<p><code>ruby
Vagrant.configure(2) do |config|
  config.vm.box = "centos/7"
end
</code></p>

<ul>
  <li>
    <p>Vagrant tries to locate the OS image in the local image repo. If not found , it attempts to download the image from <a href="https://atlas.hashicorp.com/boxes/search">HashiCorp’s box search service</a>. The path of local image repo is <code>$HOME/.vagrant.d/boxes</code>.</p>
  </li>
  <li>
    <p>Create a virtual machine based on the OS image</p>
  </li>
</ul>

<p>For now, we have a running virtual machine. Imagine the day you booted up a VM by *.iso image, life becomes pretty easy now. Next we can control the VM by running <code>vagrant ssh</code>. This seems like magic but if you run <code>ps -ef | grep vagrant</code>, you can see something like this </p>

<p><code>
ssh vagrant@127.0.0.1 -p 2222 -o Compression=yes -o DSAAuthentication=yes -o LogLevel=FATAL -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o IdentitiesOnly=yes -i $PWD/.vagrant/machines/default/virtualbox/private_key
</code></p>

<p>That means <code>vagrant ssh</code> connects to the VM by calling the <code>ssh</code> utility and nothing else. Wait, why the host is <code>127.0.0.1</code> ?  We’ll check this out in another blog post dedicated to Vagrant network.</p>

<h3 id="how-it-works">How It Works</h3>
<p>Essentially, Vagrant provides the features:</p>

<ul>
  <li>A nearly hypervisor-agnostic abstraction for managing virtual machines.</li>
  <li>A way to define the development environment with code. A typical Vagrant development environment includes 2 parts
    <ul>
      <li>A virtual machine</li>
      <li>Toolchain like GCC, lib dependencies and Java running in the virtual machine</li>
    </ul>
  </li>
</ul>

<p>Let’s see how Vagrant makes it.</p>

<h4 id="provider">Provider</h4>
<p>Provider means the type of underlying virtualization technology. Though it is able to manage virtual machines, Vagrant is not a hypervisor itself. Instead, it is just abstraction of managing virtual machines in different hypervisors. That is why we said that hypervisor is a prerequisite for Vagrant.</p>

<p>Vagrant supports multiple types of hypervisor such as <code>VirtualBox</code>, <code>VMware Fusion</code>, <code>VMware Workstation</code>, <code>Hyper-V</code> and <code>Docker</code>. It is worth mentioning that thanks to the plugable provider architecture, Vagrant is able to manage virtual machines in cloud service like <code>AWS</code>, <code>DigitalOcean</code>, <code>VMware vSphere</code>, <code>OpenStack</code> besides hypervisors mentioned before.</p>

<h4 id="box">Box</h4>
<p>Box packages OS images required by the underlying hypervisor to run the virtual machine. Typically, each hypervisor has its own OS image format. Thus when building or downloading boxes, you have to choose the target hypervisor. Boxes are organized in local repo located in  <code>$HOME/.vagrant.d/boxes</code>. There are multiple ways to add a box to the local box repo.</p>

<ul>
  <li>From HashiCorp’s <a href="https://atlas.hashicorp.com/boxes/search">box discovery service</a>. You can search the OS box you want to run and add it to the local repo by <code>vagrant box add</code> command. Note, you should <strong>ALWAYS</strong> download the boxes you trust. Fortunately, some popular OS distributions like <a href="https://atlas.hashicorp.com/centos/boxes/7">CentOS</a> and <a href="https://atlas.hashicorp.com/ubuntu/boxes/xenial64">Ubuntu</a> provide the OS boxes officially. HashiCorp provides some boxes too.</li>
  <li>Use <a href="https://www.packer.io/">Packer</a>, another tool from HashiCorp to build boxes from iso images. <a href="https://www.chef.io/">Chef</a> provides a whole bunch of <a href="https://github.com/chef/bento">Packer templates</a> in GitHub to make life much more easier.</li>
  <li>Create box from existing virtual machines running in different hypervisor. See the <a href="https://www.vagrantup.com/docs/boxes/base.html">doc</a> for more detail.</li>
</ul>

<p>For new Vagrant users, the first method should be preferred because it is easy. For example, a CentOS 7 box could be added by one command line <code>vagrant box add centos/7</code>. The box is trusted because it is distributed officially.</p>

<p><strong>Tip</strong>: In some districts like China mainland, it would takes several hours to download the whole box and the download has to be restarted from the begin if any error occurs during transfer which is really painful sometime. A workaround is using some download tools like Thunder to <a href="http://stackoverflow.com/questions/28399324/download-vagrant-box-file-locally-from-atlas-and-configuring-it">download Vagrant box manually</a> to local hostand then add it to the box repo.</p>

<h4 id="provisioner">Provisioner</h4>
<p>The example doesn’t leverage any provisioner but we have mentioned that one of the essential parts of a development environment is the toolchain. It is impractical to package all the development tools in a box thus the Vagrant provides facility to customize the virtual machine.</p>

<p>There are many deveops tools available to automate configuration management such as <a href="https://www.ansible.com/">Ansible</a>, <a href="https://puppet.com/">Puppet</a>, <a href="https://saltstack.com/">SaltStack</a> and <a href="https://www.chef.io/">Chef</a>. Vagrant does not reinvent the wheel. Instead, it makes an abstract on different tools so the users could choose any technique they want. The tools are called <code>provisioners</code>.</p>

<p>Supported provisioner list could be found in the <a href="https://www.vagrantup.com/docs/provisioning/">doc</a>. You could choose any one you want. If you don’t have experience with any tool yet, I strongly recommend Anislbe because it is simple yet powerful. </p>

<h3 id="what-is-next">What is Next</h3>
<p>Vagrant is a powerful tool. It is impossible to cover everything in a single post.  Here are some other interesting topics deserves to be explored.</p>

<ul>
  <li><strong>Provisioner</strong>: We don’t show any usage about provisioner in this post. However, it is essential for customizing a envrionment. Ansible should be considered if you are a developer since it is lightweight and easy to learn.</li>
  <li><strong>QEMU provider</strong>: VirtualBox is great and most of time it is adequate. But it does not support <a href="https://en.wikipedia.org/wiki/Virtualization#Nested_virtualization">nested virtualzation</a> which is the ability to run virtual machines within another virtual machine. Most of hypervisors like VMware Fusion, Hyper-V and QEMU except VirtualBox support such a feature. Nested virtualization is very useful when creating demo cluster. There is also a company named <a href="https://www.ravellosystems.com/">Ravello</a> who has been acquired by Oracle focusing on nested virtualzation technique. Hyper-V is not cross-platform and VMware Fusion/Workstation is charged. Vagrant provider for VMware Fusion/Workstation is also charged. So QEMU is another provider worthy playing with.</li>
  <li><strong>Docker provider</strong>: As one of the hottest techniques, Docker is worthy noting. Compared with hypervisors like VirtualBox, Docker is much much more lightweight. It is not a hypervisor, but it does provide some abstraction of a virtual machine. Its overhead is very low too which makes it is easy to boot dozens of Docker containers in you laptop. Of course, it is not as versatile as hypervisors but if it meets your need,it would be a good choices.</li>
  <li><strong>Network</strong>: Many new users will be confused on the network configuration of Vagrant. My suggestion is learning the network in hypervisor before you go ahead with Vagrant. <a href="https://www.virtualbox.org/manual/ch06.html">VirtualBox’s Network document</a> is a good source to refer.</li>
</ul>

]]></content>
  </entry>
  
</feed>
