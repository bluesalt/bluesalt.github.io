<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: avro | Jeff Li]]></title>
  <link href="http://bluesalt.github.io/tags/avro/atom.xml" rel="self"/>
  <link href="http://bluesalt.github.io/"/>
  <updated>2014-03-30T10:27:37+08:00</updated>
  <id>http://bluesalt.github.io/</id>
  <author>
    <name><![CDATA[Jeff Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Avro Cookbook : Part I]]></title>
    <link href="http://bluesalt.github.io/blog/2014/02/06/avro-cookbook-part-i/"/>
    <updated>2014-02-06T15:49:00+08:00</updated>
    <id>http://bluesalt.github.io/blog/2014/02/06/avro-cookbook-part-i</id>
    <content type="html"><![CDATA[<p>Avro is a data serialization framework. It is an Apache project led by Doug Cutting who is also the author of several other open source projects such as Hadoop, Lucene. Recently I need to leverage Avro to serialize/deserialize some data, however, I found its document is too poor, at least too poor for newbies like me who don&#39;t have much experience on data exchange format frameworks. </p>

<p>In fact, it is very easy to understand what Avro can do. It helps to convert Java objects into bytes and vice versa. The key information the framework needs to know is the format of the date, namely &#39;Schema&#39; in Avro. In this article, I won&#39;t spend any time on explaining what Avro is. </p>

<h2>Recipe 1: Create a Maven Avro Project</h2>

<p>Intellij IDEA is my favorite Java IDE. The free Community edition has less features than the commercial Ultimate edition, however, great experience may be gained when the free community IDEA works with Maven. They complete each other. So the examples in this article will use Maven and Intellij IDEA as the IDE. Besides, <strong>TestNG</strong> instead of JUnit will be used as the test framework.</p>

<h3>Initialize the project structure</h3>

<ul>
<li>Create an project with quickstart archetype:
<code>
mvn archetype:generate -DgroupId=me.jeffli -DartifactId=avrosamples -Dversion=0.01 -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
</code></li>
</ul>

<h3>Tweak the pom.xml</h3>

<ul>
<li><p>Add Avro dependency:
<code>xml
&lt;dependency&gt;
&lt;groupId&gt;org.apache.avro&lt;/groupId&gt;
&lt;artifactId&gt;avro&lt;/artifactId&gt;
&lt;version&gt;1.7.5&lt;/version&gt;
&lt;/dependency&gt;
</code></p></li>
<li><p>Use Avro Maven plugin
<code>xml
&lt;plugin&gt;
&lt;groupId&gt;org.apache.avro&lt;/groupId&gt;
&lt;artifactId&gt;avro-maven-plugin&lt;/artifactId&gt;
&lt;version&gt;1.7.5&lt;/version&gt;
&lt;executions&gt;
  &lt;execution&gt;
     &lt;phase&gt;generate-sources&lt;/phase&gt;
     &lt;goals&gt;
        &lt;goal&gt;schema&lt;/goal&gt;
     &lt;/goals&gt;
     &lt;configuration&gt;
        &lt;!-- make sure the directory is created --&gt;
        &lt;sourceDirectory&gt;${project.basedir}/src/main/avro/&lt;/sourceDirectory&gt;
        &lt;outputDirectory&gt;${project.basedir}/src/main/java/&lt;/outputDirectory&gt;
     &lt;/configuration&gt;
  &lt;/execution&gt;
&lt;/executions&gt;
&lt;/plugin&gt;
</code></p></li>
</ul>

<p>It should be noted that the directory <code>${project.basedir}/src/main/avro/</code> must be created even it is empty at first. It is used to place the Avro schema files. The whole pom.xml has been posted to <a href="https://gist.github.com/bluesalt/9807306">github gist</a>.</p>

<h3>Import the project into Intellij IDEA</h3>

<p>IDEA provides full support to Maven, so it is very easy to import the Maven project as a IDEA project. Click &quot;Import Project&quot; in the &#39;Quick Start&#39; panel. I suggest enable the Maven Auto-Import feature of IDEA before completing the importing process.</p>

<h2>Recipe 2: Define a Schema</h2>

<p>Assume that you want to log every access of your server, to make it simple, we only define 3 attributes in a log entry, namely the username, resource and ip. So the schema can be defined as :
<code>
{
 &quot;namespace&quot;: &quot;me.jeffli.avrosamples.model&quot;,
 &quot;type&quot;: &quot;record&quot;,
 &quot;name&quot;: &quot;LogEntry&quot;,
 &quot;fields&quot;: [
     {&quot;name&quot;: &quot;name&quot;, &quot;type&quot;: &quot;string&quot;},
     {&quot;name&quot;: &quot;resource&quot;,  &quot;type&quot;: [&quot;string&quot;, &quot;null&quot;]},
     {&quot;name&quot;: &quot;ip&quot;, &quot;type&quot;: [&quot;string&quot;, &quot;null&quot;]}
 ]
}
</code></p>

<p>Save the content as <code>${project.basedir}/src/main/avro/LogEntry.avsc</code>. After running <code>mvn compile</code>, a Java class <code>me.jeffli.avrosamples.model.LogEntry</code> will be generated automatically thank to the Avro Maven plugin.  </p>

<h2>Recipe 3: Serialize the Log Data to Disk File</h2>

<p>Assume we want to store the log data to a disk file <code>/tmp/log</code>. The code snippet would be like this:
```java
@Test
public void testSerializeLogEntries() throws IOException {
   LogEntry entry1 = new LogEntry();
   entry1.setName(&quot;Jeff&quot;);
   entry1.setResource(&quot;readme.txt&quot;);
   entry1.setIp(&quot;192.168.1.1&quot;);</p>

<p>LogEntry entry2 = new LogEntry();
   entry2.setName(&quot;John&quot;);
   entry2.setResource(&quot;readme.md&quot;);
   entry2.setIp(&quot;192.168.1.2&quot;);</p>

<p>DatumWriter<LogEntry> logEntryDatumWriter = new SpecificDatumWriter&lt;&gt;(LogEntry.class);
   DataFileWriter<LogEntry> dataFileWriter = new DataFileWriter&lt;&gt;(logEntryDatumWriter);
   File file = new File(&quot;/tmp/log&quot;);
   dataFileWriter.create(entry1.getSchema(), file);</p>

<p>dataFileWriter.append(entry1);
   dataFileWriter.append(entry2);</p>

<p>dataFileWriter.close();
}
```  </p>

<h2>Recipe 4: Deserialize the Log Data from Disk File</h2>

<p>Assume you need to parse the log data from disk files <code>/tmp/log</code>. Then the code snippet would be:
<code>java
@Test (dependsOnMethods = &quot;testSerializeLogEntries&quot;)
public void testDeSerializeLogEntries() throws IOException {
   DatumReader&lt;LogEntry&gt; logEntryDatumReader = new SpecificDatumReader&lt;&gt;(LogEntry.class);
   File file = new File(&quot;/tmp/log&quot;);
   DataFileReader&lt;LogEntry&gt; dataFileReader = new DataFileReader&lt;&gt;(file, logEntryDatumReader);
   LogEntry entry = null;
   while (dataFileReader.hasNext()) {
      entry = dataFileReader.next(entry);
      System.out.println(entry);
   }
}
</code>   </p>
]]></content>
  </entry>
  
</feed>
