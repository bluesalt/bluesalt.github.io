<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: systemtap | Jeff Li]]></title>
  <link href="http://bluesalt.github.io/tags/systemtap/atom.xml" rel="self"/>
  <link href="http://bluesalt.github.io/"/>
  <updated>2014-11-15T13:34:40+08:00</updated>
  <id>http://bluesalt.github.io/</id>
  <author>
    <name><![CDATA[Jeff Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install SystemTap in Ubuntu 14.04]]></title>
    <link href="http://bluesalt.github.io/blog/2014/10/10/install-systemtap-in-ubuntu-14-dot-04/"/>
    <updated>2014-10-10T20:07:09+08:00</updated>
    <id>http://bluesalt.github.io/blog/2014/10/10/install-systemtap-in-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#install-systemtap">Install SystemTap</a></li>
  <li><a href="#install-debug-file">Install debug file</a></li>
  <li><a href="#troubleshooting">Troubleshooting</a>    <ul>
      <li><a href="#build-directory-not-found">build directory not found</a></li>
      <li><a href="#disktopstp-does-not-work">disktop.stp does not work</a></li>
      <li><a href="#pass-4-compile-error">pass 4 compile error</a></li>
    </ul>
  </li>
  <li><a href="#further-reading">Further Reading</a></li>
</ul>

<p>About 2 months ago, I happened to read a book about how to learn OS principles by hands-on experience on Solaris with MDB and DTrace. After reading the chapters about memory management, I was totally impressed by MDB and DTrace. They acts like a microscope to help you look into the kernel. For example, you can walk through the data structures used by Solaris kernel to manage the process. You can even observe the memory related data structures and emulate the translation between virtual address and physical address manually. Then I became curious about if Linux has similar tools because I am pretty sure that it will be very helpful to understand the design and implementation of Linux kernel. </p>

<!--more-->

<p>Since I have heard about SystemTap before, so after googling “systemtap ubuntu”, I found several articles about how to install SystemTap in Ubuntu. However, those are kind of outdated even the one posted in the SystemTap’s homepage. For example,  some complicated steps are not needed anymore while some are not applicable when working with latest kernel. So I decided to write down this experience. The environment is a Ubuntu 14.04(trust) box running in DigitalOcean with 3.13.0-36-generic kernel image.</p>

<h3 id="install-systemtap">Install SystemTap</h3>
<p>SystemTap 2.3 is available in the apt source thus it can be installed simply with <code>apt-get</code>. Gcc is also required since the SystemTap script will be translated into C source code which will be compiled as kernel module finally.</p>

<p><code>bash
sudo apt-get install systemtap
sudo apt-get install gcc 
sudo apt-get install linux-headers-$(uname -r)
</code></p>

<p>Test the installation with the HelloWorld example:</p>

<p><code>bash
sudo stap -e 'probe begin { printf("Hello, World!\n"); exit() }'
</code></p>

<p>You should see <code>Hello, World!</code> is emitted in the console.</p>

<h3 id="install-debug-file">Install debug file</h3>
<p>SystemTap is a powerful trace tool. Let’s see another example which will print <code>hello world</code> to the console when the system call <code>sys_call</code> is called.</p>

<p><code>bash
sudo stap -e 'probe kernel.function("sys_open") {log("hello world") exit()}'
</code></p>

<p>It is likely to end with the error information:</p>

<p>```
semantic error: while resolving probe point: identifier ‘kernel’ at <input />:1:7
        source: probe kernel.function(“sys_open”) {log(“hello world”) exit()}
                      ^</p>

<p>semantic error: missing x86_64 kernel/module debuginfo [man warning::debuginfo] under ‘/lib/modules/3.13.0-36-generic/build’
Pass 2: analysis failed.  [man error::pass2]
```</p>

<p>The debug symbols are required to solve this problem. You can following the instruction in the <a href="https://wiki.ubuntu.com/Kernel/Systemtap#Where_to_get_debug_symbols_for_kernel_X.3F">Ubuntu Wiki</a>.</p>

<p>You can also install the symbols manually if you failed by following above instructions.  Goto <a href="http://ddebs.ubuntu.com/pool/main/l/linux/">ddeb</a> and find a symbol file matched your kernel. If you are not able to find a matched symbol file, I suggest you upgrade your linux kernel or you will have to build it by yourself.</p>

<p><code>bash
wget http://ddebs.ubuntu.com/pool/main/l/linux/linux-image-3.13.0-36-generic-dbgsym_3.13.0-36.63_amd64.ddeb
sudo dpkg -i  linux-image-3.13.0-36-generic-dbgsym_3.13.0-36.63_amd64.ddeb
</code></p>

<h3 id="troubleshooting">Troubleshooting</h3>

<h4 id="build-directory-not-found">build directory not found</h4>

<p>Error Information:</p>

<p><code>
Checking "/lib/modules/3.13.0-36-generic/build/.config" failed with error: No such file or directory
</code></p>

<p><code>/lib/modules/3.13.0-36-generic/build</code> is actually a soft link to the linux header files directory. This error is not supposed to appear because when you install the headers by <code>sudo apt-get install linux-headers-$(uname -r)</code>, the soft link will be created automatically. But if you are as unlucky as me, please install the linux headers and make sure the <code>build</code> links to <code>/usr/src/linux-headers-3.13.0-36-generic/</code>.</p>

<h4 id="disktopstp-does-not-work">disktop.stp does not work</h4>
<p>SystemTap is also shipped with some <a href="https://sourceware.org/systemtap/examples/">examples</a>. <code>disktop.top</code> is a SystemTap script used to get the status of reading/writing. If you use the SystemTap provided by the apt software repository, the following error is likely to occur.</p>

<p><code>
/tmp/stapvSQlYC/stap_46806491689887ce5beb12ed5b6f2994_27689_src.c: In function ‘function_uid’:
/tmp/stapvSQlYC/stap_46806491689887ce5beb12ed5b6f2994_27689_src.c:3459:16: error: incompatible types when assigning to type ‘int64_t’ from type ‘kuid_t’
  STAP_RETVALUE = current_uid();
                ^
make[1]: *** [/tmp/stapvSQlYC/stap_46806491689887ce5beb12ed5b6f2994_27689_src.o] Error 1
make: *** [_module_/tmp/stapvSQlYC] Error 2
WARNING: kbuild exited with status: 2
Pass 4: compilation failed.  [man error::pass4]
Tip: /usr/share/doc/systemtap/README.Debian should help you get started.
</code></p>

<p>This is probably a <a href="https://bugs.launchpad.net/ubuntu/+source/systemtap/+bug/1286865">bug</a>. One way to fix it is building SystemTap from source. </p>

<p><code>bash
sudo apt-get remove systemtap
wget https://fedorahosted.org/releases/e/l/elfutils/0.160/elfutils-0.160.tar.bz2
wget https://sourceware.org/systemtap/ftp/releases/systemtap-2.5.tar.gz
tar jxf elfutils-0.160.tar.bz2
tar zxf systemtap-2.5.tar.gz
cd systemtap-2.5
./configure --with-elfutils=../elfutils-0.160
make 
sudo make install
</code> </p>

<h4 id="pass-4-compile-error">pass 4 compile error</h4>
<p>This is the most weird issue I have met. Almost all the examples can’t work and SystemTap keeps complaing <code>pass 4: compilation failed. [man error::pass4]</code>. That means the SystemTap script can be translated into C source code which can also be compile as a kernel module. However, it fails to load the kernel module. After downgrading the kernel from 3.13.0-36 to 3.13.0-32, I found ever thing is ok. After I switched back to 3.13.0-36, however, nothing is wrong. If you meet similar issue, try to clean the symbols file, linux headers and switch to other kernel version with matched debug symbol files and linux headers.</p>

<h3 id="further-reading">Further Reading</h3>
<ol>
  <li>
    <p><a href="http://www.opensourceforu.com/2011/12/getting-started-with-systemtap/">Getting Started with SystemTap</a>: A introduction with simple examples. It is simple and thus good for beginners.</p>
  </li>
  <li>
    <p><a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/SystemTap_Beginners_Guide/">SystemTap Beginners Guid</a>: SystemTap guide from Red Hat planned for beginners </p>
  </li>
  <li>
    <p><a href="https://sourceware.org/systemtap/wiki/SystemTapOnCentOS">SystemTap on CentOS</a>: Detail how to install SystemTap in CentOS. I followed the step on a CentOS 6.5 box. The whole process was very smooth. Every thing is fine including the disktop example.</p>
  </li>
  <li>
    <p><a href="https://sourceware.org/systemtap/examples/">SystemTap examples</a>: Examples from SystemTap’s homepage</p>
  </li>
</ol>
]]></content>
  </entry>
  
</feed>
