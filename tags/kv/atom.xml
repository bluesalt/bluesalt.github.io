<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: kv | Jeff Li]]></title>
  <link href="http://bluesalt.github.io/tags/kv/atom.xml" rel="self"/>
  <link href="http://bluesalt.github.io/"/>
  <updated>2017-05-20T22:06:35+08:00</updated>
  <id>http://bluesalt.github.io/</id>
  <author>
    <name><![CDATA[Jeff Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started with RocksDB in CentOS 7]]></title>
    <link href="http://bluesalt.github.io/blog/2016/12/02/getting-started-with-rocksdb-in-centos-7/"/>
    <updated>2016-12-02T20:27:01+08:00</updated>
    <id>http://bluesalt.github.io/blog/2016/12/02/getting-started-with-rocksdb-in-centos-7</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#dynamic-linkage">Dynamic Linkage</a>    <ul>
      <li><a href="#install-the-shared-lib">Install the shared lib</a></li>
      <li><a href="#run-the-example">Run the example</a></li>
    </ul>
  </li>
  <li><a href="#static-linkage">Static Linkage</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<h3 id="introduction">Introduction</h3>
<p><a href="http://rocksdb.org/">RocksDB</a> is a high performance embedded key value storage engine which is written in C++. Though its name tells that it is a database, it is actually a C++ library providing a bunch of API instead of a Client-Server architected database.</p>

<p>I am not a C++ programmer and when trying to play with RocksDB following the <a href="http://rocksdb.org/docs/getting-started.html">Getting Started</a> guide from the RocksDB website, I found it is not easy to run the example in CentOS 7 with either dynamic or static linkage. To be more specific with dynamic linkage, the search paths of dynamic libraries vary from Linux distributions but the installation script of RocksDB does not take care of that.</p>

<p>This post is intended for those who want to play with RocksDB but failed to run the example. What will be mentioned including</p>

<ul>
  <li>How to install RocksDB as dynamic library from source in CentOS 7</li>
  <li>How to install RocksDB as static library in CentOS 7</li>
  <li>How to run the example program</li>
</ul>

<!--more-->

<p>Here is the demo program</p>

<p>```c++
#include <iostream>
#include "rocksdb/db.h"</iostream></p>

<p>using namespace std;</p>

<p>int main() {
    rocksdb::DB* db;
    rocksdb::Options options;
    options.create_if_missing = true;
    rocksdb::Status status = rocksdb::DB::Open(options, “/tmp/kv”, &amp;db);</p>

<pre><code>delete db;

return 0; } ```
</code></pre>

<p>Before you continue, please install the dependencies.</p>

<p><code>
sudo yum install gflags-devel snappy-devel zlib-devel bzip2-devel  gcc-c++  libstdc++-devel -y
</code></p>

<h3 id="dynamic-linkage">Dynamic Linkage</h3>

<h4 id="install-the-shared-lib">Install the shared lib</h4>

<p>First, run the command line to build dynamic library </p>

<p><code>
DEBUG_LEVEL=0 make shared_lib
</code></p>

<p>The <code>Makefile</code> provides a target called <code>install-shared</code> to install RocksDB shared lib.</p>

<p><code>
DEBUG_LEVEL=0 sudo -E make install-shared
</code></p>

<p>The target actually includes two jobs:</p>

<ol>
  <li>Copy all the header files under <code>$SRC_ROOT/include/rocksdb</code> to <code>/usr/local/include/rocksdb</code></li>
  <li>Copy the <code>.so</code> file and symbolic links to <code>/usr/local/lib</code>  </li>
</ol>

<h4 id="run-the-example">Run the example</h4>
<ul>
  <li>Compile the program with following command</li>
</ul>

<p><code>bash
g++ -o demo -std=c++11 -lrocksdb demo.cpp 
</code></p>

<ul>
  <li>Run the program with <code>./demo</code> and an error occurs</li>
</ul>

<p><code>
./demo: error while loading shared libraries: librocksdb.so.4.9: cannot open shared object file: No such file or directory
</code></p>

<p>The problem with the <code>install-shared</code> target is that  <code>/usr/local/lib</code> is in <code>g++</code>’s dynamic library search paths but not in <code>ldconfig</code>’s in CentOS 7 by default. So the program can be built during compiling time but will cause dynamic library load error during run time. This can be verified by following commands:</p>

<ul>
  <li>Show search paths of g++</li>
</ul>

<p><code>bash
ld --verbose | grep SEARCH_DIR | tr -s ' ;' \\012
</code> </p>

<ul>
  <li>Show search paths of ldconfig</li>
</ul>

<p><code>bash
ldconfig -v 2&gt;/dev/null | grep -v ^$'\t'
</code></p>

<p>There are 2 ways to resolve the issue. And <em>EITHER</em> one is ok.</p>

<ul>
  <li>Installing <code>.so</code> file and symbolic links into both the search paths of <code>g++</code> and <code>ldconfig</code></li>
</ul>

<p><code>
INSTALL_PATH=/usr sudo -E make install-shared
sudo ldconfig -v  #refresh the ldconfig cache
</code></p>

<ul>
  <li>Add <code>/usr/local/lib</code> to the <code>ldconfig</code>’s search paths.</li>
</ul>

<p><code>
echo "/usr/local/lib" |sudo tee /etc/ld.so.conf.d/rocksdb-x86_64.conf
sudo ldconfig -v  #refresh the ldconfig cache
</code></p>

<h3 id="static-linkage">Static Linkage</h3>
<p>As mentioned before, <code>/usr/local/lib</code> is in g++’s search path, thus there is no such dynamic load issue with static RocksDB. First build and install static RocksDB.</p>

<p><code>
DEBUG_LEVEL=0 make static_lib
DEBUG_LEVEL=0 sudo -E make install-static
</code></p>

<p>Then compile the demo program with </p>

<p><code>
g++  demo.cc -o demo -lpthread -lrocksdb  -std=c++11  -lsnappy  -lz -lbz2
</code></p>

<p>or simply</p>

<p><code>
g++  demo.cc -o demo -lpthread -lrocksdb  -std=c++11
</code></p>

<p>Don’t miss the <code>pthread</code> lib.</p>

<h3 id="conclusion">Conclusion</h3>

<p>The problem is caused by shared library search paths which could vary from different Linux distributions. A good solution to avoid the issue is packaging the files into a rpm package, and deb package in Debian platform of course.</p>

<p>It is worth noting that <code>/usr/lib64</code>, instead of <code>/usr/lib</code>, is the common place to hold the lib files in x86_64 RedHat family OSes such as CentOS, Fedora. Though <code>/usr/lib</code> works but <code>/usr/lib64</code> is a better place for the lib files in RedHat family. There is a <a href="https://github.com/facebook/rocksdb/pull/2221">patch</a> to take care of that when creating a RPM.  </p>

<s>There is another problem I have not figured out yet. It is about static linkage. If anyone know how to link RocksDB program statically please drop me a note.</s>

]]></content>
  </entry>
  
</feed>
