<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jeff Li]]></title>
  <link href="http://bluesalt.github.io/atom.xml" rel="self"/>
  <link href="http://bluesalt.github.io/"/>
  <updated>2014-08-31T09:51:21+08:00</updated>
  <id>http://bluesalt.github.io/</id>
  <author>
    <name><![CDATA[Jeff Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use GDB to Understand FUSE File System]]></title>
    <link href="http://bluesalt.github.io/blog/2014/08/30/use-gdb-to-understand-fuse-file-system/"/>
    <updated>2014-08-30T10:17:46+08:00</updated>
    <id>http://bluesalt.github.io/blog/2014/08/30/use-gdb-to-understand-fuse-file-system</id>
    <content type="html"><![CDATA[<p>During the past years, I have been involved in several storage related projects from which I have learned a lot about the world of storage. Definitely the journey is interesting. However, it is not awesome because almost all the work I have been involved is about applications of storage. Then I decided to dig more deeper in the storage world. It turned out that it is really wonderful to explore in the world of storage. </p>

<p>Actually I have heard about FUSE before but did not spend time to explore it because I thought FUSE would bring a lot of overhead and hence won&#39;t get too much application in system design. During the past months, I have seen the implementations of a few storage solutions, both open source and commercial ones. To my surprise, FUSE is used in those solutions. It is time to get acquainted with it. Per my experience, debugging is the very very useful way to learn a new technology. In this post, I will show how to use GDB to debug the hello example. You can set break points, use single step execution to observe the behavior of the FUSE application. </p>

<p><strong>CLAIM</strong>: I am not an expert on GDB or FUSE and I can&#39;t guarantee that it is practical in debugging your real world solution.</p>

<h2>Introduction to FUSE</h2>

<p>From the OS course in undergraduate school, your are told that file system is part of the kernel and it is almost true in the real world. That means typically if you want to create your own file system in a real world OS such as Linux, you have to program at the <strong>kernel space</strong>. However you can create your own file system totally in <strong>user space</strong> with the help of FUSE: Filesystem in Userspace. What is the difference? Well, there is much more restriction in kernel space programming than user space. For example, no call to third parties library such as glibc, limited recursive depth. Since Linux kernel is monolithic, a crashed kernel space program(kernel module) could make the whole OS crash too.</p>

<p>There is a simple hello file system from the homepage of the FUSE project.
Use following command lines to test the hello file system. I tested it in a Ubuntu 14.04 x86_64 box.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gcc -Wall hello.c `pkg-config fuse --cflags --libs` -o hello
</span><span class='line'>mkdir /tmp/fuse
</span><span class='line'>./hello /tmp/fuse</span></code></pre></td></tr></table></div></figure> 

<p>If every thing is all right, you should see following result:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jeff@trusty:~$ ls -l /tmp/fuse
</span><span class='line'>total 0
</span><span class='line'>-r--r--r-- 1 root root 13 Jan  1  1970 hello
</span><span class='line'>jeff@trusty:~$ cat /tmp/fuse/hello
</span><span class='line'>Hello World!</span></code></pre></td></tr></table></div></figure></p>

<h2>How does FUSE work</h2>

<p><span class='caption-wrapper'><img class='caption' src='http://bluesalt.github.io/images/fuse.png' width='' height='' alt='Fig-1: Workflow of FUSE' title='Fig-1: Workflow of FUSE'><span class='caption-text'>Fig-1: Workflow of FUSE</span></span></p>

<p>Fig-1 is the workflow of FUSE fetched from the homepage of the FUSE project. The remaining in this section will try to explain the process.</p>

<ol>
<li>Just like EXT4, EXT3, the hello file system much be mounted before it can be used. The command <code>./hello /tmp/fuse</code> will mount it. It should be noted that this <code>hello</code> command will not only mount the hello FS, but also <strong>running as a daemon</strong> in the background. This is very important to understand the whole work process. Now you can verify whether the fs is mounted or not by issuing <code>mount</code> in the command line. </li>
<li>Users  issue the command <code>ls -l /tmp/fuse</code> </li>
<li>The <code>ls</code> program will call functions lived in glibc </li>
<li> The glibc fucntions called in step 2 will send the requests to the kernel&#39;s VFS subsystem with sys calls. </li>
<li>The VFS sub system will call FUSE module lived in the kernel like it does when dealing with other file systems such as NFS, EXT4. Util now, the workflow is the same with any other FS.</li>
<li>Unlike other FSes, the FUSE module in kernel will now call the the hello daemon created in Step 1.</li>
<li>The hello daemon then sends the result back to the FUSE kernel module</li>
<li>The rest work is the same with other FSes. The result will be passed in the path: FUSE kernel module -&gt; VFS -&gt; glibc -&gt; ls command</li>
</ol>

<p>With the explanation above, you should understand the overall process. So the FUSE is actually a framework which lives in the kernel space like other file systems. A FUSE file system must be built under that framework.</p>

<p>Next let&#39;s look more deeper. The GDB will be leveraged to track the detail of function calls in next section. BTW, I have not figured out how the FUSE kernel module communicates with the hello daemon living in the user space yet.</p>

<h2>Use GDB with FUSE</h2>

<p>Since the hello daemon runs in the user space, we can attach it to the GDB like other user space applications. But before that we should make some extra preparations.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gcc -Wall -g hello.c <span class="sb">`</span>pkg-config fuse --cflags --libs<span class="sb">`</span> -o hello <span class="c"># Compile with debug symbols flag</span>
</span><span class='line'>./hello /tmp/fuse -s <span class="c"># Run the daemon in single thread mode</span>
</span><span class='line'>ps -ef | grep hello <span class="c"># Search the pid of the hello daemon</span>
</span></code></pre></td></tr></table></div></figure>

<p>Now it is ready to enter the gdb by issue <code>gdb64</code> in the command line. Attach the process to the gdb by <code>attach PID_OF_THE_HELLO_DAMONE</code>. Since we want to track which functions are called when the command <code>ls -l /tmp/fuse</code> is issued, we should set breakpoints for the 4 functions, namely <code>hello_open, hello_getattr, hello_readdir, hello_read</code> with following gdb commands.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break </span>hello_getattr
</span><span class='line'>Breakpoint 1 at 0x40076d: file hello.c, line 24.
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break </span>hello_readdir
</span><span class='line'>Breakpoint 2 at 0x40082d: file hello.c, line 46.
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break </span>hello_open
</span><span class='line'>Breakpoint 3 at 0x4008b1: file hello.c, line 58.
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break </span>hello_read
</span><span class='line'>Breakpoint 4 at 0x400909: file hello.c, line 72.
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="k">continue</span>
</span><span class='line'>Continuing.
</span></code></pre></td></tr></table></div></figure>

<p>Now the gdb should be in listen on the daemon. When a break point is hit, it will stop the daemon process immediately. Let&#39;s open a new shell windows and issue the command <code>ls -l /tmp/fuse</code>. <strong>DO NOT use tab-complete feature when entering the command</strong>. Or the behavior it will be a little confusing though it could be still reasoning. Let&#39;s check the first break point.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="k">continue</span>
</span><span class='line'>Continuing.
</span><span class='line'>
</span><span class='line'>Breakpoint 1, hello_getattr <span class="o">(</span><span class="nv">path</span><span class="o">=</span>0x6d5100 <span class="s2">&quot;/&quot;</span>, <span class="nv">stbuf</span><span class="o">=</span>0x7fff92c71080<span class="o">)</span> at hello.c:24
</span><span class='line'>24        int <span class="nv">res</span> <span class="o">=</span> 0;
</span></code></pre></td></tr></table></div></figure>

<p>From the output, we can see that the command will first get the attributes of the  hello file system&#39;s root director, namely <code>/tmp/fuse</code> mount point. Enter <code>continue</code> to resume the daemon process.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Breakpoint 2, hello_readdir <span class="o">(</span><span class="nv">path</span><span class="o">=</span>0x6f5940 <span class="s2">&quot;/&quot;</span>, <span class="nv">buf</span><span class="o">=</span>0x6d5100, <span class="nv">filler</span><span class="o">=</span>0x7f27f8e8e220, <span class="nv">offset</span><span class="o">=</span>0, <span class="k">fi</span><span class="o">=</span>0x7fff92c710e0<span class="o">)</span> at hello.c:46
</span><span class='line'>46        <span class="k">if</span> <span class="o">(</span>strcmp<span class="o">(</span>path, <span class="s2">&quot;/&quot;</span><span class="o">)</span> !<span class="o">=</span> 0<span class="o">)</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="k">continue</span>
</span><span class='line'>Continuing.
</span><span class='line'>
</span><span class='line'>Breakpoint 1, hello_getattr <span class="o">(</span><span class="nv">path</span><span class="o">=</span>0x6f5940 <span class="s2">&quot;/hello&quot;</span>, <span class="nv">stbuf</span><span class="o">=</span>0x7fff92c710b0<span class="o">)</span> at hello.c:24
</span><span class='line'>24        int <span class="nv">res</span> <span class="o">=</span> 0;
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="k">continue</span>
</span><span class='line'>Continuing.
</span></code></pre></td></tr></table></div></figure>

<p>When can see all the rest function calls for the <code>ls</code> command from the above output which is quite self-explanatory. You can also use similar way to track the function calls when the command <code>cat /tmp/fuse/hello</code> is issued. </p>

<p>Hope this posts helps you understand how FUSE works!</p>

<h2>Trouble Shooting</h2>

<ul>
<li>Fail to attach the daemon process in GDB. The error looks like this:</li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>gdb<span class="o">)</span> attach 13387
</span><span class='line'>Attaching to process 13387
</span><span class='line'><span class="s2">&quot;/home/jeff/workspace/fuse/hello&quot;</span>: not in executable format: File format not recognized
</span></code></pre></td></tr></table></div></figure>

<p>This is because the hello executable file is a 64 bit binary but the gdb is 32 bit. Use the 64-bit GDB <code>gdb64</code>.</p>

<ul>
<li>Fail to link the executable file with error:</li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/tmp/ccIMWTZv.o: In <span class="k">function</span> <span class="sb">`</span>main<span class="s1">&#39;:</span>
</span><span class='line'><span class="s1">hello.c:(.text+0x268): undefined reference to `fuse_main_real&#39;</span>
</span><span class='line'>collect2: error: ld returned 1 <span class="nb">exit </span>status
</span></code></pre></td></tr></table></div></figure>

<p>This is a silly problem. Make sure you use the the correct command</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gcc -Wall hello.c <span class="sb">`</span>pkg-config fuse --cflags --libs<span class="sb">`</span> -o hello <span class="c"># work</span>
</span><span class='line'>gcc -Wall <span class="sb">`</span>pkg-config fuse --cflags --libs<span class="sb">`</span> hello.c -o hello <span class="c"># can&#39;t work</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Further Read</h2>

<ol>
<li><a href="http://osxfuse.github.io/">FUSE for OS X</a> : FUSE like framework in Mac OS X</li>
<li><a href="http://www.3c2controller.net/project/truetrue/solaris10/fuse/fuse-opensolaris.pdf">Fuse on Solaris</a>: Fuse on OpenSolaris</li>
<li><a href="opendedup.org">Opendedup</a>: A deduplication solution built with FUSE</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avro Cookbook : Part III]]></title>
    <link href="http://bluesalt.github.io/blog/2014/04/08/avro-cookbook-part-iii/"/>
    <updated>2014-04-08T17:24:45+08:00</updated>
    <id>http://bluesalt.github.io/blog/2014/04/08/avro-cookbook-part-iii</id>
    <content type="html"><![CDATA[<h2>Recipe 6: Serialize data as JSON data</h2>

<p>In <a href="http://jeffli.me/blog/2014/02/06/avro-cookbook-part-i/">Avro Cookbook : part I</a>, if you open the file <code>/tmp/log</code> created by recipe 3, you would find that it is definitely not a human readable text format. Avro provides the encoder/decoder mechanism which helps to serial the data to text format as JSON data. Actually, if I want to serial the POJOs to JSON data, I would rather use <a href="https://code.google.com/p/google-gson/">Google Gson</a>. Anyway, this is a post about Avro, right ?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSerializeToJson</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">ByteArrayOutputStream</span> <span class="n">outputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>   <span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="n">ReflectData</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getSchema</span><span class="o">(</span><span class="n">LogEntry3</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Encoder</span> <span class="n">encoder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EncoderFactory</span><span class="o">().</span><span class="na">jsonEncoder</span><span class="o">(</span><span class="n">schema</span><span class="o">,</span> <span class="n">outputStream</span><span class="o">);</span>
</span><span class='line'>   <span class="n">DatumWriter</span><span class="o">&lt;</span><span class="n">LogEntry3</span><span class="o">&gt;</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReflectDatumWriter</span><span class="o">&lt;&gt;(</span><span class="n">schema</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">LogEntry3</span> <span class="n">entry1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LogEntry3</span><span class="o">(</span><span class="s">&quot;Jeff&quot;</span><span class="o">,</span> <span class="s">&quot;readme.md&quot;</span><span class="o">,</span> <span class="s">&quot;192.168.4.1&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="n">LogEntry3</span> <span class="n">entry2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LogEntry3</span><span class="o">(</span><span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="s">&quot;readme.txt&quot;</span><span class="o">,</span> <span class="s">&quot;192.168.4.2&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">entry1</span><span class="o">,</span> <span class="n">encoder</span><span class="o">);</span>
</span><span class='line'>   <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">entry2</span><span class="o">,</span> <span class="n">encoder</span><span class="o">);</span>
</span><span class='line'>   <span class="n">encoder</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">outputStream</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">()));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Refer to the <a href="http://localhost:4000/blog/2014/04/05/avro-cookbook-part-ii/">Avro Cookbook : Part II</a> for the what class <code>LogEntry3</code> looks like. Here is the output:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;Jeff&quot;</span><span class="p">,</span><span class="nt">&quot;resource&quot;</span><span class="p">:</span><span class="s2">&quot;readme.md&quot;</span><span class="p">,</span><span class="nt">&quot;ip&quot;</span><span class="p">:</span><span class="s2">&quot;192.168.4.1&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;John&quot;</span><span class="p">,</span><span class="nt">&quot;resource&quot;</span><span class="p">:</span><span class="s2">&quot;readme.txt&quot;</span><span class="p">,</span><span class="nt">&quot;ip&quot;</span><span class="p">:</span><span class="s2">&quot;192.168.4.2&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Recipe 7: Deserialize JSON data</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDeserializeFromJson</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">String</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;{\&quot;name\&quot;:\&quot;Jeff\&quot;,\&quot;resource\&quot;:\&quot;readme.md\&quot;,\&quot;ip\&quot;:\&quot;192.168.4.1\&quot;}&quot;</span> <span class="o">+</span>
</span><span class='line'>           <span class="s">&quot;{\&quot;name\&quot;:\&quot;John\&quot;,\&quot;resource\&quot;:\&quot;readme.txt\&quot;,\&quot;ip\&quot;:\&quot;192.168.4.2\&quot;}&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ByteArrayInputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayInputStream</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'>   <span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="n">ReflectData</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getSchema</span><span class="o">(</span><span class="n">LogEntry3</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">JsonDecoder</span> <span class="n">decoder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DecoderFactory</span><span class="o">().</span><span class="na">jsonDecoder</span><span class="o">(</span><span class="n">schema</span><span class="o">,</span> <span class="n">inputStream</span><span class="o">);</span>
</span><span class='line'>   <span class="n">DatumReader</span><span class="o">&lt;</span><span class="n">GenericRecord</span><span class="o">&gt;</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericDatumReader</span><span class="o">&lt;&gt;(</span><span class="n">schema</span><span class="o">);</span>
</span><span class='line'>   <span class="n">GenericRecord</span> <span class="n">entry</span><span class="o">;</span>
</span><span class='line'>   <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">entry</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">decoder</span><span class="o">);</span>
</span><span class='line'>         <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">entry</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">EOFException</span> <span class="n">exception</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>If you look at the code carefully, you will find several interesting things. </p>

<p>First, there is no explicit separator between every JSON record. That means the Avro JSON decoder can decode the JSON data in the form of <strong>stream</strong>. This could be very helpful when you have to deserialize a whole bunch of JSON records without any explicit separator between records.</p>

<p>Second, when parsing the JSON data, the generic reader <code>DatumReader&lt;GenericRecord&gt;</code> instead of specific reader <code>DatumReader&lt;LogEntry3&gt;</code> is used. I tried to use the specific reader but it was not able to work with the error:
<pre>
org.apache.avro.AvroTypeException: Expected start-union. Got VALUE_STRING
    at org.apache.avro.io.JsonDecoder.error(JsonDecoder.java:697)
    at org.apache.avro.io.JsonDecoder.readIndex(JsonDecoder.java:441)
    at org.apache.avro.io.ResolvingDecoder.doAction(ResolvingDecoder.java:229)
    at org.apache.avro.io.parsing.Parser.advance(Parser.java:88)
    at org.apache.avro.io.ResolvingDecoder.readIndex(ResolvingDecoder.java:206)
    at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:155)
    at org.apache.avro.generic.GenericDatumReader.readField(GenericDatumReader.java:193)
    at org.apache.avro.reflect.ReflectDatumReader.readField(ReflectDatumReader.java:230)
    at org.apache.avro.generic.GenericDatumReader.readRecord(GenericDatumReader.java:183)
    at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:151)
    at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:142)
</pre>
It turned out that the Avro JSON decoder can only parse JSON data like this
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;Jeff&quot;</span><span class="p">,</span><span class="nt">&quot;resource&quot;</span><span class="p">:{</span><span class="nt">&quot;string&quot;</span><span class="p">:</span><span class="s2">&quot;readme.md&quot;</span><span class="p">},</span><span class="nt">&quot;ip&quot;</span><span class="p">:{</span><span class="nt">&quot;string&quot;</span><span class="p">:</span><span class="s2">&quot;192.168.4.1&quot;</span><span class="p">}}</span>
</span><span class='line'><span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;John&quot;</span><span class="p">,</span><span class="nt">&quot;resource&quot;</span><span class="p">:{</span><span class="nt">&quot;string&quot;</span><span class="p">:</span><span class="s2">&quot;readme.txt&quot;</span><span class="p">},</span><span class="nt">&quot;ip&quot;</span><span class="p">:{</span><span class="nt">&quot;string&quot;</span><span class="p">:</span><span class="s2">&quot;192.168.4.2&quot;</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>
but will not work on data like this
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Jeff&quot;</span><span class="p">,</span> <span class="nt">&quot;resource&quot;</span><span class="p">:</span> <span class="s2">&quot;readme.md&quot;</span><span class="p">,</span> <span class="nt">&quot;ip&quot;</span><span class="p">:</span> <span class="s2">&quot;192.168.4.1&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;John&quot;</span><span class="p">,</span> <span class="nt">&quot;resource&quot;</span><span class="p">:</span> <span class="s2">&quot;readme.txt&quot;</span><span class="p">,</span> <span class="nt">&quot;ip&quot;</span><span class="p">:</span> <span class="s2">&quot;192.168.4.2&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
After googling the issue, I found this: <a href="http://grokbase.com/t/avro/user/1345c5t7h1/issue-writing-union-in-avro">Issue writing union in avro</a>. So my suggestion is that don&#39;t use Avro for json serialization and deserialization if you have other choices. </p>

<h2>Recipe 8: Serialize array in JSON</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSerializeArray</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="n">Schema</span><span class="o">.</span><span class="na">createArray</span><span class="o">(</span><span class="n">ReflectData</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getSchema</span><span class="o">(</span><span class="n">LogEntry3</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>   <span class="n">GenericData</span><span class="o">.</span><span class="na">Array</span><span class="o">&lt;</span><span class="n">LogEntry3</span><span class="o">&gt;</span> <span class="n">logs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericData</span><span class="o">.</span><span class="na">Array</span><span class="o">&lt;&gt;(</span><span class="mi">2</span><span class="o">,</span> <span class="n">schema</span><span class="o">);</span>
</span><span class='line'>   <span class="n">logs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">LogEntry3</span><span class="o">(</span><span class="s">&quot;Jeff&quot;</span><span class="o">,</span> <span class="s">&quot;readme.md&quot;</span><span class="o">,</span> <span class="s">&quot;192.168.5.1&quot;</span><span class="o">));</span>
</span><span class='line'>   <span class="n">logs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">LogEntry3</span><span class="o">(</span><span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="s">&quot;readme.txt&quot;</span><span class="o">,</span> <span class="s">&quot;192.168.5.2&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ByteArrayOutputStream</span> <span class="n">outputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>   <span class="n">Encoder</span> <span class="n">encoder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EncoderFactory</span><span class="o">().</span><span class="na">jsonEncoder</span><span class="o">(</span><span class="n">schema</span><span class="o">,</span> <span class="n">outputStream</span><span class="o">);</span>
</span><span class='line'>   <span class="n">DatumWriter</span><span class="o">&lt;</span><span class="n">GenericData</span><span class="o">.</span><span class="na">Array</span><span class="o">&lt;</span><span class="n">LogEntry3</span><span class="o">&gt;&gt;</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReflectDatumWriter</span><span class="o">&lt;&gt;(</span><span class="n">schema</span><span class="o">);</span>
</span><span class='line'>   <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">logs</span><span class="o">,</span> <span class="n">encoder</span><span class="o">);</span>
</span><span class='line'>   <span class="n">encoder</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">outputStream</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">()));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure> 

<p>In the code above, not code generation is required, the <code>LogEntry3</code> is just a normal Java class. The serialized data would be
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;Jeff&quot;</span><span class="p">,</span><span class="nt">&quot;resource&quot;</span><span class="p">:</span><span class="s2">&quot;readme.md&quot;</span><span class="p">,</span><span class="nt">&quot;ip&quot;</span><span class="p">:</span><span class="s2">&quot;192.168.5.1&quot;</span><span class="p">},{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;John&quot;</span><span class="p">,</span><span class="nt">&quot;resource&quot;</span><span class="p">:</span><span class="s2">&quot;readme.txt&quot;</span><span class="p">,</span><span class="nt">&quot;ip&quot;</span><span class="p">:</span><span class="s2">&quot;192.168.5.2&quot;</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>
However, if the type of element of the array is generated from schema defintion(See <a href="http://localhost:4000/blog/2014/02/06/avro-cookbook-part-i/">Recipe 2</a>), the output would be different:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;Jeff&quot;</span><span class="p">,</span><span class="nt">&quot;resource&quot;</span><span class="p">:{</span><span class="nt">&quot;string&quot;</span><span class="p">:</span><span class="s2">&quot;readme.md&quot;</span><span class="p">},</span><span class="nt">&quot;ip&quot;</span><span class="p">:{</span><span class="nt">&quot;string&quot;</span><span class="p">:</span><span class="s2">&quot;192.168.5.1&quot;</span><span class="p">}},{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;John&quot;</span><span class="p">,</span><span class="nt">&quot;resource&quot;</span><span class="p">:{</span><span class="nt">&quot;string&quot;</span><span class="p">:</span><span class="s2">&quot;readme.txt&quot;</span><span class="p">},</span><span class="nt">&quot;ip&quot;</span><span class="p">:{</span><span class="nt">&quot;string&quot;</span><span class="p">:</span><span class="s2">&quot;192.168.5.2&quot;</span><span class="p">}}]</span>
</span></code></pre></td></tr></table></div></figure>
Still, I will not choose Avro to serialize data to JSON if I can use gson. However, this recipe is intended to demonstrate how to serialize a array without code generation from predefined schema. </p>

<h2>Recipe 9: Deserialize JSON array data</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDeserializeArray</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="n">Schema</span><span class="o">.</span><span class="na">createArray</span><span class="o">(</span><span class="n">ReflectData</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getSchema</span><span class="o">(</span><span class="n">LogEntry3</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>   <span class="n">String</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;[{\&quot;name\&quot;:\&quot;Jeff\&quot;,\&quot;resource\&quot;:\&quot;readme.md\&quot;,\&quot;ip\&quot;:\&quot;192.168.5.1\&quot;},{\&quot;name\&quot;:\&quot;John\&quot;,\&quot;resource\&quot;:\&quot;readme.txt\&quot;,\&quot;ip\&quot;:\&quot;192.168.5.2\&quot;}]&quot;</span><span class="o">;</span>
</span><span class='line'>   <span class="n">Decoder</span> <span class="n">decoder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DecoderFactory</span><span class="o">().</span><span class="na">jsonDecoder</span><span class="o">(</span><span class="n">schema</span><span class="o">,</span> <span class="n">input</span><span class="o">);</span>
</span><span class='line'>   <span class="n">DatumReader</span><span class="o">&lt;</span><span class="n">GenericData</span><span class="o">.</span><span class="na">Array</span><span class="o">&lt;</span><span class="n">GenericData</span><span class="o">.</span><span class="na">Record</span><span class="o">&gt;&gt;</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericDatumReader</span><span class="o">&lt;&gt;(</span><span class="n">schema</span><span class="o">);</span>
</span><span class='line'>   <span class="n">GenericData</span><span class="o">.</span><span class="na">Array</span><span class="o">&lt;</span><span class="n">GenericData</span><span class="o">.</span><span class="na">Record</span><span class="o">&gt;</span> <span class="n">logs</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">decoder</span><span class="o">);</span>
</span><span class='line'>   <span class="n">GenericData</span><span class="o">.</span><span class="na">Record</span> <span class="n">entry</span> <span class="o">=</span> <span class="n">logs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">entry</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Note, we can use only generic reader, have not figured out how to use a specific reader yet. Maybe it would be ok for the binary encoder to use specific reader.</p>

<h2>Recipe 10: Deserialize data stream</h2>

<p>The word <strong>stream</strong> means that the size of the source data is unknown. For example. if you want to serialize data like this
<pre>
[
   {
      &quot;name&quot;:&quot;Jeff&quot;,
      &quot;resource&quot;:&quot;readme.md&quot;,
      &quot;ip&quot;:&quot;192.168.5.1&quot;
   },
   {
      &quot;name&quot;:&quot;John&quot;,
      &quot;resource&quot;:&quot;readme.txt&quot;,
      &quot;ip&quot;:&quot;192.168.5.2&quot;
   }
][
   {
      &quot;name&quot;:&quot;Joe&quot;,
      &quot;resource&quot;:&quot;readme.md&quot;,
      &quot;ip&quot;:&quot;192.168.5.3&quot;
   },
   {
      &quot;name&quot;:&quot;James&quot;,
      &quot;resource&quot;:&quot;readme.txt&quot;,
      &quot;ip&quot;:&quot;192.168.5.4&quot;
   }
]
</pre>
The data have several unusual characteristics due to which gson can not be simply applied. 
 * The whole data is not a valid JSON. Instead it is JSON records set. Besides, the size of data could be very large.
 * There is no explicit separator between records. If the records are separated by character such as <code>\n</code>, then one record can be read and parsed easily. </p>

<p>The format of the data is so poor which should be avoided in practice. However, sometimes, we ourselves are just the data consumers. We can parse the data with Avro like this:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDeserializeStream</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="n">Schema</span><span class="o">.</span><span class="na">createArray</span><span class="o">(</span><span class="n">ReflectData</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getSchema</span><span class="o">(</span><span class="n">LogEntry3</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>   <span class="n">String</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;[{&quot;</span><span class="n">name</span><span class="s">&quot;:&quot;</span><span class="n">Jeff</span><span class="s">&quot;,&quot;</span><span class="n">resource</span><span class="s">&quot;:&quot;</span><span class="n">readme</span><span class="o">.</span><span class="na">md</span><span class="s">&quot;,&quot;</span><span class="n">ip</span><span class="s">&quot;:&quot;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">5.1</span><span class="s">&quot;},{&quot;</span><span class="n">name</span><span class="s">&quot;:&quot;</span><span class="n">John</span><span class="s">&quot;,&quot;</span><span class="n">resource</span><span class="s">&quot;:&quot;</span><span class="n">readme</span><span class="o">.</span><span class="na">txt</span><span class="s">&quot;,&quot;</span><span class="n">ip</span><span class="s">&quot;:&quot;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">5.2</span><span class="s">&quot;}][{&quot;</span><span class="n">name</span><span class="s">&quot;:&quot;</span><span class="n">Joe</span><span class="s">&quot;,&quot;</span><span class="n">resource</span><span class="s">&quot;:&quot;</span><span class="n">readme</span><span class="o">.</span><span class="na">md</span><span class="s">&quot;,&quot;</span><span class="n">ip</span><span class="s">&quot;:&quot;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">5.3</span><span class="s">&quot;},{&quot;</span><span class="n">name</span><span class="s">&quot;:&quot;</span><span class="n">James</span><span class="s">&quot;,&quot;</span><span class="n">resource</span><span class="s">&quot;:&quot;</span><span class="n">readme</span><span class="o">.</span><span class="na">txt</span><span class="s">&quot;,&quot;</span><span class="n">ip</span><span class="s">&quot;:&quot;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">5.4</span><span class="s">&quot;}]</span>
</span><span class='line'><span class="s">&quot;</span><span class="o">;</span>
</span><span class='line'>   <span class="n">Decoder</span> <span class="n">decoder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DecoderFactory</span><span class="o">().</span><span class="na">jsonDecoder</span><span class="o">(</span><span class="n">schema</span><span class="o">,</span> <span class="n">input</span><span class="o">);</span>
</span><span class='line'>   <span class="n">DatumReader</span><span class="o">&lt;</span><span class="n">GenericData</span><span class="o">.</span><span class="na">Array</span><span class="o">&lt;</span><span class="n">LogEntry3</span><span class="o">&gt;&gt;</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericDatumReader</span><span class="o">&lt;&gt;(</span><span class="n">schema</span><span class="o">);</span>
</span><span class='line'>   <span class="n">GenericData</span><span class="o">.</span><span class="na">Array</span><span class="o">&lt;</span><span class="n">LogEntry3</span><span class="o">&gt;</span> <span class="n">parsedRecords</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>   <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>         <span class="c1">// We can iterate the parsedRecords to get every individual record</span>
</span><span class='line'>         <span class="n">parsedRecords</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">decoder</span><span class="o">);</span>
</span><span class='line'>         <span class="n">count</span> <span class="o">+=</span> <span class="n">parsedRecords</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">EOFException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="n">count</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Summary</h2>

<p>This post is the last part of the three part series on Avro. To be honest, I myself use Avro rarely and I am not a Avro expert, thus the code examples may not be the most appropriate. They are just intended to help the starters to play with Avro quickly. Anyone who uses Avro frequently should spend more time on looking deeper into the Avro framework. It would be great if they are helpful to you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avro Cookbook : Part II]]></title>
    <link href="http://bluesalt.github.io/blog/2014/04/05/avro-cookbook-part-ii/"/>
    <updated>2014-04-05T18:31:35+08:00</updated>
    <id>http://bluesalt.github.io/blog/2014/04/05/avro-cookbook-part-ii</id>
    <content type="html"><![CDATA[<h2>Recipe 5: Serialize data without Code Generation</h2>

<p>In formal recipes, before using Avro to serialize/deserialize data, schema files have to be defined to be leveraged by Avro code generation facility to generate the Java classes. This is also recommended when using Avro in Java. However, it is not required. Actually, you can parse the schema on the fly without code generation.</p>

<h3>Parse Schema from String</h3>

<p>The schema looks like this:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="nt">&quot;namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;me.jeffli.avrosamples.model&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;record&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;LogEntry2&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="nt">&quot;fields&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>     <span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;resource&quot;</span><span class="p">,</span>  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="s2">&quot;null&quot;</span><span class="p">]},</span>
</span><span class='line'>     <span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;ip&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="s2">&quot;null&quot;</span><span class="p">]}</span>
</span><span class='line'> <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
Define the schema as a Java String:
<pre>
String schemaDesc = &quot;{\n&quot; +
           &quot; \&quot;namespace\&quot;: \&quot;me.jeffli.avrosamples.model\&quot;,\n&quot; +
           &quot; \&quot;type\&quot;: \&quot;record\&quot;,\n&quot; +
           &quot; \&quot;name\&quot;: \&quot;LogEntry2\&quot;,\n&quot; +
           &quot; \&quot;fields\&quot;: [\n&quot; +
           &quot;     {\&quot;name\&quot;: \&quot;name\&quot;, \&quot;type\&quot;: \&quot;string\&quot;},\n&quot; +
           &quot;     {\&quot;name\&quot;: \&quot;resource\&quot;,  \&quot;type\&quot;: [\&quot;string\&quot;, \&quot;null\&quot;]},\n&quot; +
           &quot;     {\&quot;name\&quot;: \&quot;ip\&quot;, \&quot;type\&quot;: [\&quot;string\&quot;, \&quot;null\&quot;]}\n&quot; +
           &quot; ]\n&quot; +
           &quot;}&quot;;
</pre></p>

<p>Then the code to serialize the data would be this:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSerializeOnTheFly</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Schema</span><span class="o">.</span><span class="na">Parser</span><span class="o">().</span><span class="na">parse</span><span class="o">(</span><span class="n">schemaDesc</span><span class="o">);</span>
</span><span class='line'>   <span class="n">GenericRecord</span> <span class="n">entry1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericData</span><span class="o">.</span><span class="na">Record</span><span class="o">(</span><span class="n">schema</span><span class="o">);</span>
</span><span class='line'>   <span class="n">entry1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;Jeffrey&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="n">entry1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;resource&quot;</span><span class="o">,</span> <span class="s">&quot;README&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="n">entry1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;ip&quot;</span><span class="o">,</span> <span class="s">&quot;192.168.2.1&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">GenericRecord</span> <span class="n">entry2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericData</span><span class="o">.</span><span class="na">Record</span><span class="o">(</span><span class="n">schema</span><span class="o">);</span>
</span><span class='line'>   <span class="n">entry2</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;Johnson&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="n">entry2</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;resource&quot;</span><span class="o">,</span> <span class="s">&quot;readme.markdown&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="n">entry2</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;ip&quot;</span><span class="o">,</span> <span class="s">&quot;192.168.2.2&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">DatumWriter</span><span class="o">&lt;</span><span class="n">GenericRecord</span><span class="o">&gt;</span> <span class="n">datumWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericDatumWriter</span><span class="o">&lt;&gt;(</span><span class="n">schema</span><span class="o">);</span>
</span><span class='line'>   <span class="n">DataFileWriter</span><span class="o">&lt;</span><span class="n">GenericRecord</span><span class="o">&gt;</span> <span class="n">dataFileWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataFileWriter</span><span class="o">&lt;&gt;(</span><span class="n">datumWriter</span><span class="o">);</span>
</span><span class='line'>   <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/tmp/log2&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="n">dataFileWriter</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">schema</span><span class="o">,</span> <span class="n">file</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">dataFileWriter</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">entry1</span><span class="o">);</span>
</span><span class='line'>   <span class="n">dataFileWriter</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">entry2</span><span class="o">);</span>
</span><span class='line'>   <span class="n">dataFileWriter</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
From the example, we can see that we don&#39;t need to define any external schema file and no external Java classed are generated.</p>

<h3>Parse Schema from Disk File</h3>

<p>In the above example, we parse the schema from String. Since the schema is defined with JSON language, it is cumbersome to define the schema as a Java String. Fortunately Avro Schema.Paser also provides other API to parse the schema from disk file or existing Java class :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Schema</span><span class="o">.</span><span class="na">Parser</span><span class="o">().</span><span class="na">parse</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;src/test/resources/LogEntry2.avsc&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Parse Schema from Existing Java Class</h3>

<p>Per the JSON Schema definition, a equivalent Java class would look like this:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogEntry3</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>   <span class="kd">private</span> <span class="n">String</span> <span class="n">resource</span><span class="o">;</span>
</span><span class='line'>   <span class="kd">private</span> <span class="n">String</span> <span class="n">ip</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="nf">LogEntry3</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">resource</span><span class="o">,</span> <span class="n">String</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">resource</span> <span class="o">=</span> <span class="n">resource</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">ip</span> <span class="o">=</span> <span class="n">ip</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="n">String</span> <span class="nf">getResource</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">resource</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setResource</span><span class="o">(</span><span class="n">String</span> <span class="n">resource</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">resource</span> <span class="o">=</span> <span class="n">resource</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="n">String</span> <span class="nf">getIp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ip</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setIp</span><span class="o">(</span><span class="n">String</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">ip</span> <span class="o">=</span> <span class="n">ip</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Then the Schema can be fetched easily:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="n">ReflectData</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getSchema</span><span class="o">(</span><span class="n">LogEntry3</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>
What is more, you can use ReflectDatumWriter to append specific type objects to the target:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSerializeData</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="n">ReflectData</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getSchema</span><span class="o">(</span><span class="n">LogEntry3</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>   <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/tmp/log3&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="n">LogEntry3</span> <span class="n">entry1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LogEntry3</span><span class="o">(</span><span class="s">&quot;Jeff&quot;</span><span class="o">,</span> <span class="s">&quot;readme.txt&quot;</span><span class="o">,</span> <span class="s">&quot;192.168.3.1&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="n">LogEntry3</span> <span class="n">entry2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LogEntry3</span><span class="o">(</span><span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="s">&quot;readme.md&quot;</span><span class="o">,</span> <span class="s">&quot;192.168.3.2&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ReflectDatumWriter</span><span class="o">&lt;</span><span class="n">LogEntry3</span><span class="o">&gt;</span> <span class="n">reflectDatumWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReflectDatumWriter</span><span class="o">&lt;&gt;(</span><span class="n">schema</span><span class="o">);</span>
</span><span class='line'>   <span class="n">DataFileWriter</span><span class="o">&lt;</span><span class="n">LogEntry3</span><span class="o">&gt;</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataFileWriter</span><span class="o">&lt;&gt;(</span><span class="n">reflectDatumWriter</span><span class="o">).</span><span class="na">create</span><span class="o">(</span><span class="n">schema</span><span class="o">,</span> <span class="n">file</span><span class="o">);</span>
</span><span class='line'>   <span class="n">writer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">entry1</span><span class="o">);</span>
</span><span class='line'>   <span class="n">writer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">entry2</span><span class="o">);</span>
</span><span class='line'>   <span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Recipe 6: Deserialize data without Code Generation</h2>

<p>Deserializing data without code generation is pretty easy. The only difference with Recipe 4 is how it get the <strong>schema</strong>. Thus the ways to fetch schemas in Recipe 5 are also applicable in this recipe. Here is only the example to load schema from disk file. I am pretty sure that you can finish the rest code. It should be noted that if the schema is parsed on the fly without any code generation, then when deserializing the data, you can only use the generic datum reader even if you attempt with <strong>ReflectDatumReader</strong>. </p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span><span class="o">(</span><span class="n">dependsOnMethods</span> <span class="o">=</span> <span class="s">&quot;testSerializeOnTheFly&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDeserializeOnTheFly</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Schema</span><span class="o">.</span><span class="na">Parser</span><span class="o">().</span><span class="na">parse</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;src/test/resources/LogEntry2.avsc&quot;</span><span class="o">));</span>
</span><span class='line'>   <span class="n">DatumReader</span><span class="o">&lt;</span><span class="n">GenericRecord</span><span class="o">&gt;</span> <span class="n">datumReader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericDatumReader</span><span class="o">&lt;&gt;(</span><span class="n">schema</span><span class="o">);</span>
</span><span class='line'>   <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/tmp/log2&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="n">DataFileReader</span><span class="o">&lt;</span><span class="n">GenericRecord</span><span class="o">&gt;</span> <span class="n">dataFileReader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataFileReader</span><span class="o">&lt;&gt;(</span><span class="n">file</span><span class="o">,</span> <span class="n">datumReader</span><span class="o">);</span>
</span><span class='line'>   <span class="n">GenericRecord</span> <span class="n">entry</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>   <span class="k">while</span> <span class="o">(</span><span class="n">dataFileReader</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">entry</span> <span class="o">=</span> <span class="n">dataFileReader</span><span class="o">.</span><span class="na">next</span><span class="o">(</span><span class="n">entry</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">entry</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avro Cookbook : Part I]]></title>
    <link href="http://bluesalt.github.io/blog/2014/02/06/avro-cookbook-part-i/"/>
    <updated>2014-02-06T15:49:00+08:00</updated>
    <id>http://bluesalt.github.io/blog/2014/02/06/avro-cookbook-part-i</id>
    <content type="html"><![CDATA[<p>Avro is a data serialization framework. It is an Apache project led by Doug Cutting who is also the author of several other open source projects such as Hadoop, Lucene. Recently I need to leverage Avro to serialize/deserialize some data, however, I found its document is too poor, at least too poor for newbies like me who don&#39;t have much experience on data exchange format frameworks. </p>

<p>In fact, it is very easy to understand what Avro can do. It helps to convert Java objects into bytes and vice versa. The key information the framework needs to know is the format of the date, namely &#39;Schema&#39; in Avro. In this article, I won&#39;t spend any time on explaining what Avro is. </p>

<h2>Recipe 1: Create a Maven Avro Project</h2>

<p>Intellij IDEA is my favorite Java IDE. The free Community edition has less features than the commercial Ultimate edition, however, great experience may be gained when the free community IDEA works with Maven. They complete each other. So the examples in this article will use Maven and Intellij IDEA as the IDE. Besides, <strong>TestNG</strong> instead of JUnit will be used as the test framework.</p>

<h3>Initialize the project structure</h3>

<ul>
<li>Create an project with quickstart archetype:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn archetype:generate -DgroupId=me.jeffli -DartifactId=avrosamples -Dversion=0.01 -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</span></code></pre></td></tr></table></div></figure></li>
</ul>

<h3>Tweak the pom.xml</h3>

<ul>
<li><p>Add Avro dependency:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>   <span class="nt">&lt;groupId&gt;</span>org.apache.avro<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>   <span class="nt">&lt;artifactId&gt;</span>avro<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>   <span class="nt">&lt;version&gt;</span>1.7.5<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure></p></li>
<li><p>Use Avro Maven plugin
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>   <span class="nt">&lt;groupId&gt;</span>org.apache.avro<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>   <span class="nt">&lt;artifactId&gt;</span>avro-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>   <span class="nt">&lt;version&gt;</span>1.7.5<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>   <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>      <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>         <span class="nt">&lt;phase&gt;</span>generate-sources<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>         <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goal&gt;</span>schema<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>         <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>         <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- make sure the directory is created --&gt;</span>
</span><span class='line'>            <span class="nt">&lt;sourceDirectory&gt;</span>${project.basedir}/src/main/avro/<span class="nt">&lt;/sourceDirectory&gt;</span>
</span><span class='line'>            <span class="nt">&lt;outputDirectory&gt;</span>${project.basedir}/src/main/java/<span class="nt">&lt;/outputDirectory&gt;</span>
</span><span class='line'>         <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure></p></li>
</ul>

<p>It should be noted that the directory <code>${project.basedir}/src/main/avro/</code> must be created even it is empty at first. It is used to place the Avro schema files. The whole pom.xml has been posted to <a href="https://gist.github.com/bluesalt/9807306">github gist</a>.</p>

<h3>Import the project into Intellij IDEA</h3>

<p>IDEA provides full support to Maven, so it is very easy to import the Maven project as a IDEA project. Click &quot;Import Project&quot; in the &#39;Quick Start&#39; panel. I suggest enable the Maven Auto-Import feature of IDEA before completing the importing process.</p>

<h2>Recipe 2: Define a Schema</h2>

<p>Assume that you want to log every access of your server, to make it simple, we only define 3 attributes in a log entry, namely the username, resource and ip. So the schema can be defined as :
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="nt">&quot;namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;me.jeffli.avrosamples.model&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;record&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;LogEntry&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="nt">&quot;fields&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>     <span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;resource&quot;</span><span class="p">,</span>  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="s2">&quot;null&quot;</span><span class="p">]},</span>
</span><span class='line'>     <span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;ip&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="s2">&quot;null&quot;</span><span class="p">]}</span>
</span><span class='line'> <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Save the content as <code>${project.basedir}/src/main/avro/LogEntry.avsc</code>. After running <code>mvn compile</code>, a Java class <code>me.jeffli.avrosamples.model.LogEntry</code> will be generated automatically thank to the Avro Maven plugin.  </p>

<h2>Recipe 3: Serialize the Log Data to Disk File</h2>

<p>Assume we want to store the log data to a disk file <code>/tmp/log</code>. The code snippet would be like this:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSerializeLogEntries</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">LogEntry</span> <span class="n">entry1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LogEntry</span><span class="o">();</span>
</span><span class='line'>   <span class="n">entry1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;Jeff&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="n">entry1</span><span class="o">.</span><span class="na">setResource</span><span class="o">(</span><span class="s">&quot;readme.txt&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="n">entry1</span><span class="o">.</span><span class="na">setIp</span><span class="o">(</span><span class="s">&quot;192.168.1.1&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">LogEntry</span> <span class="n">entry2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LogEntry</span><span class="o">();</span>
</span><span class='line'>   <span class="n">entry2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;John&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="n">entry2</span><span class="o">.</span><span class="na">setResource</span><span class="o">(</span><span class="s">&quot;readme.md&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="n">entry2</span><span class="o">.</span><span class="na">setIp</span><span class="o">(</span><span class="s">&quot;192.168.1.2&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">DatumWriter</span><span class="o">&lt;</span><span class="n">LogEntry</span><span class="o">&gt;</span> <span class="n">logEntryDatumWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpecificDatumWriter</span><span class="o">&lt;&gt;(</span><span class="n">LogEntry</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>   <span class="n">DataFileWriter</span><span class="o">&lt;</span><span class="n">LogEntry</span><span class="o">&gt;</span> <span class="n">dataFileWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataFileWriter</span><span class="o">&lt;&gt;(</span><span class="n">logEntryDatumWriter</span><span class="o">);</span>
</span><span class='line'>   <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/tmp/log&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="n">dataFileWriter</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">entry1</span><span class="o">.</span><span class="na">getSchema</span><span class="o">(),</span> <span class="n">file</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">dataFileWriter</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">entry1</span><span class="o">);</span>
</span><span class='line'>   <span class="n">dataFileWriter</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">entry2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">dataFileWriter</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>  </p>

<h2>Recipe 4: Deserialize the Log Data from Disk File</h2>

<p>Assume you need to parse the log data from disk files <code>/tmp/log</code>. Then the code snippet would be:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span> <span class="o">(</span><span class="n">dependsOnMethods</span> <span class="o">=</span> <span class="s">&quot;testSerializeLogEntries&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDeSerializeLogEntries</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">DatumReader</span><span class="o">&lt;</span><span class="n">LogEntry</span><span class="o">&gt;</span> <span class="n">logEntryDatumReader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpecificDatumReader</span><span class="o">&lt;&gt;(</span><span class="n">LogEntry</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>   <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/tmp/log&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="n">DataFileReader</span><span class="o">&lt;</span><span class="n">LogEntry</span><span class="o">&gt;</span> <span class="n">dataFileReader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataFileReader</span><span class="o">&lt;&gt;(</span><span class="n">file</span><span class="o">,</span> <span class="n">logEntryDatumReader</span><span class="o">);</span>
</span><span class='line'>   <span class="n">LogEntry</span> <span class="n">entry</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>   <span class="k">while</span> <span class="o">(</span><span class="n">dataFileReader</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">entry</span> <span class="o">=</span> <span class="n">dataFileReader</span><span class="o">.</span><span class="na">next</span><span class="o">(</span><span class="n">entry</span><span class="o">);</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">entry</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>   </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jetty-maven-plugin and Https Support]]></title>
    <link href="http://bluesalt.github.io/blog/2013/07/29/jetty-maven-plugin-and-https-support/"/>
    <updated>2013-07-29T22:46:00+08:00</updated>
    <id>http://bluesalt.github.io/blog/2013/07/29/jetty-maven-plugin-and-https-support</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p><code>jetty-maven-plugin</code>(formerly known as <code>maven-jetty-plugin</code>)is a maven plugin which enables the jetty container in maven project. It is very convenient in development environment since you can start the web app by issue only one command <code>mvn jetty:run</code>. By default it only supports http protocol. Additional configuration is necessary if https is required. Roughly we needs:</p>

<ul>
<li>A development certificate</li>
<li>Instruct the jetty plugin to use the certificate</li>
</ul>

<p>Besides <code>jetty-maven-plugin</code>, another maven plugin called <code>keytool-maven-plugin</code> is also needed to generate the certificate.
It should be noted that the plugin has evolved a lot since version 7. The configuration is different from different version. </p>

<h3>V6</h3>

<p>If you are still using the version 6 plugin, please refer to this blog: <a href="http://mrhaki.blogspot.com/2009/05/configure-maven-jetty-plugin-for-ssl.html">Configure Maven Jetty plugin for SSL communication</a>. I tried it in my project, but it is unstable. Sometimes it works and sometimes it fails. So I have to upgrade the plugin to V8.</p>

<h3>V8</h3>

<p>Add following sections to the <plugins> section in your pom.xml file(Pay attention to <code>Line 7 - Line9</code>, <code>Line 41</code>, <code>Line 47</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>   <span class="nt">&lt;groupId&gt;</span>org.mortbay.jetty<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>   <span class="nt">&lt;artifactId&gt;</span>jetty-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>   <span class="nt">&lt;version&gt;</span>8.1.11.v20130520<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>   <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>      <span class="nt">&lt;scanIntervalSeconds&gt;</span>5<span class="nt">&lt;/scanIntervalSeconds&gt;</span>
</span><span class='line'>      <span class="nt">&lt;webApp&gt;</span>
</span><span class='line'>         <span class="nt">&lt;contextPath&gt;</span>/context<span class="nt">&lt;/contextPath&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/webApp&gt;</span>
</span><span class='line'>      <span class="nt">&lt;connectors&gt;</span>
</span><span class='line'>         <span class="nt">&lt;connector</span> <span class="na">implementation=</span><span class="s">&quot;org.eclipse.jetty.server.nio.SelectChannelConnector&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;port&gt;</span>8080<span class="nt">&lt;/port&gt;</span>
</span><span class='line'>            <span class="nt">&lt;maxIdleTime&gt;</span>60000<span class="nt">&lt;/maxIdleTime&gt;</span>
</span><span class='line'>         <span class="nt">&lt;/connector&gt;</span>
</span><span class='line'>         <span class="nt">&lt;connector</span> <span class="na">implementation=</span><span class="s">&quot;org.eclipse.jetty.server.ssl.SslSelectChannelConnector&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;port&gt;</span>8443<span class="nt">&lt;/port&gt;</span>
</span><span class='line'>            <span class="nt">&lt;maxIdleTime&gt;</span>60000<span class="nt">&lt;/maxIdleTime&gt;</span>
</span><span class='line'>            <span class="nt">&lt;keystore&gt;</span>${project.build.directory}/jetty-ssl.keystore<span class="nt">&lt;/keystore&gt;</span>
</span><span class='line'>            <span class="nt">&lt;password&gt;</span>jetty8<span class="nt">&lt;/password&gt;</span>
</span><span class='line'>            <span class="nt">&lt;keyPassword&gt;</span>jetty8<span class="nt">&lt;/keyPassword&gt;</span>
</span><span class='line'>         <span class="nt">&lt;/connector&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/connectors&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>   <span class="nt">&lt;groupId&gt;</span>org.codehaus.mojo<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>   <span class="nt">&lt;artifactId&gt;</span>keytool-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>   <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>      <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>         <span class="nt">&lt;phase&gt;</span>generate-resources<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>         <span class="nt">&lt;id&gt;</span>clean<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>         <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goal&gt;</span>clean<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>         <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>      <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>         <span class="nt">&lt;phase&gt;</span>generate-resources<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>         <span class="nt">&lt;id&gt;</span>genkey<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>         <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goal&gt;</span>generateKeyPair<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>         <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>   <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>      <span class="nt">&lt;keystore&gt;</span>${project.build.directory}/jetty-ssl.keystore<span class="nt">&lt;/keystore&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dname&gt;</span>cn=localhost<span class="nt">&lt;/dname&gt;</span>
</span><span class='line'>      <span class="nt">&lt;keypass&gt;</span>jetty8<span class="nt">&lt;/keypass&gt;</span>
</span><span class='line'>      <span class="nt">&lt;storepass&gt;</span>jetty8<span class="nt">&lt;/storepass&gt;</span>
</span><span class='line'>      <span class="nt">&lt;alias&gt;</span>jetty8<span class="nt">&lt;/alias&gt;</span>
</span><span class='line'>      <span class="nt">&lt;keyalg&gt;</span>RSA<span class="nt">&lt;/keyalg&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Every thing should be ready now. If you are using Postman as your test tool, please navigate to <code>https://loocalhost:8443/context</code> to accept the certificate before you make further tests after running <code>mvn jetty:run</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips About Octopress]]></title>
    <link href="http://bluesalt.github.io/blog/2013/06/17/tips-about-octopress/"/>
    <updated>2013-06-17T07:55:00+08:00</updated>
    <id>http://bluesalt.github.io/blog/2013/06/17/tips-about-octopress</id>
    <content type="html"><![CDATA[<h2>Add Tags and Tag Cloud Support to Octopress</h2>

<p><span class='caption-wrapper left'><img class='caption' src='http://bluesalt.github.io/images/tags.png' width='500' height='250' alt='Fig-1: Tags' title='Fig-1: Tags'><span class='caption-text'>Fig-1: Tags</span></span>
<span class='caption-wrapper right'><img class='caption' src='http://bluesalt.github.io/images/tag-cloud.png' width='250' height='500' alt='Fig-2: Tag Cloud' title='Fig-2: Tag Cloud'><span class='caption-text'>Fig-2: Tag Cloud</span></span></p>

<h4>Basic Usage</h4>

<p>After migrating my blog system from WordPress to Octopress, I have got more fun from blogging. Definitely Octopress is cool, however, no official support for tags and tag cloud makes it looks not so cool. IMO, using tags to organizing your posts is much more better using only categories. Luckily, after googling the topic, I found two plugins: <a href="https://github.com/robbyedwards/octopress-tag-pages">octopress-tag-pages</a> and <a href="https://github.com/robbyedwards/octopress-tag-cloud">octopress-tag-cloud</a>. The former generates tags for your posts(Fig-1)while the latter(Fig-2) collects all the tags and displays them in the aside area. The former can be applied without the latter while you have to install both plugins if you want to use tag cloud plugin.</p>

<p>Here I don&#39;t want to talk too much about how to install the plugins because I think commit diffs can explain everything. This <a href="https://github.com/bluesalt/bluesalt.github.io/commit/d3e90232c14b4bc413567273fe5da9295d1be809">commit</a> shows you how to use the octopress-tag-pages plugin and this <a href="https://github.com/bluesalt/bluesalt.github.io/commit/628ee6fb8d92b0b910982122141882b45dee7dd1">one</a> demos how to use octopress-tag-cloud which is based on octopress-tag-pages.</p>

<h4>Trouble Shooting</h4>

<p>When playing with the tag-cloud plugin, I encounter the trouble when I try to run <code>rake generate</code>:</p>

<p><code>Liquid Exception: comparison of Array with Array failed in page</code></p>

<p>This would occur when every tag is applied for only ONCE. Not sure if this is a bug. Anyway you can simply apply one of the tags on more than one post.</p>

<p>P.S. When composing this post, I have found another useful plugin which add caption to image. Refer this post for the details:<a href="http://blog.zerosharp.com/image-captions-for-octopress/">Image Captions for Octopress</a></p>

<h2>Use Redcarpet Markdown Engine</h2>

<p>As a programmer, I have got quite familiar with the markdown syntax which Github is used, the so called <em>Github Flavored Markdown</em>(GFM). Unfortunately, the default Markdown engine used by Octopress doesn&#39;t support GFM. Good news is that it is very switch the Markdown engine in Octopress now. First upgrade jekyll to ~&gt; 0.12.1, then add &#39;redcarpet&#39; gem to Gemfile and finally modify the _config.yml to switch the Markdown engine from <strong>rdiscount</strong> to <strong>redcarpet</strong>. Refer this <a href="https://github.com/bluesalt/bluesalt.github.io/commit/305a3d4b6ef55dd3230498aa06617a6c5bb0f8fd">commit</a> for more detail.</p>

<h2>Add Clicky Web Analysis Tool</h2>

<p>Clicky is similar to Google Web Analysis. Unfortunately Octopress does not support Clicky by default, however, it is very easy to add Clicky analysis widget to your Octopress site. After registering your website from <a href="getclicky.com">Clicky</a>, a piece of Html code will be generated. All you need to do is add  the Html code snippet to <code>source/_includes/custom/after_footer.html</code>. Refer to this <a href="https://github.com/bluesalt/bluesalt.github.io/commit/648b13bafcd47a7499e5db0c296f7be9b8c3ed9b">commit</a> for more detail.</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://bluesalt.github.io/blog/2013/05/19/hello-world/"/>
    <updated>2013-05-19T13:59:00+08:00</updated>
    <id>http://bluesalt.github.io/blog/2013/05/19/hello-world</id>
    <content type="html"><![CDATA[<h3>The first post written by markdown!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test if a Value Implements an Interface in Golang]]></title>
    <link href="http://bluesalt.github.io/blog/2012/09/25/test-if-a-value-implements-an-interface-in-golang/"/>
    <updated>2012-09-25T06:11:00+08:00</updated>
    <id>http://bluesalt.github.io/blog/2012/09/25/test-if-a-value-implements-an-interface-in-golang</id>
    <content type="html"><![CDATA[<p>We all know that type assert could be used to cast a interface type variable to its actual type value. In the other way, golang allows you to query if a value has implement an interface. This could be used when writing unit test cases, for example, you want to make sure that a struct actually implements certain interfaces.</p>

<ul>
<li><p>Assign the value to an empty interface variable</p></li>
<li><p>Use type assert: assert the empty interface type to any specific interface you are interested</p></li>
</ul>

<p>Here is a small while complete example
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="p">.</span> <span class="s">&quot;launchpad.net/gocheck&quot;</span>
</span><span class='line'>  <span class="s">&quot;testing&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Test</span><span class="p">(</span><span class="nx">t</span> <span class="o"><em></span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">TestingT</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">MySuite</span> <span class="kd">struct</span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">Suite</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">MySuite</span><span class="p">{})</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">IFoobar</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foobar</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Foobar</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o"></em></span><span class="nx">Foobar</span><span class="p">)</span> <span class="nx">foobar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o"><em></span><span class="nx">MySuite</span><span class="p">)</span> <span class="nx">TestFoobar</span><span class="p">(</span><span class="nx">c</span> <span class="o"></em></span><span class="nx">C</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">v</span> <span class="o">:=</span> <span class="nx">Foobar</span><span class="p">{}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">i</span> <span class="kd">interface</span><span class="p">{}</span> <span class="p">=</span> <span class="nx">v</span>
</span><span class='line'>  <span class="nx"><em></span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">i</span><span class="p">.(</span><span class="nx">IFoobar</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">c</span><span class="p">.</span><span class="nx">Assert</span><span class="p">(</span><span class="nx">ok</span><span class="p">,</span> <span class="nx">Equals</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">p</span> <span class="kd">interface</span><span class="p">{}</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">v</span>
</span><span class='line'>  <span class="nx"></em></span><span class="p">,</span> <span class="nx">ok</span> <span class="p">=</span> <span class="nx">p</span><span class="p">.(</span><span class="nx">IFoobar</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">c</span><span class="p">.</span><span class="nx">Assert</span><span class="p">(</span><span class="nx">ok</span><span class="p">,</span> <span class="nx">Equals</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bundles Command Error in TextMate 2]]></title>
    <link href="http://bluesalt.github.io/blog/2012/08/18/bundles-command-error-in-textmate-2/"/>
    <updated>2012-08-18T22:43:52+08:00</updated>
    <id>http://bluesalt.github.io/blog/2012/08/18/bundles-command-error-in-textmate-2</id>
    <content type="html"><![CDATA[<p>When getting the news that the famous text editor in Max OS platform&#8211;TextMate 2 had been released as an open source software in github, I couldn&#39;t wait to  give it a try though I am a big fan of VIM. When trying to run scripts files such as Ruby, Python or Even Golang, I failed. The error information was shown like this :</p>

<p><em>/Users/xxxxxxx/Library/Application Support/TextMate/Managed/Bundles/Bundle Support.tmbundle/Support/shared/lib/escape.rb:23:in `e</em>url&#39;: undefined method <code>gsub&#39; for nil:NilClass (NoMethodError)_
_from (erb):21:in</code>header&#39;_
<em>from /Users/xxxxxxx/.rvm/rubies/ruby-1.9.3-p125/lib/ruby/1.9.1/erb.rb:835:in `eval&#39;</em>
<em>from /Users/xxxxxxx/.rvm/rubies/ruby-1.9.3-p125/lib/ruby/1.9.1/erb.rb:835:in `block in result&#39;</em>
<em>from /Users/xxxxxxx/.rvm/rubies/ruby-1.9.3-p125/lib/ruby/1.9.1/erb.rb:833:in `call&#39;</em>
<em>from /Users/xxxxxxx/.rvm/rubies/ruby-1.9.3-p125/lib/ruby/1.9.1/erb.rb:833:in `result&#39;</em>
<em>from /Users/xxxxxxx/Library/Application Support/TextMate/Managed/Bundles/Bundle Support.tmbundle/Support/shared/lib/tm/htmloutput.rb:91:in `header&#39;</em>
<em>from /Users/xxxxxxx/Library/Application Support/TextMate/Managed/Bundles/Bundle Support.tmbundle/Support/shared/lib/tm/htmloutput.rb:68:in `show&#39;</em>
<em>from /Users/xxxxxxx/Library/Application Support/TextMate/Managed/Bundles/Bundle Support.tmbundle/Support/shared/lib/tm/executor.rb:110:in `run&#39;</em>
<em>from /Users/xxxxxxx/Library/Application Support/Avian/Bundles/Go.tmbundle/Support/gomate.rb:63:in `launch&#39;</em>
<em>from Run:4:in `<main>&#39;</em></p>

<p>This is caused by the lack of themes files for the output window.The most easy way to solve this is getting the theme files and make the bundles find it.I am curious why doesn&#39;t the textmate 2  ship with these files.</p>

<ol>
<li><p>Get the files from here :  <a href="https://www.dropbox.com/s/kdo0j21xij3mzos/themes.tar">theme</a></p></li>
<li><p>Extract it to anywhere you like, I put it in:  ~/Library/Application Support/Avian</p></li>
<li><p>Create a new environment variable called &#39;TM<em>THEME</em>PATH&#39;  under Preferences -&gt; Variables. Fill the path where you put your themes in the value field. In my case, the entry is this :</p></li>
</ol>

<p>TM<em>THEME</em>PATH=$HOME/Library/Application Support/Avian/themes/</p>

<p>Enjoy the powerful editor brought by community of open source!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ECUG Con 2011]]></title>
    <link href="http://bluesalt.github.io/blog/2011/11/22/ecug-con-2011/"/>
    <updated>2011-11-22T20:11:46+08:00</updated>
    <id>http://bluesalt.github.io/blog/2011/11/22/ecug-con-2011</id>
    <content type="html"><![CDATA[<p>从买域名到空间终于把博客搭好了，以后再慢慢弄wordpress。第一篇blog，严格的说应该是独立博客的第一篇，以后再慢慢研究要不要吧javaeye上的blog迁移过来，写点ECUG的吧，第一次参加这样的会议。</p>

<p>第一天去了，第二天身体不大舒服，就没有去，想想还是有点遗憾。会议的主题是关于Go语言的应用，这个会议之前是关于Erlang，听许式伟的介绍，他在实践中发现Go语言比Erlang更适合他的项目使用需求，因此转向Go。关于语言的好坏真的是很难讲，几年前对语言还挺感兴趣，这几天虽然也关注语言的发展，当自己的兴趣已经更多的转移到服务器后端架构上了，所以对于Erlang与Go语言孰好孰坏也不作评价了。</p>

<p>第一场演讲是黄东的系统工程师的非专业课，主要是宽带的计费的，互动很多，听听挺有意思，原来宽带的计费学问还挺大的。</p>

<p><img src="http://pic.yupoo.com/bluesalt/Bxnj2cTq/medish.jpg" alt=""></p>

<p>接下来老莫的云储存。分布式存储一直是感兴趣的方向，因此听得格外仔细。当然由于公司原因，自然不会提到太多的细节。让我记住的一点是做网络相关服务器应用要保守，不需要采用太trick的算法，可靠性才是首要考虑目标，而不是性能。</p>

<p><img src="http://pic.yupoo.com/bluesalt/BxnjbiQD/medish.jpg" alt=""></p>

<p>下午第一场是新浪微博田琪的关于redis的，这方面俺完全不懂。。</p>

<p><img src="http://pic.yupoo.com/bluesalt/Bxnjklnq/medish.jpg" alt=""></p>

<p>上海商派的王磊讲关于他们自己开发的PaaS平台的。说实话，国内公司做这一方面开发而且愿意拿出来分享，我真的觉得挺意外的。。</p>

<p><img src="http://pic.yupoo.com/bluesalt/BxnjsvfS/medish.jpg" alt=""></p>

<p>第一天最后一场：韦光京的关于Go语言的</p>

<p><img src="http://pic.yupoo.com/bluesalt/BxnjBrZf/medish.jpg" alt=""></p>

<p>小花絮：参加ECUG的最小听众~</p>

<p><img src="http://pic.yupoo.com/bluesalt/BxnjM8JR/medish.jpg" alt=""></p>
]]></content>
  </entry>
  
</feed>
