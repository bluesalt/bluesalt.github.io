<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jeff Li]]></title>
  <link href="http://bluesalt.github.io/atom.xml" rel="self"/>
  <link href="http://bluesalt.github.io/"/>
  <updated>2013-05-22T23:00:41+08:00</updated>
  <id>http://bluesalt.github.io/</id>
  <author>
    <name><![CDATA[Jeff Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hello world]]></title>
    <link href="http://bluesalt.github.io/blog/2013/05/19/hello-world/"/>
    <updated>2013-05-19T13:59:00+08:00</updated>
    <id>http://bluesalt.github.io/blog/2013/05/19/hello-world</id>
    <content type="html"><![CDATA[<h3>The first post written by markdown!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test if a value implements an interface in golang]]></title>
    <link href="http://bluesalt.github.io/blog/2012/09/25/test-if-a-value-implements-an-interface-in-golang/"/>
    <updated>2012-09-25T06:11:00+08:00</updated>
    <id>http://bluesalt.github.io/blog/2012/09/25/test-if-a-value-implements-an-interface-in-golang</id>
    <content type="html"><![CDATA[<p>We all know that type assert could be used to cast a interface type variable to its actual type value. In the other way, golang allows you to query if a value has implement an interface. This could be used when writing unit test cases, for example, you want to make sure that a struct actually implements certain interfaces.</p>

<ul>
<li><p>Assign the value to an empty interface variable</p></li>
<li><p>Use type assert: assert the empty interface type to any specific interface you are interested</p></li>
</ul>


<p>Here is a small while complete example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="p">.</span> <span class="s">&quot;launchpad.net/gocheck&quot;</span>
</span><span class='line'>  <span class="s">&quot;testing&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">Test</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">TestingT</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">MySuite</span> <span class="kd">struct</span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">Suite</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">MySuite</span><span class="p">{})</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">IFoobar</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foobar</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">Foobar</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">Foobar</span><span class="p">)</span> <span class="nx">foobar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">MySuite</span><span class="p">)</span> <span class="nx">TestFoobar</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">C</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">v</span> <span class="o">:=</span> <span class="nx">Foobar</span><span class="p">{}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">i</span> <span class="kd">interface</span><span class="p">{}</span> <span class="p">=</span> <span class="nx">v</span>
</span><span class='line'>  <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">i</span><span class="p">.(</span><span class="nx">IFoobar</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">c</span><span class="p">.</span><span class="nx">Assert</span><span class="p">(</span><span class="nx">ok</span><span class="p">,</span> <span class="nx">Equals</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">p</span> <span class="kd">interface</span><span class="p">{}</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">v</span>
</span><span class='line'>  <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="p">=</span> <span class="nx">p</span><span class="p">.(</span><span class="nx">IFoobar</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">c</span><span class="p">.</span><span class="nx">Assert</span><span class="p">(</span><span class="nx">ok</span><span class="p">,</span> <span class="nx">Equals</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bundles command error in TextMate 2]]></title>
    <link href="http://bluesalt.github.io/blog/2012/08/18/bundles-command-error-in-textmate-2/"/>
    <updated>2012-08-18T22:43:52+08:00</updated>
    <id>http://bluesalt.github.io/blog/2012/08/18/bundles-command-error-in-textmate-2</id>
    <content type="html"><![CDATA[<p>When getting the news that the famous text editor in Max OS platform&mdash;TextMate 2 had been released as an open source software in github, I couldn&rsquo;t wait to  give it a try though I am a big fan of VIM. When trying to run scripts files such as Ruby, Python or Even Golang, I failed. The error information was shown like this :</p>

<p><em>/Users/xxxxxxx/Library/Application Support/TextMate/Managed/Bundles/Bundle Support.tmbundle/Support/shared/lib/escape.rb:23:in <code>e_url': undefined method</code>gsub&#8217; for nil:NilClass (NoMethodError)</em>
<em>from (erb):21:in <code>header'_
_from /Users/xxxxxxx/.rvm/rubies/ruby-1.9.3-p125/lib/ruby/1.9.1/erb.rb:835:in</code>eval&#8217;</em>
<em>from /Users/xxxxxxx/.rvm/rubies/ruby-1.9.3-p125/lib/ruby/1.9.1/erb.rb:835:in <code>block in result'_
_from /Users/xxxxxxx/.rvm/rubies/ruby-1.9.3-p125/lib/ruby/1.9.1/erb.rb:833:in</code>call&#8217;</em>
<em>from /Users/xxxxxxx/.rvm/rubies/ruby-1.9.3-p125/lib/ruby/1.9.1/erb.rb:833:in <code>result'_
_from /Users/xxxxxxx/Library/Application Support/TextMate/Managed/Bundles/Bundle Support.tmbundle/Support/shared/lib/tm/htmloutput.rb:91:in</code>header&#8217;</em>
<em>from /Users/xxxxxxx/Library/Application Support/TextMate/Managed/Bundles/Bundle Support.tmbundle/Support/shared/lib/tm/htmloutput.rb:68:in <code>show'_
_from /Users/xxxxxxx/Library/Application Support/TextMate/Managed/Bundles/Bundle Support.tmbundle/Support/shared/lib/tm/executor.rb:110:in</code>run&#8217;</em>
<em>from /Users/xxxxxxx/Library/Application Support/Avian/Bundles/Go.tmbundle/Support/gomate.rb:63:in <code>launch'_
_from Run:4:in</code><main>&lsquo;</em></p>

<p>This is caused by the lack of themes files for the output window.The most easy way to solve this is getting the theme files and make the bundles find it.I am curious why doesn&rsquo;t the textmate 2  ship with these files.</p>

<ol>
<li><p>Get the files from here :  <a href="https://www.dropbox.com/s/kdo0j21xij3mzos/themes.tar">theme</a></p></li>
<li><p>Extract it to anywhere you like, I put it in:  ~/Library/Application Support/Avian</p></li>
<li><p>Create a new environment variable called &lsquo;TM_THEME_PATH&#8217;  under Preferences &ndash;> Variables. Fill the path where you put your themes in the value field. In my case, the entry is this :</p></li>
</ol>


<p>TM_THEME_PATH=$HOME/Library/Application Support/Avian/themes/</p>

<p>Enjoy the powerful editor brought by community of open source!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ECUG Con 2011]]></title>
    <link href="http://bluesalt.github.io/blog/2011/11/22/ecug-con-2011/"/>
    <updated>2011-11-22T20:11:46+08:00</updated>
    <id>http://bluesalt.github.io/blog/2011/11/22/ecug-con-2011</id>
    <content type="html"><![CDATA[<p>从买域名到空间终于把博客搭好了，以后再慢慢弄wordpress。第一篇blog，严格的说应该是独立博客的第一篇，以后再慢慢研究要不要吧javaeye上的blog迁移过来，写点ECUG的吧，第一次参加这样的会议。</p>

<p>第一天去了，第二天身体不大舒服，就没有去，想想还是有点遗憾。会议的主题是关于Go语言的应用，这个会议之前是关于Erlang，听许式伟的介绍，他在实践中发现Go语言比Erlang更适合他的项目使用需求，因此转向Go。关于语言的好坏真的是很难讲，几年前对语言还挺感兴趣，这几天虽然也关注语言的发展，当自己的兴趣已经更多的转移到服务器后端架构上了，所以对于Erlang与Go语言孰好孰坏也不作评价了。</p>

<p>第一场演讲是黄东的系统工程师的非专业课，主要是宽带的计费的，互动很多，听听挺有意思，原来宽带的计费学问还挺大的。</p>

<p><img src="http://pic.yupoo.com/bluesalt/Bxnj2cTq/medish.jpg" alt="" /></p>

<p>接下来老莫的云储存。分布式存储一直是感兴趣的方向，因此听得格外仔细。当然由于公司原因，自然不会提到太多的细节。让我记住的一点是做网络相关服务器应用要保守，不需要采用太trick的算法，可靠性才是首要考虑目标，而不是性能。</p>

<p><img src="http://pic.yupoo.com/bluesalt/BxnjbiQD/medish.jpg" alt="" /></p>

<p>下午第一场是新浪微博田琪的关于redis的，这方面俺完全不懂。。</p>

<p><img src="http://pic.yupoo.com/bluesalt/Bxnjklnq/medish.jpg" alt="" /></p>

<p>上海商派的王磊讲关于他们自己开发的PaaS平台的。说实话，国内公司做这一方面开发而且愿意拿出来分享，我真的觉得挺意外的。。</p>

<p><img src="http://pic.yupoo.com/bluesalt/BxnjsvfS/medish.jpg" alt="" /></p>

<p>第一天最后一场：韦光京的关于Go语言的</p>

<p><img src="http://pic.yupoo.com/bluesalt/BxnjBrZf/medish.jpg" alt="" /></p>

<p>小花絮：参加ECUG的最小听众~</p>

<p><img src="http://pic.yupoo.com/bluesalt/BxnjM8JR/medish.jpg" alt="" /></p>
]]></content>
  </entry>
  
</feed>
