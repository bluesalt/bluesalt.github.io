<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jeff Li]]></title>
  <link href="http://bluesalt.github.io/atom.xml" rel="self"/>
  <link href="http://bluesalt.github.io/"/>
  <updated>2017-05-19T21:59:39+08:00</updated>
  <id>http://bluesalt.github.io/</id>
  <author>
    <name><![CDATA[Jeff Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install Protocol Buffer From Source in CentOS 7]]></title>
    <link href="http://bluesalt.github.io/blog/2016/12/08/install-protocol-buffer-from-source-in-centos-7/"/>
    <updated>2016-12-08T13:45:59+08:00</updated>
    <id>http://bluesalt.github.io/blog/2016/12/08/install-protocol-buffer-from-source-in-centos-7</id>
    <content type="html"><![CDATA[<p>Figuring out dependencies in specific distribution is really boring, not fun at all.</p>

<p>Hope this post can save you some time.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo yum install autoconf automake libtool unzip gcc-c++ git -y
</span><span class="line">git clone https://github.com/google/protobuf.git
</span><span class="line">cd protobuf
</span><span class="line">./autogen.sh
</span><span class="line">./configure
</span><span class="line">make</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Beginner's Guide for Vagrant]]></title>
    <link href="http://bluesalt.github.io/blog/2016/12/06/a-beginners-guide-for-vagrant/"/>
    <updated>2016-12-06T07:28:04+08:00</updated>
    <id>http://bluesalt.github.io/blog/2016/12/06/a-beginners-guide-for-vagrant</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#getting-started">Getting Started</a></li>
  <li><a href="#how-it-works">How It Works</a>    <ul>
      <li><a href="#provider">Provider</a></li>
      <li><a href="#box">Box</a></li>
      <li><a href="#provisioner">Provisioner</a></li>
    </ul>
  </li>
  <li><a href="#what-is-next">What is Next</a></li>
</ul>

<h3 id="introduction">Introduction</h3>
<p><a href="https://www.vagrantup.com/">Vagrant</a> is a tool developed at <a href="https://www.hashicorp.com/">HashiCorp</a> intended to relieve the effort to setup development environment. According to its document, Vagrant is able to “create and configure lightweight, reproducible, and portable development environments”. It relizes the vision through virtualization technologies like VirtualBox.
By the way, besides Vagrant, HashiCorp also deliver several open source DevOps tools which are really cool. I suggest spending some time on exploring their products if you are interested in DevOps.
<!--more--></p>

<p>The biggest pain point Vagrant solves is how to boot up a consistent development environment in every host. The benefit is obvious.</p>

<ul>
  <li>Boot up a consistent development environment anywhere.
    <ul>
      <li>If you have multiple laptops, it makes you work seamlessly with any one of them.</li>
      <li>The development environment is able to be shared among the whole team. There is no need for new team members to spend a day on setting up the environment.</li>
    </ul>
  </li>
  <li>The whole development environment is defined in <code>Vagrantfile</code> which is Ruby code in fact. That means the environment can be versioned with version control system like <code>Git</code> and thus could be shared easily.</li>
</ul>

<h3 id="getting-started">Getting Started</h3>
<p>As mentioned before, Vagrant is built on virtualization, so before getting your hands dirty, you need</p>

<ul>
  <li>Grab and install Vagrant from the <a href="https://www.vagrantup.com/downloads.html">project’s website</a></li>
  <li>Choose a virtualization platform and have it installed. We’ll use <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a> as our example. Other <a href="https://www.vagrantup.com/docs/providers/">alternative choices</a> are also available if you are interested.</li>
</ul>

<p>From the <a href="https://www.vagrantup.com/docs/getting-started/">doc</a>, it is very easy to boot up a virtual machine.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vagrant init centos/7
</span><span class="line">vagrant up</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here is the list of what actually happen.  </p>

<ul>
  <li>The Vagrant command line tool create a <code>Vagrantfile</code> with following content which indicates that vagrant should boot up a virtual machine based on the OS image called <code>centos/7</code>. </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class="line">  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;centos/7&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>Vagrant tries to locate the OS image in the local image repo. If not found , it attempts to download the image from <a href="https://atlas.hashicorp.com/boxes/search">HashiCorp’s box search service</a>. The path of local image repo is <code>$HOME/.vagrant.d/boxes</code>.</p>
  </li>
  <li>
    <p>Create a virtual machine based on the OS image</p>
  </li>
</ul>

<p>For now, we have a running virtual machine. Imagine the day you booted up a VM by *.iso image, life becomes pretty easy now. Next we can control the VM by running <code>vagrant ssh</code>. This seems like magic but if you run <code>ps -ef | grep vagrant</code>, you can see something like this </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">ssh</span> <span class="n">vagrant</span><span class="err">@</span><span class="mi">127</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span> <span class="o">-</span><span class="nb">p</span> <span class="mi">2222</span> <span class="o">-</span><span class="n">o</span> <span class="no">Compression</span><span class="o">=</span><span class="n">yes</span> <span class="o">-</span><span class="n">o</span> <span class="no">DSAAuthentication</span><span class="o">=</span><span class="n">yes</span> <span class="o">-</span><span class="n">o</span> <span class="no">LogLevel</span><span class="o">=</span><span class="no">FATAL</span> <span class="o">-</span><span class="n">o</span> <span class="no">StrictHostKeyChecking</span><span class="o">=</span><span class="n">no</span> <span class="o">-</span><span class="n">o</span> <span class="no">UserKnownHostsFile</span><span class="o">=</span><span class="sr">/dev/nu</span><span class="n">ll</span> <span class="o">-</span><span class="n">o</span> <span class="no">IdentitiesOnly</span><span class="o">=</span><span class="n">yes</span> <span class="o">-</span><span class="n">i</span> <span class="vg">$PWD</span><span class="o">/.</span><span class="n">vagrant</span><span class="o">/</span><span class="n">machines</span><span class="o">/</span><span class="n">default</span><span class="o">/</span><span class="n">virtualbox</span><span class="o">/</span><span class="n">private_key</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That means <code>vagrant ssh</code> connects to the VM by calling the <code>ssh</code> utility and nothing else. Wait, why the host is <code>127.0.0.1</code> ?  We’ll check this out in another blog post dedicated to Vagrant network.</p>

<h3 id="how-it-works">How It Works</h3>
<p>Essentially, Vagrant provides the features:</p>

<ul>
  <li>A nearly hypervisor-agnostic abstraction for managing virtual machines.</li>
  <li>A way to define the development environment with code. A typical Vagrant development environment includes 2 parts
    <ul>
      <li>A virtual machine</li>
      <li>Toolchain like GCC, lib dependencies and Java running in the virtual machine</li>
    </ul>
  </li>
</ul>

<p>Let’s see how Vagrant makes it.</p>

<h4 id="provider">Provider</h4>
<p>Provider means the type of underlying virtualization technology. Though it is able to manage virtual machines, Vagrant is not a hypervisor itself. Instead, it is just abstraction of managing virtual machines in different hypervisors. That is why we said that hypervisor is a prerequisite for Vagrant.</p>

<p>Vagrant supports multiple types of hypervisor such as <code>VirtualBox</code>, <code>VMware Fusion</code>, <code>VMware Workstation</code>, <code>Hyper-V</code> and <code>Docker</code>. It is worth mentioning that thanks to the plugable provider architecture, Vagrant is able to manage virtual machines in cloud service like <code>AWS</code>, <code>DigitalOcean</code>, <code>VMware vSphere</code>, <code>OpenStack</code> besides hypervisors mentioned before.</p>

<h4 id="box">Box</h4>
<p>Box packages OS images required by the underlying hypervisor to run the virtual machine. Typically, each hypervisor has its own OS image format. Thus when building or downloading boxes, you have to choose the target hypervisor. Boxes are organized in local repo located in  <code>$HOME/.vagrant.d/boxes</code>. There are multiple ways to add a box to the local box repo.</p>

<ul>
  <li>From HashiCorp’s <a href="https://atlas.hashicorp.com/boxes/search">box discovery service</a>. You can search the OS box you want to run and add it to the local repo by <code>vagrant box add</code> command. Note, you should <strong>ALWAYS</strong> download the boxes you trust. Fortunately, some popular OS distributions like <a href="https://atlas.hashicorp.com/centos/boxes/7">CentOS</a> and <a href="https://atlas.hashicorp.com/ubuntu/boxes/xenial64">Ubuntu</a> provide the OS boxes officially. HashiCorp provides some boxes too.</li>
  <li>Use <a href="https://www.packer.io/">Packer</a>, another tool from HashiCorp to build boxes from iso images. <a href="https://www.chef.io/">Chef</a> provides a whole bunch of <a href="https://github.com/chef/bento">Packer templates</a> in GitHub to make life much more easier.</li>
  <li>Create box from existing virtual machines running in different hypervisor. See the <a href="https://www.vagrantup.com/docs/boxes/base.html">doc</a> for more detail.</li>
</ul>

<p>For new Vagrant users, the first method should be preferred because it is easy. For example, a CentOS 7 box could be added by one command line <code>vagrant box add centos/7</code>. The box is trusted because it is distributed officially.</p>

<p><strong>Tip</strong>: In some districts like China mainland, it would takes several hours to download the whole box and the download has to be restarted from the begin if any error occurs during transfer which is really painful sometime. A workaround is using some download tools like Thunder to <a href="http://stackoverflow.com/questions/28399324/download-vagrant-box-file-locally-from-atlas-and-configuring-it">download Vagrant box manually</a> to local hostand then add it to the box repo.</p>

<h4 id="provisioner">Provisioner</h4>
<p>The example doesn’t leverage any provisioner but we have mentioned that one of the essential parts of a development environment is the toolchain. It is impractical to package all the development tools in a box thus the Vagrant provides facility to customize the virtual machine.</p>

<p>There are many deveops tools available to automate configuration management such as <a href="https://www.ansible.com/">Ansible</a>, <a href="https://puppet.com/">Puppet</a>, <a href="https://saltstack.com/">SaltStack</a> and <a href="https://www.chef.io/">Chef</a>. Vagrant does not reinvent the wheel. Instead, it makes an abstract on different tools so the users could choose any technique they want. The tools are called <code>provisioners</code>.</p>

<p>Supported provisioner list could be found in the <a href="https://www.vagrantup.com/docs/provisioning/">doc</a>. You could choose any one you want. If you don’t have experience with any tool yet, I strongly recommend Anislbe because it is simple yet powerful. </p>

<h3 id="what-is-next">What is Next</h3>
<p>Vagrant is a powerful tool. It is impossible to cover everything in a single post.  Here are some other interesting topics deserves to be explored.</p>

<ul>
  <li><strong>Provisioner</strong>: We don’t show any usage about provisioner in this post. However, it is essential for customizing a envrionment. Ansible should be considered if you are a developer since it is lightweight and easy to learn.</li>
  <li><strong>QEMU provider</strong>: VirtualBox is great and most of time it is adequate. But it does not support <a href="https://en.wikipedia.org/wiki/Virtualization#Nested_virtualization">nested virtualzation</a> which is the ability to run virtual machines within another virtual machine. Most of hypervisors like VMware Fusion, Hyper-V and QEMU except VirtualBox support such a feature. Nested virtualization is very useful when creating demo cluster. There is also a company named <a href="https://www.ravellosystems.com/">Ravello</a> who has been acquired by Oracle focusing on nested virtualzation technique. Hyper-V is not cross-platform and VMware Fusion/Workstation is charged. Vagrant provider for VMware Fusion/Workstation is also charged. So QEMU is another provider worthy playing with.</li>
  <li><strong>Docker provider</strong>: As one of the hottest techniques, Docker is worthy noting. Compared with hypervisors like VirtualBox, Docker is much much more lightweight. It is not a hypervisor, but it does provide some abstraction of a virtual machine. Its overhead is very low too which makes it is easy to boot dozens of Docker containers in you laptop. Of course, it is not as versatile as hypervisors but if it meets your need,it would be a good choices.</li>
  <li><strong>Network</strong>: Many new users will be confused on the network configuration of Vagrant. My suggestion is learning the network in hypervisor before you go ahead with Vagrant. <a href="https://www.virtualbox.org/manual/ch06.html">VirtualBox’s Network document</a> is a good source to refer.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With RocksDB in CentOS 7]]></title>
    <link href="http://bluesalt.github.io/blog/2016/12/02/getting-started-with-rocksdb-in-centos-7/"/>
    <updated>2016-12-02T20:27:01+08:00</updated>
    <id>http://bluesalt.github.io/blog/2016/12/02/getting-started-with-rocksdb-in-centos-7</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#dynamic-linkage">Dynamic Linkage</a>    <ul>
      <li><a href="#install-the-shared-lib">Install the shared lib</a></li>
      <li><a href="#run-the-example">Run the example</a></li>
    </ul>
  </li>
  <li><a href="#static-linkage">Static Linkage</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<h3 id="introduction">Introduction</h3>
<p><a href="http://rocksdb.org/">RocksDB</a> is a high performance embedded key value storage engine which is written in C++. Though its name tells that it is a database, it is actually a C++ library providing a bunch of API instead of a Client-Server architected database.</p>

<p>I am not a C++ programmer and when trying to play with RocksDB following the <a href="http://rocksdb.org/docs/getting-started.html">Getting Started</a> guide from the RocksDB website, I found it is not easy to run the example in CentOS 7 with either dynamic or static linkage. To be more specific with dynamic linkage, the search paths of dynamic libraries vary from Linux distributions but the installation script of RocksDB does not take care of that.</p>

<p>This post is intended for those who want to play with RocksDB but failed to run the example. What will be mentioned including</p>

<ul>
  <li>How to install RocksDB as dynamic library from source in CentOS 7</li>
  <li>How to install RocksDB as static library in CentOS 7</li>
  <li>How to run the example program</li>
</ul>

<!--more-->

<p>Here is the demo program</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &quot;rocksdb/db.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="n">rocksdb</span><span class="o">::</span><span class="n">DB</span><span class="o">*</span> <span class="n">db</span><span class="p">;</span>
</span><span class="line">    <span class="n">rocksdb</span><span class="o">::</span><span class="n">Options</span> <span class="n">options</span><span class="p">;</span>
</span><span class="line">    <span class="n">options</span><span class="p">.</span><span class="n">create_if_missing</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">    <span class="n">rocksdb</span><span class="o">::</span><span class="n">Status</span> <span class="n">status</span> <span class="o">=</span> <span class="n">rocksdb</span><span class="o">::</span><span class="n">DB</span><span class="o">::</span><span class="n">Open</span><span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="s">&quot;/tmp/kv&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">db</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">delete</span> <span class="n">db</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Before you continue, please install the dependencies.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="n">sudo</span> <span class="n">yum</span> <span class="n">install</span> <span class="n">gflags</span><span class="o">-</span><span class="n">devel</span> <span class="n">snappy</span><span class="o">-</span><span class="n">devel</span> <span class="n">zlib</span><span class="o">-</span><span class="n">devel</span> <span class="n">bzip2</span><span class="o">-</span><span class="n">devel</span>  <span class="n">gcc</span><span class="o">-</span><span class="n">c</span><span class="o">++</span>  <span class="n">libstdc</span><span class="o">++-</span><span class="n">devel</span> <span class="o">-</span><span class="n">y</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="dynamic-linkage">Dynamic Linkage</h3>

<h4 id="install-the-shared-lib">Install the shared lib</h4>

<p>First, run the command line to build dynamic library </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="n">DEBUG_LEVEL</span><span class="o">=</span><span class="mi">0</span> <span class="n">make</span> <span class="n">shared_lib</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>Makefile</code> provides a target called <code>install-shared</code> to install RocksDB shared lib.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="n">DEBUG_LEVEL</span><span class="o">=</span><span class="mi">0</span> <span class="n">sudo</span> <span class="o">-</span><span class="n">E</span> <span class="n">make</span> <span class="n">install</span><span class="o">-</span><span class="n">shared</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The target actually includes two jobs:</p>

<ol>
  <li>Copy all the header files under <code>$SRC_ROOT/include/rocksdb</code> to <code>/usr/local/include/rocksdb</code></li>
  <li>Copy the <code>.so</code> file and symbolic links to <code>/usr/local/lib</code>  </li>
</ol>

<h4 id="run-the-example">Run the example</h4>
<ul>
  <li>Compile the program with following command</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">g++ -o demo -std<span class="o">=</span>c++11 -lrocksdb demo.cpp
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Run the program with <code>./demo</code> and an error occurs</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">./demo: error <span class="k">while </span>loading shared libraries: librocksdb.so.4.9: cannot open shared object file: No such file or directory
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The problem with the <code>install-shared</code> target is that  <code>/usr/local/lib</code> is in <code>g++</code>’s dynamic library search paths but not in <code>ldconfig</code>’s in CentOS 7 by default. So the program can be built during compiling time but will cause dynamic library load error during run time. This can be verified by following commands:</p>

<ul>
  <li>Show search paths of g++</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ld --verbose | grep SEARCH_DIR | tr -s <span class="s1">&#39; ;&#39;</span> <span class="se">\\</span>012
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Show search paths of ldconfig</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ldconfig -v 2&gt;/dev/null | grep -v ^<span class="s1">$&#39;\t&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There are 2 ways to resolve the issue. And <em>EITHER</em> one is ok.</p>

<ul>
  <li>Installing <code>.so</code> file and symbolic links into both the search paths of <code>g++</code> and <code>ldconfig</code></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">INSTALL_PATH</span><span class="o">=</span>/usr sudo -E make install-shared
</span><span class="line">sudo ldconfig -v  <span class="c">#refresh the ldconfig cache</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Add <code>/usr/local/lib</code> to the <code>ldconfig</code>’s search paths.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">echo</span> <span class="s2">&quot;/usr/local/lib&quot;</span> |sudo tee /etc/ld.so.conf.d/rocksdb-x86_64.conf
</span><span class="line">sudo ldconfig -v  <span class="c">#refresh the ldconfig cache</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="static-linkage">Static Linkage</h3>
<p>As mentioned before, <code>/usr/local/lib</code> is in g++’s search path, thus there is no such dynamic load issue with static RocksDB. First build and install static RocksDB.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">DEBUG_LEVEL</span><span class="o">=</span>0 make static_lib
</span><span class="line"><span class="nv">DEBUG_LEVEL</span><span class="o">=</span>0 sudo -E make install-static
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then compile the demo program with </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">g++  demo.cc -o demo -lpthread -lrocksdb  -std<span class="o">=</span>c++11  -lsnappy  -lz -lbz2
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>or simply</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">g++  demo.cc -o demo -lpthread -lrocksdb  -std<span class="o">=</span>c++11
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Don’t miss the <code>pthread</code> lib.</p>

<h3 id="conclusion">Conclusion</h3>

<p>The problem is caused by shared library search paths which could vary from different Linux distributions. A good solution to avoid the issue is packaging the files into a rpm package, and deb package in Debian platform of course.</p>

<p>It is worth noting that <code>/usr/lib64</code>, instead of <code>/usr/lib</code>, is the common place to hold the lib files in x86_64 RedHat family OSes such as CentOS, Fedora. Though <code>/usr/lib</code> works but <code>/usr/lib64</code> is a better place for the lib files in RedHat family. There is a <a href="https://github.com/facebook/rocksdb/pull/2221">patch</a> to take care of that when building a RPM.  </p>

<s>There is another problem I have not figured out yet. It is about static linkage. If anyone know how to link RocksDB program statically please drop me a note.</s>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Latest Wireshark in CentOS 7]]></title>
    <link href="http://bluesalt.github.io/blog/2016/08/14/build-latest-wireshark-in-centos-7/"/>
    <updated>2016-08-14T16:27:37+08:00</updated>
    <id>http://bluesalt.github.io/blog/2016/08/14/build-latest-wireshark-in-centos-7</id>
    <content type="html"><![CDATA[<p>As we know, Wireshark has switched from GTK+ to Qt since Version 2. As a Mac and Kubuntu user, the GTK UI was really not harmony with my desktop environment. So after the version 2 was released last year, I upgraded Wireshark in both my Mac and Kubuntu boxes. </p>

<p>For some reason, I have to work on some CentOS 7 boxes in which the latest Wireshark in the yum repo is 1.10. However, I found it is so difficult to find any existing Wireshark 2 rpm package in the web. So after spending some time on the Wireshark document, I came to know that it is really easy to build Wireshark rpm packages if you can figure out the dependencies. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo yum install gcc gcc-c++ bison flex libpcap-devel qt-devel gtk3-devel rpm-build libtool c-ares-devel qt5-qtbase-devel qt5-qtmultimedia-devel desktop-file-utils
</span><span class="line">wget https://1.eu.dl.wireshark.org/src/wireshark-2.0.5.tar.bz2
</span><span class="line">tar xf wireshark-2.0.5.tar.bz2
</span><span class="line">./configure
</span><span class="line">make rpm-package</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After that, you can find the rpms in the <code>package/rpm/RPMs/x86_64</code>. Hope this note could save you some time.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Processes Relation on Python Multiprocessing Module]]></title>
    <link href="http://bluesalt.github.io/blog/2016/04/02/processes-relation-on-python-multiprocessing-module/"/>
    <updated>2016-04-02T11:40:59+08:00</updated>
    <id>http://bluesalt.github.io/blog/2016/04/02/processes-relation-on-python-multiprocessing-module</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#related-processes-in-linux">Related Processes in Linux</a></li>
  <li><a href="#multiple-processes-in-python">Multiple Processes in Python</a>    <ul>
      <li><a href="#fork-primitive">fork primitive</a></li>
      <li><a href="#multiprocess-module">multiprocess module</a></li>
    </ul>
  </li>
  <li><a href="#conclusion">Conclusion</a></li>
  <li><a href="#reference">Reference</a></li>
</ul>

<h3 id="related-processes-in-linux">Related Processes in Linux</h3>
<p>In 2007, when I was taking the undergraduate operating system course, the textbook<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> mentioned that a child process could possible be terminated on its parent’s exit.  Years later, I came to the world of Linux and found that the design is OS-dependent because in Linux, the child process will keep running even though its parent is gone. But it will be adopted by the process 1 instead of becoming an orphan. Let’s use a small program<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> to validate the behaviour.</p>

<!--more-->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">pid_t</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;I am the parent of pid=%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pid</span><span class="p">);</span>
</span><span class="line">        <span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">else</span>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">pid</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;I am the child</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;loop %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class="line">            <span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">        <span class="n">perror</span> <span class="p">(</span><span class="s">&quot;fork&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In Linux, let’s start 2 shell sessions. In the first one, type</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">gcc --std<span class="o">=</span>c99 fork.c
</span><span class="line">./a.out
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the other one, type <code>ps -ef | grep a.out</code> to check the status of the 2 processes. About 10s later, you should find that the parent is gone and the the child is still alive. But the parent of the child has become process 1. </p>

<p>Based on what we have observed, it can be concluded that</p>

<ul>
  <li>child will continue to run even though its parent is dead, and it will be adopted by the <code>init</code> process whose pid is 1.</li>
  <li>parent will not wait for child’s termination if only <code>fork</code> primitive is used.</li>
</ul>

<p>Now let’s think about another case. If you press <code>ctrl + c</code> in the shell immediately after running <code>a.out</code>, you could find that both parent and child are terminated. This seems to contradict what we have mentioned. Actually, when <code>ctrl + c</code> is typed, the <code>SIGINT</code> will be sent to the whole foreground process group instead of a single process<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>. When a child is forked by the parent, they will share the same process group id. So both the parent and child will receive the <code>SIGINT</code> signal and exit. You can change the child’s process group id to see what happens.</p>

<h3 id="multiple-processes-in-python">Multiple Processes in Python</h3>
<p>There are multiple ways in the standard lib to implement multiple processes in Python, one is the <code>fork</code> primitive provided by the <code>os</code> package and another is the <code>multiprocess</code> module.</p>

<h4 id="fork-primitive">fork primitive</h4>
<p>The <code>os.fork</code> function is a wrapper of the  <code>fork</code> function in C. So its behaviour is similar. I won’t give too much detail about it. Here is a sample program. You can find that it behaves as the C version one.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">child</span><span class="p">():</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;process id of child is: </span><span class="si">%d</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">()</span>
</span><span class="line">    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">p</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">fork</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">p</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">    <span class="n">child</span><span class="p">()</span>
</span><span class="line"><span class="k">else</span><span class="p">:</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;process id of parent is: </span><span class="si">%d</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">()</span>
</span><span class="line">    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="multiprocess-module">multiprocess module</h4>
<p><code>multiprocess</code> is a high level module built upon the primitives such as <code>fork</code>, thus it is much more versatile. Besides forking child processes, it also provides features like daemonic process, shared variables. On this post, I will focus only on the process relation. Let’s start with a simple piece of code.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">time</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">child</span><span class="p">():</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;child process pid: </span><span class="si">%d</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">()</span>
</span><span class="line">    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">p</span> <span class="o">=</span> <span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">child</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">())</span>
</span><span class="line"><span class="n">p</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="s">&quot;parent process pid: </span><span class="si">%d</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can find that the parent will always wait for the children to terminated even no <code>join</code> or <code>wait</code> are called. Besides, if the child process is set to be daemonic, instead of waiting, the parent will kill the child before it exits. The behaviour is documented <a href="https://docs.python.org/2/library/multiprocessing.html#multiprocessing.Process.daemon">here</a>. So how does the module achieve that? Let’s navigate to the source code of class <a href="https://github.com/python/cpython/blob/2.7/Lib/multiprocessing/process.py#L86">Process</a> and check the implementation.</p>

<ul>
  <li>When the <code>start</code> method of the child is invoked, it will create a <a href="https://github.com/python/cpython/blob/2.7/Lib/multiprocessing/forking.py#L114">Popen</a> object which will fork a new process and execute the child process by calling back the child’s <a href="https://github.com/python/cpython/blob/2.7/Lib/multiprocessing/process.py#L241">_bootstrap</a> method.</li>
  <li>Meanwhile, the parent will maintain a list to save all its children.</li>
  <li>The <a href="https://github.com/python/cpython/blob/2.7/Lib/multiprocessing/process.py#L241">_bootstrap</a> method imports the <code>util</code> module in which a <a href="https://github.com/python/cpython/blob/2.7/Lib/multiprocessing/util.py#L294">_exit_function</a> function is registered as a cleanup handler. The function will check all its children and terminate all the daemonic children but wait for those that are not.</li>
  <li><code>daemonic</code> is quit different from the <code>daemon process</code> in Linux system programming. In Python multiprocessing module, it is just a flag indicating how the child processes should be handled when parent exits.</li>
</ul>

<h3 id="conclusion">Conclusion</h3>
<p>Due to the GIL, multithreading is very limited in high concurrency scenario. Even in the gevent’s implementation of thread pool, the issue is a big pain. Thus multiprocessing is encouraged in (C)Python. This post can not cover all the aspects of multiprocessing in Python, but I hope it can help you understand the concurrency in Python.</p>

<h3 id="reference">Reference</h3>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Operating Systems: Internals and Design Principles, 5th edition, by William Stalling<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Linux System Programming, 2nd edition, by Robert Love<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>The Linux Programming Interface, by Michael Kerrisk<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dump PTE With SystemTap]]></title>
    <link href="http://bluesalt.github.io/blog/2015/04/05/dump-pte-with-systemtap/"/>
    <updated>2015-04-05T14:41:47+08:00</updated>
    <id>http://bluesalt.github.io/blog/2015/04/05/dump-pte-with-systemtap</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#systemtap-script">SystemTap Script</a></li>
  <li><a href="#code-comments">Code Comments</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
  <li><a href="#further-reading">Further Reading</a></li>
</ul>

<p>In my <a href="http://blog.jeffli.me/blog/2014/11/08/pagemap-interface-of-linux-explained/">last blog post</a>, we explored the pagemap interface in Linux which is an interface that exposes some kernel information about the memory management. As I mentioned in that post, the pagemap interface does not expose the raw pte content. Since PTEs are allocated in the kernel space, it is impossible to explore the PTEs from user space applications. To access the kernel space memory, a traditional way is writing a kernel module which, I believe, is of course kind of tedious.</p>

<p>In this article, we’ll see how to leverage SystemTap infrastructure to dump the PTE for the page where an given virtual address of a process lives in. 
<!--more-->
Of course, SystemTap scripts will be translated into kernel module finally, however, compared with writing kernel modules, writing SystemTap scripts is more convenient. This article is intended to show how to leverage SystemTap to explore the world of Linux kernel. So it will not cover topics like memory management in x86. Actually, I plan to write an article to talk about the evolution of memory management from i386 to x86_64. But I am not sure when will that be started. </p>

<h2 id="systemtap-script">SystemTap Script</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">function</span> <span class="n">find_pte</span><span class="o">:</span><span class="kt">long</span> <span class="p">(</span><span class="n">mm</span><span class="p">,</span> <span class="n">addr</span><span class="p">)</span> <span class="o">%</span><span class="p">{</span>
</span><span class="line">  <span class="n">pgd_t</span> <span class="o">*</span><span class="n">pgd</span><span class="p">;</span>
</span><span class="line">  <span class="n">pte_t</span> <span class="o">*</span><span class="n">pte</span><span class="p">;</span>
</span><span class="line">  <span class="n">pud_t</span> <span class="o">*</span><span class="n">pud</span><span class="p">;</span>
</span><span class="line">  <span class="n">pmd_t</span> <span class="o">*</span><span class="n">pmd</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="kt">long</span> <span class="n">address</span> <span class="o">=</span> <span class="n">STAP_ARG_addr</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">struct</span> <span class="n">page</span><span class="o">*</span> <span class="n">page</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">  <span class="k">struct</span> <span class="n">mm_struct</span> <span class="o">*</span><span class="n">mm</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">mm_struct</span><span class="o">*</span><span class="p">)</span><span class="n">STAP_ARG_mm</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="n">pgd</span> <span class="o">=</span> <span class="n">pgd_offset</span><span class="p">(</span><span class="n">mm</span><span class="p">,</span> <span class="n">address</span><span class="p">);</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="n">pgd_none</span><span class="p">(</span><span class="o">*</span><span class="n">pgd</span><span class="p">)</span> <span class="o">||</span> <span class="n">pgd_bad</span><span class="p">(</span><span class="o">*</span><span class="n">pgd</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">    <span class="n">_stp_printf</span><span class="p">(</span><span class="s">&quot;bad pgd&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">STAP_RETURN</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="n">pud</span> <span class="o">=</span> <span class="n">pud_offset</span><span class="p">(</span><span class="n">pgd</span><span class="p">,</span> <span class="n">address</span><span class="p">);</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="n">pud_none</span><span class="p">(</span><span class="o">*</span><span class="n">pud</span><span class="p">)</span> <span class="o">||</span> <span class="n">pud_bad</span><span class="p">(</span><span class="o">*</span><span class="n">pud</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">    <span class="n">_stp_printf</span><span class="p">(</span><span class="s">&quot;bad pud</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">STAP_RETURN</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="n">pmd</span> <span class="o">=</span> <span class="n">pmd_offset</span><span class="p">(</span><span class="n">pud</span><span class="p">,</span> <span class="n">address</span><span class="p">);</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="n">pmd_none</span><span class="p">(</span><span class="o">*</span><span class="n">pmd</span><span class="p">)</span> <span class="o">||</span> <span class="n">pmd_bad</span><span class="p">(</span><span class="o">*</span><span class="n">pmd</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">    <span class="n">_stp_printf</span><span class="p">(</span><span class="s">&quot;bad pmd</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">STAP_RETURN</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="n">pte</span> <span class="o">=</span> <span class="n">pte_offset_map</span><span class="p">(</span><span class="n">pmd</span><span class="p">,</span> <span class="n">address</span><span class="p">);</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">pte</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">_stp_printf</span><span class="p">(</span><span class="s">&quot;bad pte</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">STAP_RETURN</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="n">STAP_RETURN</span><span class="p">(</span><span class="n">pte</span><span class="o">-&gt;</span><span class="n">pte</span><span class="p">);</span>
</span><span class="line"><span class="o">%</span><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">probe</span> <span class="n">begin</span> <span class="p">{</span>
</span><span class="line">  <span class="n">process_pid</span> <span class="o">=</span> <span class="n">target</span><span class="p">()</span>
</span><span class="line">  <span class="n">pt</span> <span class="o">=</span> <span class="n">pid2task</span><span class="p">(</span><span class="n">process_pid</span><span class="p">)</span>
</span><span class="line">  <span class="n">mm</span> <span class="o">=</span> <span class="err">@</span><span class="n">cast</span><span class="p">(</span><span class="n">pt</span><span class="p">,</span> <span class="s">&quot;task_struct&quot;</span><span class="p">,</span> <span class="s">&quot;kernel&lt;linux/sched.h&gt;&quot;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">mm</span>
</span><span class="line">
</span><span class="line">  <span class="n">pte</span> <span class="o">=</span> <span class="n">find_pte</span><span class="p">(</span><span class="n">mm</span><span class="p">,</span> <span class="err">$</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;pte: %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pte</span><span class="p">)</span>
</span><span class="line">  <span class="n">exit</span><span class="p">()</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Save the code as <code>dump_pte.stp</code> and run it with the following command: <code>sudo stap -g dump_pte.stp -x PID VIRTUAL_ADDRESS</code>. The <code>-g</code> option is required since C code is embedded in the script. </p>

<p>Note, this script only work in x86-64 and can’t work in 32 bit x86. Though there is a fix, I don’t want to post it here because I have not figured out how it works in 32 bit platform.</p>

<h2 id="code-comments">Code Comments</h2>
<p>This section will give a short explanation on how this System script work.</p>

<ul>
  <li>Line 41 get the task struct of the target process. pid2task is an built function to get task struct from pid</li>
  <li>Line 42 get the <a href="http://lxr.linux.no/linux+v3.13/include/linux/sched.h#L1103">mm field</a> of task struct. You should be familiar with the data structures used by kernel to manage process.</li>
  <li>Line 1-37 is the function definition to read the PTE. It should be note that although declared as a SystemTap function, the whole function body is actually C code. SystemTap allows embedding C code in the script.</li>
  <li>Line 7 and Line 10 shows how to convert SystemTap function argument to C variable with the <code>STAP_ARG_</code> macro.</li>
  <li>Line 14 shows how to print variable to standard console with the method <code>_stp_printf</code>. Note this function is not recommended.</li>
  <li>Line 15 shows how to return value in embedded C code. You can’t use return but the <code>STAP_RETURN</code> macro.</li>
  <li>Line 12, Line 18, Line 24 and Line 30 describe the translation from linear address to physical address. As we know, Linux uses 4 level page table in x86_64 architecture, the code reflects the page table organisation.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>SystemTap is not designed to inspect the kernel space memory. Instead, the primary usage is monitoring events happening in kernel world. In spite of that, we can leverage the tool to explore the Linux kernel world, learn the design of kernel. For example, we can observe the PTEs to verify the behaviour of COW mechanism. There will be another post shows how to observe the COW in Linux by using the script we talk in this article.</p>

<p>Allowing embedded C code in script makes writing SystemTap script very flexible. However, it also requires the users know some data structures of Linux kernel well. Sometimes, it is insufficient and more knowledge is required. For example, in the dump_pte script, users must know how to travel the page table.</p>

<h2 id="further-reading">Further Reading</h2>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/X86-64">x86-64</a> : Article of x86-64 in wikipedia, very good introduction on x86-64 memory.</li>
  <li><a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html">x86 developer manual</a>: The definitive guide about x86 architecture.  Section 4.4.2 gives the detail of address translation including the PTE structure.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pagemap Interface of Linux Explained]]></title>
    <link href="http://bluesalt.github.io/blog/2014/11/08/pagemap-interface-of-linux-explained/"/>
    <updated>2014-11-08T08:40:24+08:00</updated>
    <id>http://bluesalt.github.io/blog/2014/11/08/pagemap-interface-of-linux-explained</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#pagemap-interface-explained">Pagemap Interface Explained</a>    <ul>
      <li><a href="#procpidpagemap">/proc/${pid}/pagemap</a></li>
      <li><a href="#prockpagecount">/proc/kpagecount</a></li>
      <li><a href="#prockpageflags">/proc/kpageflags</a></li>
    </ul>
  </li>
  <li><a href="#parse-the-pagemap-interface">Parse the Pagemap Interface</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
  <li><a href="#further-reading">Further Reading</a></li>
</ul>

<p>As we know, Linux supports virtual memory. Actually, almost all modern general operating systems such as Solaris, Windows, Mac OS X support virtual memory. Every user space process in Linux has its own virtual address space. The virtual address will be translated to physical address by operating system finally. In fact, most CPU architectures such as x86 and arm provide hardware support for virtual to physical address translation with MMU. In that case, the translation is done by the cooperation of operating system(software) and CPU(hardware). In this post, I am trying to explain the pagemap interface which is used to explore the mapping information of physical memory.</p>

<!--more-->

<p>I assume you are familiar with the basic memory management principles. At least you must know</p>

<ul>
  <li>Terminologies like virtual page, page frame, page size</li>
  <li>How to locate an address within a page</li>
  <li>Basic administration knowledge of Linux such as proc file system</li>
  <li>Know how to figure out virtual addresses that are interesting to you of a process in the proc file system or with tools such as GDB and readelf </li>
</ul>

<h2 id="pagemap-interface-explained">Pagemap Interface Explained</h2>
<p>Managing hardware is one of the operating system’s main responsibilitiles. OS kernel needs some data structures to manage the physical memory. Since those data structures lives in kernel space, they can’t be accessed from the user space directly. The pagemap interface which has been introduced since 2.6.25 allows page tables and related information to be examined from user space. The information is exposed as virtual files living in proc file system:</p>

<ul>
  <li>/proc/$(pid}/pagemap</li>
  <li>/proc/kpagecount</li>
  <li>/proc/kpageflags</li>
</ul>

<p>Let’s start to explore these files now.</p>

<h3 id="procpidpagemap">/proc/${pid}/pagemap</h3>
<p>This file contains the map information between virtual pages and physical pages of a process. The mapping information between a virtual page and physical page is represented as a 64-bit long entry. The file is a virtual file which means that it does not exist in the disk. Even so, you can imagine that it consists of many 64-bit long records each of which contains the physical page frame number of a virtual memory page and some other attributes. For example, record 0, 1, 2  are for the first, second and third virtual page respectively. In other words, the records are indexed by the virtual page number.
<span class="caption-wrapper left"><img class="caption" src="http://bluesalt.github.io/images/pagemap.png" width="500" height="250" alt="Fig-1: Format of Pagemap Entry" title="Fig-1: Format of Pagemap Entry" /><span class="caption-text">Fig-1: Format of Pagemap Entry</span></span>
Fig-1 is the format of pagemap entries. Please refer to the <a href="https://www.kernel.org/doc/Documentation/vm/pagemap.txt">design doc</a> of the pagemap interface to see the detail of the format. It should be noted that the entry’s content represent different information when page is present and swapped out.</p>

<h3 id="prockpagecount">/proc/kpagecount</h3>
<p>In linux, it is possible (and likely!) that a physical page is mapped to different virtual pages of different process. This kpagecount file contains the reference number of physical pages. It is also a virtual file in which each physical frame’s reference count is represent as a 64-bit integer and indexed by the physical frame number. For example, if you want to find second physical frame’s reference count, you can just need to simply read byte 8 to byte 15 of the kpagecount file. </p>

<h3 id="prockpageflags">/proc/kpageflags</h3>
<p>This virtual file contains the flags of physical frames. The flags of each page frame are present in a 64-bit long entry which is also indexed by the physical frame number. That means it is accessed in the same way as the kpagecount file. Each bit in the entry present a flag. I won’t explore every flags here because they are explained clearly in the <a href="https://www.kernel.org/doc/Documentation/vm/pagemap.txt">design doc</a>. Even the entry is 64-bit long, only 23 bit are used so far. </p>

<h2 id="parse-the-pagemap-interface">Parse the Pagemap Interface</h2>
<p>Following is a Python script to parse the files of pagemap interface. It accepts 2 arguments, one is the process’ pid and the other is the virtual address. Remember to append the <code>0x</code> prefix if you want to pass a hexadecimal address.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/python</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">binascii</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">struct</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">read_entry</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">8</span><span class="p">):</span>
</span><span class="line">  <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">    <span class="n">f</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="n">offset</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">&#39;Q&#39;</span><span class="p">,</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">size</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="c"># Read /proc/$PID/pagemap</span>
</span><span class="line"><span class="k">def</span> <span class="nf">get_pagemap_entry</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span> <span class="n">addr</span><span class="p">):</span>
</span><span class="line">  <span class="n">maps_path</span> <span class="o">=</span> <span class="s">&quot;/proc/{0}/pagemap&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">pid</span><span class="p">)</span>
</span><span class="line">  <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isfile</span><span class="p">(</span><span class="n">maps_path</span><span class="p">):</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;Process {0} doesn&#39;t exist.&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">pid</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span>
</span><span class="line">
</span><span class="line">  <span class="n">page_size</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">sysconf</span><span class="p">(</span><span class="s">&quot;SC_PAGE_SIZE&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="n">pagemap_entry_size</span> <span class="o">=</span> <span class="mi">8</span>
</span><span class="line">  <span class="n">offset</span>  <span class="o">=</span> <span class="p">(</span><span class="n">addr</span> <span class="o">/</span> <span class="n">page_size</span><span class="p">)</span> <span class="o">*</span> <span class="n">pagemap_entry_size</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="n">read_entry</span><span class="p">(</span><span class="n">maps_path</span><span class="p">,</span> <span class="n">offset</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">get_pfn</span><span class="p">(</span><span class="n">entry</span><span class="p">):</span>
</span><span class="line">  <span class="k">return</span> <span class="n">entry</span> <span class="o">&amp;</span> <span class="mh">0x7FFFFFFFFFFFFF</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">is_present</span><span class="p">(</span><span class="n">entry</span><span class="p">):</span>
</span><span class="line">  <span class="k">return</span> <span class="p">((</span><span class="n">entry</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">63</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">is_file_page</span><span class="p">(</span><span class="n">entry</span><span class="p">):</span>
</span><span class="line">  <span class="k">return</span> <span class="p">((</span><span class="n">entry</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">61</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="c">##########################################################</span>
</span><span class="line">
</span><span class="line"><span class="c"># Read /proc/kpagecount</span>
</span><span class="line"><span class="k">def</span> <span class="nf">get_pagecount</span><span class="p">(</span><span class="n">pfn</span><span class="p">):</span>
</span><span class="line">  <span class="n">file_path</span> <span class="o">=</span> <span class="s">&quot;/proc/kpagecount&quot;</span>
</span><span class="line">  <span class="n">offset</span> <span class="o">=</span> <span class="n">pfn</span> <span class="o">*</span> <span class="mi">8</span>
</span><span class="line">  <span class="k">return</span> <span class="n">read_entry</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">offset</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">##########################################################</span>
</span><span class="line">
</span><span class="line"><span class="c"># Read /proc/kpageflags</span>
</span><span class="line"><span class="k">def</span> <span class="nf">get_page_flags</span><span class="p">(</span><span class="n">pfn</span><span class="p">):</span>
</span><span class="line">  <span class="n">file_path</span> <span class="o">=</span> <span class="s">&quot;/proc/kpageflags&quot;</span>
</span><span class="line">  <span class="n">offset</span> <span class="o">=</span> <span class="n">pfn</span> <span class="o">*</span> <span class="mi">8</span>
</span><span class="line">  <span class="k">return</span> <span class="n">read_entry</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">offset</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class="line">  <span class="n">pid</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">  <span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&quot;0x&quot;</span><span class="p">):</span>
</span><span class="line">    <span class="n">addr</span> <span class="o">=</span> <span class="nb">long</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">base</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</span><span class="line">  <span class="k">else</span><span class="p">:</span>
</span><span class="line">    <span class="n">addr</span> <span class="o">=</span> <span class="nb">long</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span><span class="line">
</span><span class="line">  <span class="n">entry</span> <span class="o">=</span> <span class="n">get_pagemap_entry</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span> <span class="n">addr</span><span class="p">)</span>
</span><span class="line">  <span class="n">pfn</span> <span class="o">=</span> <span class="n">get_pfn</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
</span><span class="line">  <span class="k">print</span> <span class="s">&quot;PFN: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">pfn</span><span class="p">))</span>
</span><span class="line">  <span class="k">print</span> <span class="s">&quot;Is Present? : {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">is_present</span><span class="p">(</span><span class="n">entry</span><span class="p">))</span>
</span><span class="line">  <span class="k">print</span> <span class="s">&quot;Is file-page: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">is_file_page</span><span class="p">(</span><span class="n">entry</span><span class="p">))</span>
</span><span class="line">  <span class="k">print</span> <span class="s">&quot;Page count: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">get_pagecount</span><span class="p">(</span><span class="n">pfn</span><span class="p">))</span>
</span><span class="line">  <span class="k">print</span> <span class="s">&quot;Page flags: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">get_page_flags</span><span class="p">(</span><span class="n">pfn</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Save the script as v2pfn.py. Usage:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo ./v2pfn <span class="nv">$PID</span> <span class="nv">$ADDRESS</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Of course, this script does not cover everything of the pagemap interface. What I want to show here is how to read the information of a physical frame from the interface. It is very to extend if you want to parse other flags. </p>

<h2 id="conclusion">Conclusion</h2>
<p>Pagemap interface is a quite simple tool to learn more about how Linux manage the physical memory. Hope this post can be helpful to understanding it. However, pagemap interface does <strong>NOT</strong> expose the origin PTE entry. This is kind of pity because PTE is very helpful to understand how virtual addresses are translated to physical address by CPU. In next post, I will show you how to inspect the raw PTE entry with SystemTap. Stay tuned.</p>

<h2 id="further-reading">Further Reading</h2>

<ul>
  <li><a href="https://www.kernel.org/doc/Documentation/vm/pagemap.txt">design doc</a>: The design doc of the pagemap. Besides explaining the interface, it also give some examples to use the interface. </li>
  <li><a href="http://lxr.linux.no/#linux+v3.17.3/tools/vm/page-types.c">page-type tool</a> A pagemap interface explore tool shipped with the linux kernel. It need to be compiled before you use it.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install SystemTap in Ubuntu 14.04]]></title>
    <link href="http://bluesalt.github.io/blog/2014/10/10/install-systemtap-in-ubuntu-14-dot-04/"/>
    <updated>2014-10-10T20:07:09+08:00</updated>
    <id>http://bluesalt.github.io/blog/2014/10/10/install-systemtap-in-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#install-systemtap">Install SystemTap</a></li>
  <li><a href="#install-debug-file">Install debug file</a></li>
  <li><a href="#troubleshooting">Troubleshooting</a>    <ul>
      <li><a href="#build-directory-not-found">build directory not found</a></li>
      <li><a href="#disktopstp-does-not-work">disktop.stp does not work</a></li>
      <li><a href="#pass-4-compile-error">pass 4 compile error</a></li>
    </ul>
  </li>
  <li><a href="#further-reading">Further Reading</a></li>
</ul>

<p>About 2 months ago, I happened to read a book about how to learn OS principles by hands-on experience on Solaris with MDB and DTrace. After reading the chapters about memory management, I was totally impressed by MDB and DTrace. They acts like a microscope to help you look into the kernel. For example, you can walk through the data structures used by Solaris kernel to manage the process. You can even observe the memory related data structures and emulate the translation between virtual address and physical address manually. Then I became curious about if Linux has similar tools because I am pretty sure that it will be very helpful to understand the design and implementation of Linux kernel. </p>

<!--more-->

<p>Since I have heard about SystemTap before, so after googling “systemtap ubuntu”, I found several articles about how to install SystemTap in Ubuntu. However, those are kind of outdated even the one posted in the SystemTap’s homepage. For example,  some complicated steps are not needed anymore while some are not applicable when working with latest kernel. So I decided to write down this experience. The environment is a Ubuntu 14.04(trust) box running in DigitalOcean with 3.13.0-36-generic kernel image.</p>

<h3 id="install-systemtap">Install SystemTap</h3>
<p>SystemTap 2.3 is available in the apt source thus it can be installed simply with <code>apt-get</code>. Gcc is also required since the SystemTap script will be translated into C source code which will be compiled as kernel module finally.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo apt-get install systemtap
</span><span class="line">sudo apt-get install gcc
</span><span class="line">sudo apt-get install linux-headers-<span class="k">$(</span>uname -r<span class="k">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Test the installation with the HelloWorld example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo stap -e <span class="s1">&#39;probe begin { printf(&quot;Hello, World!\n&quot;); exit() }&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You should see <code>Hello, World!</code> is emitted in the console.</p>

<h3 id="install-debug-file">Install debug file</h3>
<p>SystemTap is a powerful trace tool. Let’s see another example which will print <code>hello world</code> to the console when the system call <code>sys_call</code> is called.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo stap -e <span class="s1">&#39;probe kernel.function(&quot;sys_open&quot;) {log(&quot;hello world&quot;) exit()}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It is likely to end with the error information:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">semantic error: <span class="k">while </span>resolving probe point: identifier <span class="s1">&#39;kernel&#39;</span> at &lt;input&gt;:1:7
</span><span class="line">        <span class="nb">source</span>: probe kernel.function<span class="o">(</span><span class="s2">&quot;sys_open&quot;</span><span class="o">)</span> <span class="o">{</span>log<span class="o">(</span><span class="s2">&quot;hello world&quot;</span><span class="o">)</span> <span class="nb">exit</span><span class="o">()}</span>
</span><span class="line">                      ^
</span><span class="line">
</span><span class="line">semantic error: missing x86_64 kernel/module debuginfo <span class="o">[</span>man warning::debuginfo<span class="o">]</span> under <span class="s1">&#39;/lib/modules/3.13.0-36-generic/build&#39;</span>
</span><span class="line">Pass 2: analysis failed.  <span class="o">[</span>man error::pass2<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The debug symbols are required to solve this problem. You can following the instruction in the <a href="https://wiki.ubuntu.com/Kernel/Systemtap#Where_to_get_debug_symbols_for_kernel_X.3F">Ubuntu Wiki</a>.</p>

<p>You can also install the symbols manually if you failed by following above instructions.  Goto <a href="http://ddebs.ubuntu.com/pool/main/l/linux/">ddeb</a> and find a symbol file matched your kernel. If you are not able to find a matched symbol file, I suggest you upgrade your linux kernel or you will have to build it by yourself.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">wget http://ddebs.ubuntu.com/pool/main/l/linux/linux-image-3.13.0-36-generic-dbgsym_3.13.0-36.63_amd64.ddeb
</span><span class="line">sudo dpkg -i  linux-image-3.13.0-36-generic-dbgsym_3.13.0-36.63_amd64.ddeb
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="troubleshooting">Troubleshooting</h3>

<h4 id="build-directory-not-found">build directory not found</h4>

<p>Error Information:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Checking <span class="s2">&quot;/lib/modules/3.13.0-36-generic/build/.config&quot;</span> failed with error: No such file or directory
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>/lib/modules/3.13.0-36-generic/build</code> is actually a soft link to the linux header files directory. This error is not supposed to appear because when you install the headers by <code>sudo apt-get install linux-headers-$(uname -r)</code>, the soft link will be created automatically. But if you are as unlucky as me, please install the linux headers and make sure the <code>build</code> links to <code>/usr/src/linux-headers-3.13.0-36-generic/</code>.</p>

<h4 id="disktopstp-does-not-work">disktop.stp does not work</h4>
<p>SystemTap is also shipped with some <a href="https://sourceware.org/systemtap/examples/">examples</a>. <code>disktop.top</code> is a SystemTap script used to get the status of reading/writing. If you use the SystemTap provided by the apt software repository, the following error is likely to occur.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">/tmp/stapvSQlYC/stap_46806491689887ce5beb12ed5b6f2994_27689_src.c: In <span class="k">function</span> ‘function_uid’:
</span><span class="line">/tmp/stapvSQlYC/stap_46806491689887ce5beb12ed5b6f2994_27689_src.c:3459:16: error: incompatible types when assigning to <span class="nb">type</span> ‘int64_t’ from <span class="nb">type</span> ‘kuid_t’
</span><span class="line">  <span class="nv">STAP_RETVALUE</span> <span class="o">=</span> current_uid<span class="o">()</span>;
</span><span class="line">                ^
</span><span class="line">make<span class="o">[</span>1<span class="o">]</span>: *** <span class="o">[</span>/tmp/stapvSQlYC/stap_46806491689887ce5beb12ed5b6f2994_27689_src.o<span class="o">]</span> Error 1
</span><span class="line">make: *** <span class="o">[</span>_module_/tmp/stapvSQlYC<span class="o">]</span> Error 2
</span><span class="line">WARNING: kbuild exited with status: 2
</span><span class="line">Pass 4: compilation failed.  <span class="o">[</span>man error::pass4<span class="o">]</span>
</span><span class="line">Tip: /usr/share/doc/systemtap/README.Debian should <span class="nb">help </span>you get started.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is probably a <a href="https://bugs.launchpad.net/ubuntu/+source/systemtap/+bug/1286865">bug</a>. One way to fix it is building SystemTap from source. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo apt-get remove systemtap
</span><span class="line">wget https://fedorahosted.org/releases/e/l/elfutils/0.160/elfutils-0.160.tar.bz2
</span><span class="line">wget https://sourceware.org/systemtap/ftp/releases/systemtap-2.5.tar.gz
</span><span class="line">tar jxf elfutils-0.160.tar.bz2
</span><span class="line">tar zxf systemtap-2.5.tar.gz
</span><span class="line"><span class="nb">cd </span>systemtap-2.5
</span><span class="line">./configure --with-elfutils<span class="o">=</span>../elfutils-0.160
</span><span class="line">make
</span><span class="line">sudo make install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="pass-4-compile-error">pass 4 compile error</h4>
<p>This is the most weird issue I have met. Almost all the examples can’t work and SystemTap keeps complaing <code>pass 4: compilation failed. [man error::pass4]</code>. That means the SystemTap script can be translated into C source code which can also be compile as a kernel module. However, it fails to load the kernel module. After downgrading the kernel from 3.13.0-36 to 3.13.0-32, I found ever thing is ok. After I switched back to 3.13.0-36, however, nothing is wrong. If you meet similar issue, try to clean the symbols file, linux headers and switch to other kernel version with matched debug symbol files and linux headers.</p>

<h3 id="further-reading">Further Reading</h3>
<ol>
  <li>
    <p><a href="http://www.opensourceforu.com/2011/12/getting-started-with-systemtap/">Getting Started with SystemTap</a>: A introduction with simple examples. It is simple and thus good for beginners.</p>
  </li>
  <li>
    <p><a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/SystemTap_Beginners_Guide/">SystemTap Beginners Guid</a>: SystemTap guide from Red Hat planned for beginners </p>
  </li>
  <li>
    <p><a href="https://sourceware.org/systemtap/wiki/SystemTapOnCentOS">SystemTap on CentOS</a>: Detail how to install SystemTap in CentOS. I followed the step on a CentOS 6.5 box. The whole process was very smooth. Every thing is fine including the disktop example.</p>
  </li>
  <li>
    <p><a href="https://sourceware.org/systemtap/examples/">SystemTap examples</a>: Examples from SystemTap’s homepage</p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use GDB to Understand FUSE File System]]></title>
    <link href="http://bluesalt.github.io/blog/2014/08/30/use-gdb-to-understand-fuse-file-system/"/>
    <updated>2014-08-30T10:17:46+08:00</updated>
    <id>http://bluesalt.github.io/blog/2014/08/30/use-gdb-to-understand-fuse-file-system</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction-to-fuse">Introduction to FUSE</a></li>
  <li><a href="#how-does-fuse-work">How does FUSE work</a></li>
  <li><a href="#use-gdb-with-fuse">Use GDB with FUSE</a></li>
  <li><a href="#trouble-shooting">Trouble Shooting</a></li>
  <li><a href="#further-read">Further Read</a></li>
</ul>

<p>During the past years, I have been involved in several storage related projects from which I have learned a lot about the world of storage. Definitely the journey is interesting. However, it is not awesome because almost all the work I have been involved is about applications of storage. Then I decided to dig more deeper in the storage world. It turned out that it is really wonderful to explore in the world of storage. </p>

<p>Actually I have heard about FUSE before but did not spend time to explore it because I thought FUSE would bring a lot of overhead and hence won’t get too much application in system design. During the past months, I have seen the implementations of a few storage solutions, both open source and commercial ones. To my surprise, FUSE is used in those solutions. It is time to get acquainted with it. Per my experience, debugging is the very very useful way to learn a new technology. In this post, I will show how to use GDB to debug the hello example. You can set break points, use single step execution to observe the behavior of the FUSE application. 
<!--more-->
<strong>CLAIM</strong>: I am not an expert on GDB or FUSE and I can’t guarantee that it is practical in debugging your real world solution.</p>

<h2 id="introduction-to-fuse">Introduction to FUSE</h2>
<p>From the OS course in undergraduate school, your are told that file system is part of the kernel and it is almost true in the real world. That means typically if you want to create your own file system in a real world OS such as Linux, you have to program at the <strong>kernel space</strong>. However you can create your own file system totally in <strong>user space</strong> with the help of FUSE: Filesystem in Userspace. What is the difference? Well, there is much more restriction in kernel space programming than user space. For example, no call to third parties library such as glibc, limited recursive depth. Since Linux kernel is monolithic, a crashed kernel space program(kernel module) could make the whole OS crash too.</p>

<p>There is a simple hello file system from the homepage of the FUSE project.
Use following command lines to test the hello file system. I tested it in a Ubuntu 14.04 x86_64 box.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gcc -Wall hello.c `pkg-config fuse --cflags --libs` -o hello
</span><span class="line">mkdir /tmp/fuse
</span><span class="line">./hello /tmp/fuse</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If every thing is all right, you should see following result:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">jeff@trusty:~$ ls -l /tmp/fuse
</span><span class="line">total 0
</span><span class="line">-r--r--r-- 1 root root 13 Jan  1  1970 hello
</span><span class="line">jeff@trusty:~$ cat /tmp/fuse/hello
</span><span class="line">Hello World!</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="how-does-fuse-work">How does FUSE work</h2>
<p><span class="caption-wrapper"><img class="caption" src="http://bluesalt.github.io/images/fuse.png" width="" height="" alt="Fig-1: Workflow of FUSE" title="Fig-1: Workflow of FUSE" /><span class="caption-text">Fig-1: Workflow of FUSE</span></span></p>

<p>Fig-1 is the workflow of FUSE fetched from the homepage of the FUSE project. The remaining in this section will try to explain the process.</p>

<ol>
  <li>Just like EXT4, EXT3, the hello file system much be mounted before it can be used. The command <code>./hello /tmp/fuse</code> will mount it. It should be noted that this <code>hello</code> command will not only mount the hello FS, but also <strong>running as a daemon</strong> in the background. This is very important to understand the whole work process. Now you can verify whether the fs is mounted or not by issuing <code>mount</code> in the command line. </li>
  <li>Users  issue the command <code>ls -l /tmp/fuse</code> </li>
  <li>The <code>ls</code> program will call functions lived in glibc </li>
  <li>The glibc fucntions called in step 2 will send the requests to the kernel’s VFS subsystem with sys calls. </li>
  <li>The VFS sub system will call FUSE module lived in the kernel like it does when dealing with other file systems such as NFS, EXT4. Util now, the workflow is the same with any other FS.</li>
  <li>Unlike other FSes, the FUSE module in kernel will now call the the hello daemon created in Step 1.</li>
  <li>The hello daemon then sends the result back to the FUSE kernel module</li>
  <li>The rest work is the same with other FSes. The result will be passed in the path: FUSE kernel module -&gt; VFS -&gt; glibc -&gt; ls command</li>
</ol>

<p>With the explanation above, you should understand the overall process. So the FUSE is actually a framework which lives in the kernel space like other file systems. A FUSE file system must be built under that framework.</p>

<p>Next let’s look more deeper. The GDB will be leveraged to track the detail of function calls in next section. BTW, I have not figured out how the FUSE kernel module communicates with the hello daemon living in the user space yet.</p>

<h2 id="use-gdb-with-fuse">Use GDB with FUSE</h2>
<p>Since the hello daemon runs in the user space, we can attach it to the GDB like other user space applications. But before that we should make some extra preparations.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">gcc -Wall -g hello.c <span class="sb">`</span>pkg-config fuse --cflags --libs<span class="sb">`</span> -o hello <span class="c"># Compile with debug symbols flag</span>
</span><span class="line">./hello /tmp/fuse -s <span class="c"># Run the daemon in single thread mode</span>
</span><span class="line">ps -ef | grep hello <span class="c"># Search the pid of the hello daemon</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now it is ready to enter the gdb by issue <code>gdb64</code> in the command line. Attach the process to the gdb by <code>attach PID_OF_THE_HELLO_DAMONE</code>. Since we want to track which functions are called when the command <code>ls -l /tmp/fuse</code> is issued, we should set breakpoints for the 4 functions, namely <code>hello_open, hello_getattr, hello_readdir, hello_read</code> with following gdb commands.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break </span>hello_getattr
</span><span class="line">Breakpoint 1 at 0x40076d: file hello.c, line 24.
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break </span>hello_readdir
</span><span class="line">Breakpoint 2 at 0x40082d: file hello.c, line 46.
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break </span>hello_open
</span><span class="line">Breakpoint 3 at 0x4008b1: file hello.c, line 58.
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">break </span>hello_read
</span><span class="line">Breakpoint 4 at 0x400909: file hello.c, line 72.
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> <span class="k">continue</span>
</span><span class="line">Continuing.
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Now the gdb should be in listen on the daemon. When a break point is hit, it will stop the daemon process immediately. Let’s open a new shell windows and issue the command <code>ls -l /tmp/fuse</code>. <strong>DO NOT use tab-complete feature when entering the command</strong>. Or the behavior it will be a little confusing though it could be still reasoning. Let’s check the first break point.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">(</span>gdb<span class="o">)</span> <span class="k">continue</span>
</span><span class="line">Continuing.
</span><span class="line">
</span><span class="line">Breakpoint 1, hello_getattr <span class="o">(</span><span class="nv">path</span><span class="o">=</span>0x6d5100 <span class="s2">&quot;/&quot;</span>, <span class="nv">stbuf</span><span class="o">=</span>0x7fff92c71080<span class="o">)</span> at hello.c:24
</span><span class="line">24		int <span class="nv">res</span> <span class="o">=</span> 0;
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>From the output, we can see that the command will first get the attributes of the  hello file system’s root director, namely <code>/tmp/fuse</code> mount point. Enter <code>continue</code> to resume the daemon process.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Breakpoint 2, hello_readdir <span class="o">(</span><span class="nv">path</span><span class="o">=</span>0x6f5940 <span class="s2">&quot;/&quot;</span>, <span class="nv">buf</span><span class="o">=</span>0x6d5100, <span class="nv">filler</span><span class="o">=</span>0x7f27f8e8e220, <span class="nv">offset</span><span class="o">=</span>0, <span class="k">fi</span><span class="o">=</span>0x7fff92c710e0<span class="o">)</span> at hello.c:46
</span><span class="line">46		<span class="k">if</span> <span class="o">(</span>strcmp<span class="o">(</span>path, <span class="s2">&quot;/&quot;</span><span class="o">)</span> !<span class="o">=</span> 0<span class="o">)</span>
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> <span class="k">continue</span>
</span><span class="line">Continuing.
</span><span class="line">
</span><span class="line">Breakpoint 1, hello_getattr <span class="o">(</span><span class="nv">path</span><span class="o">=</span>0x6f5940 <span class="s2">&quot;/hello&quot;</span>, <span class="nv">stbuf</span><span class="o">=</span>0x7fff92c710b0<span class="o">)</span> at hello.c:24
</span><span class="line">24		int <span class="nv">res</span> <span class="o">=</span> 0;
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> <span class="k">continue</span>
</span><span class="line">Continuing.
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>When can see all the rest function calls for the <code>ls</code> command from the above output which is quite self-explanatory. You can also use similar way to track the function calls when the command <code>cat /tmp/fuse/hello</code> is issued. </p>

<p>Hope this posts helps you understand how FUSE works!</p>

<h2 id="trouble-shooting">Trouble Shooting</h2>
<ul>
  <li>Fail to attach the daemon process in GDB. The error looks like this:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">(</span>gdb<span class="o">)</span> attach 13387
</span><span class="line">Attaching to process 13387
</span><span class="line"><span class="s2">&quot;/home/jeff/workspace/fuse/hello&quot;</span>: not in executable format: File format not recognized
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>This is because the hello executable file is a 64 bit binary but the gdb is 32 bit. Use the 64-bit GDB <code>gdb64</code>.</p>

<ul>
  <li>Fail to link the executable file with error:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">/tmp/ccIMWTZv.o: In <span class="k">function</span> <span class="sb">`</span>main<span class="s1">&#39;:</span>
</span><span class="line"><span class="s1">hello.c:(.text+0x268): undefined reference to `fuse_main_real&#39;</span>
</span><span class="line">collect2: error: ld returned 1 <span class="nb">exit </span>status
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>This is a silly problem. Make sure you use the the correct command</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">gcc -Wall hello.c <span class="sb">`</span>pkg-config fuse --cflags --libs<span class="sb">`</span> -o hello <span class="c"># work</span>
</span><span class="line">gcc -Wall <span class="sb">`</span>pkg-config fuse --cflags --libs<span class="sb">`</span> hello.c -o hello <span class="c"># can&#39;t work</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="further-read">Further Read</h2>
<ol>
  <li><a href="http://osxfuse.github.io/">FUSE for OS X</a> : FUSE like framework in Mac OS X</li>
  <li><a href="http://www.3c2controller.net/project/truetrue/solaris10/fuse/fuse-opensolaris.pdf">Fuse on Solaris</a>: Fuse on OpenSolaris</li>
  <li><a href="opendedup.org">Opendedup</a>: A deduplication solution built with FUSE</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avro Cookbook : Part III]]></title>
    <link href="http://bluesalt.github.io/blog/2014/04/08/avro-cookbook-part-iii/"/>
    <updated>2014-04-08T17:24:45+08:00</updated>
    <id>http://bluesalt.github.io/blog/2014/04/08/avro-cookbook-part-iii</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#recipe-6-serialize-data-as-json-data">Recipe 6: Serialize data as JSON data</a></li>
  <li><a href="#recipe-7-deserialize-json-data">Recipe 7: Deserialize JSON data</a></li>
  <li><a href="#recipe-8-serialize-array-in-json">Recipe 8: Serialize array in JSON</a></li>
  <li><a href="#recipe-9-deserialize-json-array-data">Recipe 9: Deserialize JSON array data</a></li>
  <li><a href="#recipe-10-deserialize-data-stream">Recipe 10: Deserialize data stream</a></li>
  <li><a href="#summary">Summary</a></li>
</ul>

<h2 id="recipe-6-serialize-data-as-json-data">Recipe 6: Serialize data as JSON data</h2>
<p>In <a href="http://jeffli.me/blog/2014/02/06/avro-cookbook-part-i/">Avro Cookbook : part I</a>, if you open the file <code>/tmp/log</code> created by recipe 3, you would find that it is definitely not a human readable text format. Avro provides the encoder/decoder mechanism which helps to serial the data to text format as JSON data.
<!--more-->
 Actually, if I want to serial the POJOs to JSON data, I would rather use <a href="https://code.google.com/p/google-gson/">Google Gson</a>. Anyway, this is a post about Avro, right ?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Test</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSerializeToJson</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">   <span class="n">ByteArrayOutputStream</span> <span class="n">outputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class="line">   <span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="n">ReflectData</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getSchema</span><span class="o">(</span><span class="n">LogEntry3</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">   <span class="n">Encoder</span> <span class="n">encoder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EncoderFactory</span><span class="o">().</span><span class="na">jsonEncoder</span><span class="o">(</span><span class="n">schema</span><span class="o">,</span> <span class="n">outputStream</span><span class="o">);</span>
</span><span class="line">   <span class="n">DatumWriter</span><span class="o">&lt;</span><span class="n">LogEntry3</span><span class="o">&gt;</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReflectDatumWriter</span><span class="o">&lt;&gt;(</span><span class="n">schema</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">   <span class="n">LogEntry3</span> <span class="n">entry1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LogEntry3</span><span class="o">(</span><span class="s">&quot;Jeff&quot;</span><span class="o">,</span> <span class="s">&quot;readme.md&quot;</span><span class="o">,</span> <span class="s">&quot;192.168.4.1&quot;</span><span class="o">);</span>
</span><span class="line">   <span class="n">LogEntry3</span> <span class="n">entry2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LogEntry3</span><span class="o">(</span><span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="s">&quot;readme.txt&quot;</span><span class="o">,</span> <span class="s">&quot;192.168.4.2&quot;</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">   <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">entry1</span><span class="o">,</span> <span class="n">encoder</span><span class="o">);</span>
</span><span class="line">   <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">entry2</span><span class="o">,</span> <span class="n">encoder</span><span class="o">);</span>
</span><span class="line">   <span class="n">encoder</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">outputStream</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">()));</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Refer to the <a href="http://localhost:4000/blog/2014/04/05/avro-cookbook-part-ii/">Avro Cookbook : Part II</a> for the what class <code>LogEntry3</code> looks like. Here is the output:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;Jeff&quot;</span><span class="p">,</span><span class="nt">&quot;resource&quot;</span><span class="p">:</span><span class="s2">&quot;readme.md&quot;</span><span class="p">,</span><span class="nt">&quot;ip&quot;</span><span class="p">:</span><span class="s2">&quot;192.168.4.1&quot;</span><span class="p">}</span>
</span><span class="line"><span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;John&quot;</span><span class="p">,</span><span class="nt">&quot;resource&quot;</span><span class="p">:</span><span class="s2">&quot;readme.txt&quot;</span><span class="p">,</span><span class="nt">&quot;ip&quot;</span><span class="p">:</span><span class="s2">&quot;192.168.4.2&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="recipe-7-deserialize-json-data">Recipe 7: Deserialize JSON data</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Test</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDeserializeFromJson</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">   <span class="n">String</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;{\&quot;name\&quot;:\&quot;Jeff\&quot;,\&quot;resource\&quot;:\&quot;readme.md\&quot;,\&quot;ip\&quot;:\&quot;192.168.4.1\&quot;}&quot;</span> <span class="o">+</span>
</span><span class="line">           <span class="s">&quot;{\&quot;name\&quot;:\&quot;John\&quot;,\&quot;resource\&quot;:\&quot;readme.txt\&quot;,\&quot;ip\&quot;:\&quot;192.168.4.2\&quot;}&quot;</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">   <span class="n">ByteArrayInputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayInputStream</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class="line">   <span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="n">ReflectData</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getSchema</span><span class="o">(</span><span class="n">LogEntry3</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">   <span class="n">JsonDecoder</span> <span class="n">decoder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DecoderFactory</span><span class="o">().</span><span class="na">jsonDecoder</span><span class="o">(</span><span class="n">schema</span><span class="o">,</span> <span class="n">inputStream</span><span class="o">);</span>
</span><span class="line">   <span class="n">DatumReader</span><span class="o">&lt;</span><span class="n">GenericRecord</span><span class="o">&gt;</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericDatumReader</span><span class="o">&lt;&gt;(</span><span class="n">schema</span><span class="o">);</span>
</span><span class="line">   <span class="n">GenericRecord</span> <span class="n">entry</span><span class="o">;</span>
</span><span class="line">   <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">try</span> <span class="o">{</span>
</span><span class="line">         <span class="n">entry</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">decoder</span><span class="o">);</span>
</span><span class="line">         <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">entry</span><span class="o">);</span>
</span><span class="line">      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">EOFException</span> <span class="n">exception</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">         <span class="k">break</span><span class="o">;</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">   <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>If you look at the code carefully, you will find several interesting things. </p>

<p>First, there is no explicit separator between every JSON record. That means the Avro JSON decoder can decode the JSON data in the form of <strong>stream</strong>. This could be very helpful when you have to deserialize a whole bunch of JSON records without any explicit separator between records.</p>

<p>Second, when parsing the JSON data, the generic reader <code>DatumReader&lt;GenericRecord&gt;</code> instead of specific reader <code>DatumReader&lt;LogEntry3&gt;</code> is used. I tried to use the specific reader but it was not able to work with the error:</p>
<pre>
org.apache.avro.AvroTypeException: Expected start-union. Got VALUE_STRING
	at org.apache.avro.io.JsonDecoder.error(JsonDecoder.java:697)
	at org.apache.avro.io.JsonDecoder.readIndex(JsonDecoder.java:441)
	at org.apache.avro.io.ResolvingDecoder.doAction(ResolvingDecoder.java:229)
	at org.apache.avro.io.parsing.Parser.advance(Parser.java:88)
	at org.apache.avro.io.ResolvingDecoder.readIndex(ResolvingDecoder.java:206)
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:155)
	at org.apache.avro.generic.GenericDatumReader.readField(GenericDatumReader.java:193)
	at org.apache.avro.reflect.ReflectDatumReader.readField(ReflectDatumReader.java:230)
	at org.apache.avro.generic.GenericDatumReader.readRecord(GenericDatumReader.java:183)
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:151)
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:142)
</pre>
<p>It turned out that the Avro JSON decoder can only parse JSON data like this</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;Jeff&quot;</span><span class="p">,</span><span class="nt">&quot;resource&quot;</span><span class="p">:{</span><span class="nt">&quot;string&quot;</span><span class="p">:</span><span class="s2">&quot;readme.md&quot;</span><span class="p">},</span><span class="nt">&quot;ip&quot;</span><span class="p">:{</span><span class="nt">&quot;string&quot;</span><span class="p">:</span><span class="s2">&quot;192.168.4.1&quot;</span><span class="p">}}</span>
</span><span class="line"><span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;John&quot;</span><span class="p">,</span><span class="nt">&quot;resource&quot;</span><span class="p">:{</span><span class="nt">&quot;string&quot;</span><span class="p">:</span><span class="s2">&quot;readme.txt&quot;</span><span class="p">},</span><span class="nt">&quot;ip&quot;</span><span class="p">:{</span><span class="nt">&quot;string&quot;</span><span class="p">:</span><span class="s2">&quot;192.168.4.2&quot;</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>but will not work on data like this</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Jeff&quot;</span><span class="p">,</span> <span class="nt">&quot;resource&quot;</span><span class="p">:</span> <span class="s2">&quot;readme.md&quot;</span><span class="p">,</span> <span class="nt">&quot;ip&quot;</span><span class="p">:</span> <span class="s2">&quot;192.168.4.1&quot;</span><span class="p">}</span>
</span><span class="line"><span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;John&quot;</span><span class="p">,</span> <span class="nt">&quot;resource&quot;</span><span class="p">:</span> <span class="s2">&quot;readme.txt&quot;</span><span class="p">,</span> <span class="nt">&quot;ip&quot;</span><span class="p">:</span> <span class="s2">&quot;192.168.4.2&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>After googling the issue, I found this: <a href="http://grokbase.com/t/avro/user/1345c5t7h1/issue-writing-union-in-avro">Issue writing union in avro</a>. So my suggestion is that don’t use Avro for json serialization and deserialization if you have other choices. </p>

<h2 id="recipe-8-serialize-array-in-json">Recipe 8: Serialize array in JSON</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Test</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSerializeArray</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">   <span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="n">Schema</span><span class="o">.</span><span class="na">createArray</span><span class="o">(</span><span class="n">ReflectData</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getSchema</span><span class="o">(</span><span class="n">LogEntry3</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class="line">   <span class="n">GenericData</span><span class="o">.</span><span class="na">Array</span><span class="o">&lt;</span><span class="n">LogEntry3</span><span class="o">&gt;</span> <span class="n">logs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericData</span><span class="o">.</span><span class="na">Array</span><span class="o">&lt;&gt;(</span><span class="mi">2</span><span class="o">,</span> <span class="n">schema</span><span class="o">);</span>
</span><span class="line">   <span class="n">logs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">LogEntry3</span><span class="o">(</span><span class="s">&quot;Jeff&quot;</span><span class="o">,</span> <span class="s">&quot;readme.md&quot;</span><span class="o">,</span> <span class="s">&quot;192.168.5.1&quot;</span><span class="o">));</span>
</span><span class="line">   <span class="n">logs</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">LogEntry3</span><span class="o">(</span><span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="s">&quot;readme.txt&quot;</span><span class="o">,</span> <span class="s">&quot;192.168.5.2&quot;</span><span class="o">));</span>
</span><span class="line">
</span><span class="line">   <span class="n">ByteArrayOutputStream</span> <span class="n">outputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class="line">   <span class="n">Encoder</span> <span class="n">encoder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EncoderFactory</span><span class="o">().</span><span class="na">jsonEncoder</span><span class="o">(</span><span class="n">schema</span><span class="o">,</span> <span class="n">outputStream</span><span class="o">);</span>
</span><span class="line">   <span class="n">DatumWriter</span><span class="o">&lt;</span><span class="n">GenericData</span><span class="o">.</span><span class="na">Array</span><span class="o">&lt;</span><span class="n">LogEntry3</span><span class="o">&gt;&gt;</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReflectDatumWriter</span><span class="o">&lt;&gt;(</span><span class="n">schema</span><span class="o">);</span>
</span><span class="line">   <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">logs</span><span class="o">,</span> <span class="n">encoder</span><span class="o">);</span>
</span><span class="line">   <span class="n">encoder</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">outputStream</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">()));</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>In the code above, not code generation is required, the <code>LogEntry3</code> is just a normal Java class. The serialized data would be</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="p">[{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;Jeff&quot;</span><span class="p">,</span><span class="nt">&quot;resource&quot;</span><span class="p">:</span><span class="s2">&quot;readme.md&quot;</span><span class="p">,</span><span class="nt">&quot;ip&quot;</span><span class="p">:</span><span class="s2">&quot;192.168.5.1&quot;</span><span class="p">},{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;John&quot;</span><span class="p">,</span><span class="nt">&quot;resource&quot;</span><span class="p">:</span><span class="s2">&quot;readme.txt&quot;</span><span class="p">,</span><span class="nt">&quot;ip&quot;</span><span class="p">:</span><span class="s2">&quot;192.168.5.2&quot;</span><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>However, if the type of element of the array is generated from schema defintion(See <a href="http://localhost:4000/blog/2014/02/06/avro-cookbook-part-i/">Recipe 2</a>), the output would be different:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="p">[{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;Jeff&quot;</span><span class="p">,</span><span class="nt">&quot;resource&quot;</span><span class="p">:{</span><span class="nt">&quot;string&quot;</span><span class="p">:</span><span class="s2">&quot;readme.md&quot;</span><span class="p">},</span><span class="nt">&quot;ip&quot;</span><span class="p">:{</span><span class="nt">&quot;string&quot;</span><span class="p">:</span><span class="s2">&quot;192.168.5.1&quot;</span><span class="p">}},{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;John&quot;</span><span class="p">,</span><span class="nt">&quot;resource&quot;</span><span class="p">:{</span><span class="nt">&quot;string&quot;</span><span class="p">:</span><span class="s2">&quot;readme.txt&quot;</span><span class="p">},</span><span class="nt">&quot;ip&quot;</span><span class="p">:{</span><span class="nt">&quot;string&quot;</span><span class="p">:</span><span class="s2">&quot;192.168.5.2&quot;</span><span class="p">}}]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Still, I will not choose Avro to serialize data to JSON if I can use gson. However, this recipe is intended to demonstrate how to serialize a array without code generation from predefined schema. </p>

<h2 id="recipe-9-deserialize-json-array-data">Recipe 9: Deserialize JSON array data</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Test</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDeserializeArray</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">   <span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="n">Schema</span><span class="o">.</span><span class="na">createArray</span><span class="o">(</span><span class="n">ReflectData</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getSchema</span><span class="o">(</span><span class="n">LogEntry3</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class="line">   <span class="n">String</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;[{\&quot;name\&quot;:\&quot;Jeff\&quot;,\&quot;resource\&quot;:\&quot;readme.md\&quot;,\&quot;ip\&quot;:\&quot;192.168.5.1\&quot;},{\&quot;name\&quot;:\&quot;John\&quot;,\&quot;resource\&quot;:\&quot;readme.txt\&quot;,\&quot;ip\&quot;:\&quot;192.168.5.2\&quot;}]&quot;</span><span class="o">;</span>
</span><span class="line">   <span class="n">Decoder</span> <span class="n">decoder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DecoderFactory</span><span class="o">().</span><span class="na">jsonDecoder</span><span class="o">(</span><span class="n">schema</span><span class="o">,</span> <span class="n">input</span><span class="o">);</span>
</span><span class="line">   <span class="n">DatumReader</span><span class="o">&lt;</span><span class="n">GenericData</span><span class="o">.</span><span class="na">Array</span><span class="o">&lt;</span><span class="n">GenericData</span><span class="o">.</span><span class="na">Record</span><span class="o">&gt;&gt;</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericDatumReader</span><span class="o">&lt;&gt;(</span><span class="n">schema</span><span class="o">);</span>
</span><span class="line">   <span class="n">GenericData</span><span class="o">.</span><span class="na">Array</span><span class="o">&lt;</span><span class="n">GenericData</span><span class="o">.</span><span class="na">Record</span><span class="o">&gt;</span> <span class="n">logs</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">decoder</span><span class="o">);</span>
</span><span class="line">   <span class="n">GenericData</span><span class="o">.</span><span class="na">Record</span> <span class="n">entry</span> <span class="o">=</span> <span class="n">logs</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class="line">   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">entry</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Note, we can use only generic reader, have not figured out how to use a specific reader yet. Maybe it would be ok for the binary encoder to use specific reader.</p>

<h2 id="recipe-10-deserialize-data-stream">Recipe 10: Deserialize data stream</h2>
<p>The word <strong>stream</strong> means that the size of the source data is unknown. For example. if you want to serialize data like this</p>
<pre>
[
   {
      "name":"Jeff",
      "resource":"readme.md",
      "ip":"192.168.5.1"
   },
   {
      "name":"John",
      "resource":"readme.txt",
      "ip":"192.168.5.2"
   }
][
   {
      "name":"Joe",
      "resource":"readme.md",
      "ip":"192.168.5.3"
   },
   {
      "name":"James",
      "resource":"readme.txt",
      "ip":"192.168.5.4"
   }
]
</pre>
<p>The data have several unusual characteristics due to which gson can not be simply applied. 
 * The whole data is not a valid JSON. Instead it is JSON records set. Besides, the size of data could be very large.
 * There is no explicit separator between records. If the records are separated by character such as <code>\n</code>, then one record can be read and parsed easily. </p>

<p>The format of the data is so poor which should be avoided in practice. However, sometimes, we ourselves are just the data consumers. We can parse the data with Avro like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Test</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDeserializeStream</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">   <span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="n">Schema</span><span class="o">.</span><span class="na">createArray</span><span class="o">(</span><span class="n">ReflectData</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getSchema</span><span class="o">(</span><span class="n">LogEntry3</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class="line">   <span class="n">String</span> <span class="n">input</span> <span class="o">=</span> <span class="s">&quot;[{&quot;</span><span class="n">name</span><span class="s">&quot;:&quot;</span><span class="n">Jeff</span><span class="s">&quot;,&quot;</span><span class="n">resource</span><span class="s">&quot;:&quot;</span><span class="n">readme</span><span class="o">.</span><span class="na">md</span><span class="s">&quot;,&quot;</span><span class="n">ip</span><span class="s">&quot;:&quot;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">5.1</span><span class="s">&quot;},{&quot;</span><span class="n">name</span><span class="s">&quot;:&quot;</span><span class="n">John</span><span class="s">&quot;,&quot;</span><span class="n">resource</span><span class="s">&quot;:&quot;</span><span class="n">readme</span><span class="o">.</span><span class="na">txt</span><span class="s">&quot;,&quot;</span><span class="n">ip</span><span class="s">&quot;:&quot;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">5.2</span><span class="s">&quot;}][{&quot;</span><span class="n">name</span><span class="s">&quot;:&quot;</span><span class="n">Joe</span><span class="s">&quot;,&quot;</span><span class="n">resource</span><span class="s">&quot;:&quot;</span><span class="n">readme</span><span class="o">.</span><span class="na">md</span><span class="s">&quot;,&quot;</span><span class="n">ip</span><span class="s">&quot;:&quot;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">5.3</span><span class="s">&quot;},{&quot;</span><span class="n">name</span><span class="s">&quot;:&quot;</span><span class="n">James</span><span class="s">&quot;,&quot;</span><span class="n">resource</span><span class="s">&quot;:&quot;</span><span class="n">readme</span><span class="o">.</span><span class="na">txt</span><span class="s">&quot;,&quot;</span><span class="n">ip</span><span class="s">&quot;:&quot;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">5.4</span><span class="s">&quot;}]</span>
</span><span class="line"><span class="s">&quot;</span><span class="o">;</span>
</span><span class="line">   <span class="n">Decoder</span> <span class="n">decoder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DecoderFactory</span><span class="o">().</span><span class="na">jsonDecoder</span><span class="o">(</span><span class="n">schema</span><span class="o">,</span> <span class="n">input</span><span class="o">);</span>
</span><span class="line">   <span class="n">DatumReader</span><span class="o">&lt;</span><span class="n">GenericData</span><span class="o">.</span><span class="na">Array</span><span class="o">&lt;</span><span class="n">LogEntry3</span><span class="o">&gt;&gt;</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericDatumReader</span><span class="o">&lt;&gt;(</span><span class="n">schema</span><span class="o">);</span>
</span><span class="line">   <span class="n">GenericData</span><span class="o">.</span><span class="na">Array</span><span class="o">&lt;</span><span class="n">LogEntry3</span><span class="o">&gt;</span> <span class="n">parsedRecords</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">   <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">   <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">try</span> <span class="o">{</span>
</span><span class="line">         <span class="c1">// We can iterate the parsedRecords to get every individual record</span>
</span><span class="line">         <span class="n">parsedRecords</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">decoder</span><span class="o">);</span>
</span><span class="line">         <span class="n">count</span> <span class="o">+=</span> <span class="n">parsedRecords</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class="line">      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">EOFException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">         <span class="k">break</span><span class="o">;</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">   <span class="o">}</span>
</span><span class="line">
</span><span class="line">   <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="n">count</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="summary">Summary</h2>
<p>This post is the last part of the three part series on Avro. To be honest, I myself use Avro rarely and I am not a Avro expert, thus the code examples may not be the most appropriate. They are just intended to help the starters to play with Avro quickly. Anyone who uses Avro frequently should spend more time on looking deeper into the Avro framework. It would be great if they are helpful to you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avro Cookbook : Part II]]></title>
    <link href="http://bluesalt.github.io/blog/2014/04/05/avro-cookbook-part-ii/"/>
    <updated>2014-04-05T18:31:35+08:00</updated>
    <id>http://bluesalt.github.io/blog/2014/04/05/avro-cookbook-part-ii</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#recipe-5-serialize-data-without-code-generation">Recipe 5: Serialize data without Code Generation</a>    <ul>
      <li><a href="#parse-schema-from-string">Parse Schema from String</a></li>
      <li><a href="#parse-schema-from-disk-file">Parse Schema from Disk File</a></li>
      <li><a href="#parse-schema-from-existing-java-class">Parse Schema from Existing Java Class</a></li>
    </ul>
  </li>
</ul>

<h2 id="recipe-5-serialize-data-without-code-generation">Recipe 5: Serialize data without Code Generation</h2>
<p>In formal recipes, before using Avro to serialize/deserialize data, schema files have to be defined to be leveraged by Avro code generation facility to generate the Java classes. This is also recommended when using Avro in Java. However, it is not required. Actually, you can parse the schema on the fly without code generation.
<!--more--></p>

<h3 id="parse-schema-from-string">Parse Schema from String</h3>
<p>The schema looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="p">{</span>
</span><span class="line"> <span class="nt">&quot;namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;me.jeffli.avrosamples.model&quot;</span><span class="p">,</span>
</span><span class="line"> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;record&quot;</span><span class="p">,</span>
</span><span class="line"> <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;LogEntry2&quot;</span><span class="p">,</span>
</span><span class="line"> <span class="nt">&quot;fields&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class="line">     <span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">},</span>
</span><span class="line">     <span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;resource&quot;</span><span class="p">,</span>  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="s2">&quot;null&quot;</span><span class="p">]},</span>
</span><span class="line">     <span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;ip&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="s2">&quot;null&quot;</span><span class="p">]}</span>
</span><span class="line"> <span class="p">]</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Define the schema as a Java String:</p>
<pre>
String schemaDesc = "{\n" +
           " \"namespace\": \"me.jeffli.avrosamples.model\",\n" +
           " \"type\": \"record\",\n" +
           " \"name\": \"LogEntry2\",\n" +
           " \"fields\": [\n" +
           "     {\"name\": \"name\", \"type\": \"string\"},\n" +
           "     {\"name\": \"resource\",  \"type\": [\"string\", \"null\"]},\n" +
           "     {\"name\": \"ip\", \"type\": [\"string\", \"null\"]}\n" +
           " ]\n" +
           "}";
</pre>

<p>Then the code to serialize the data would be this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Test</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSerializeOnTheFly</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">   <span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Schema</span><span class="o">.</span><span class="na">Parser</span><span class="o">().</span><span class="na">parse</span><span class="o">(</span><span class="n">schemaDesc</span><span class="o">);</span>
</span><span class="line">   <span class="n">GenericRecord</span> <span class="n">entry1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericData</span><span class="o">.</span><span class="na">Record</span><span class="o">(</span><span class="n">schema</span><span class="o">);</span>
</span><span class="line">   <span class="n">entry1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;Jeffrey&quot;</span><span class="o">);</span>
</span><span class="line">   <span class="n">entry1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;resource&quot;</span><span class="o">,</span> <span class="s">&quot;README&quot;</span><span class="o">);</span>
</span><span class="line">   <span class="n">entry1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;ip&quot;</span><span class="o">,</span> <span class="s">&quot;192.168.2.1&quot;</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">   <span class="n">GenericRecord</span> <span class="n">entry2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericData</span><span class="o">.</span><span class="na">Record</span><span class="o">(</span><span class="n">schema</span><span class="o">);</span>
</span><span class="line">   <span class="n">entry2</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;Johnson&quot;</span><span class="o">);</span>
</span><span class="line">   <span class="n">entry2</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;resource&quot;</span><span class="o">,</span> <span class="s">&quot;readme.markdown&quot;</span><span class="o">);</span>
</span><span class="line">   <span class="n">entry2</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;ip&quot;</span><span class="o">,</span> <span class="s">&quot;192.168.2.2&quot;</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">   <span class="n">DatumWriter</span><span class="o">&lt;</span><span class="n">GenericRecord</span><span class="o">&gt;</span> <span class="n">datumWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericDatumWriter</span><span class="o">&lt;&gt;(</span><span class="n">schema</span><span class="o">);</span>
</span><span class="line">   <span class="n">DataFileWriter</span><span class="o">&lt;</span><span class="n">GenericRecord</span><span class="o">&gt;</span> <span class="n">dataFileWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataFileWriter</span><span class="o">&lt;&gt;(</span><span class="n">datumWriter</span><span class="o">);</span>
</span><span class="line">   <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/tmp/log2&quot;</span><span class="o">);</span>
</span><span class="line">   <span class="n">dataFileWriter</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">schema</span><span class="o">,</span> <span class="n">file</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">   <span class="n">dataFileWriter</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">entry1</span><span class="o">);</span>
</span><span class="line">   <span class="n">dataFileWriter</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">entry2</span><span class="o">);</span>
</span><span class="line">   <span class="n">dataFileWriter</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>From the example, we can see that we don’t need to define any external schema file and no external Java classed are generated.</p>

<h3 id="parse-schema-from-disk-file">Parse Schema from Disk File</h3>
<p>In the above example, we parse the schema from String. Since the schema is defined with JSON language, it is cumbersome to define the schema as a Java String. Fortunately Avro Schema.Paser also provides other API to parse the schema from disk file or existing Java class :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Schema</span><span class="o">.</span><span class="na">Parser</span><span class="o">().</span><span class="na">parse</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;src/test/resources/LogEntry2.avsc&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="parse-schema-from-existing-java-class">Parse Schema from Existing Java Class</h3>
<p>Per the JSON Schema definition, a equivalent Java class would look like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogEntry3</span> <span class="o">{</span>
</span><span class="line">   <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line">   <span class="kd">private</span> <span class="n">String</span> <span class="n">resource</span><span class="o">;</span>
</span><span class="line">   <span class="kd">private</span> <span class="n">String</span> <span class="n">ip</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">   <span class="kd">public</span> <span class="nf">LogEntry3</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">resource</span><span class="o">,</span> <span class="n">String</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line">      <span class="k">this</span><span class="o">.</span><span class="na">resource</span> <span class="o">=</span> <span class="n">resource</span><span class="o">;</span>
</span><span class="line">      <span class="k">this</span><span class="o">.</span><span class="na">ip</span> <span class="o">=</span> <span class="n">ip</span><span class="o">;</span>
</span><span class="line">   <span class="o">}</span>
</span><span class="line">
</span><span class="line">   <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">      <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line">   <span class="o">}</span>
</span><span class="line">
</span><span class="line">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line">   <span class="o">}</span>
</span><span class="line">
</span><span class="line">   <span class="kd">public</span> <span class="n">String</span> <span class="nf">getResource</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">      <span class="k">return</span> <span class="n">resource</span><span class="o">;</span>
</span><span class="line">   <span class="o">}</span>
</span><span class="line">
</span><span class="line">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setResource</span><span class="o">(</span><span class="n">String</span> <span class="n">resource</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">this</span><span class="o">.</span><span class="na">resource</span> <span class="o">=</span> <span class="n">resource</span><span class="o">;</span>
</span><span class="line">   <span class="o">}</span>
</span><span class="line">
</span><span class="line">   <span class="kd">public</span> <span class="n">String</span> <span class="nf">getIp</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">      <span class="k">return</span> <span class="n">ip</span><span class="o">;</span>
</span><span class="line">   <span class="o">}</span>
</span><span class="line">
</span><span class="line">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setIp</span><span class="o">(</span><span class="n">String</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">this</span><span class="o">.</span><span class="na">ip</span> <span class="o">=</span> <span class="n">ip</span><span class="o">;</span>
</span><span class="line">   <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Then the Schema can be fetched easily:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="n">ReflectData</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getSchema</span><span class="o">(</span><span class="n">LogEntry3</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What is more, you can use ReflectDatumWriter to append specific type objects to the target:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Test</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSerializeData</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">   <span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="n">ReflectData</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">getSchema</span><span class="o">(</span><span class="n">LogEntry3</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">   <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/tmp/log3&quot;</span><span class="o">);</span>
</span><span class="line">   <span class="n">LogEntry3</span> <span class="n">entry1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LogEntry3</span><span class="o">(</span><span class="s">&quot;Jeff&quot;</span><span class="o">,</span> <span class="s">&quot;readme.txt&quot;</span><span class="o">,</span> <span class="s">&quot;192.168.3.1&quot;</span><span class="o">);</span>
</span><span class="line">   <span class="n">LogEntry3</span> <span class="n">entry2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LogEntry3</span><span class="o">(</span><span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="s">&quot;readme.md&quot;</span><span class="o">,</span> <span class="s">&quot;192.168.3.2&quot;</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">   <span class="n">ReflectDatumWriter</span><span class="o">&lt;</span><span class="n">LogEntry3</span><span class="o">&gt;</span> <span class="n">reflectDatumWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReflectDatumWriter</span><span class="o">&lt;&gt;(</span><span class="n">schema</span><span class="o">);</span>
</span><span class="line">   <span class="n">DataFileWriter</span><span class="o">&lt;</span><span class="n">LogEntry3</span><span class="o">&gt;</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataFileWriter</span><span class="o">&lt;&gt;(</span><span class="n">reflectDatumWriter</span><span class="o">).</span><span class="na">create</span><span class="o">(</span><span class="n">schema</span><span class="o">,</span> <span class="n">file</span><span class="o">);</span>
</span><span class="line">   <span class="n">writer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">entry1</span><span class="o">);</span>
</span><span class="line">   <span class="n">writer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">entry2</span><span class="o">);</span>
</span><span class="line">   <span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>## Recipe 6: Deserialize data without Code Generation
Deserializing data without code generation is pretty easy. The only difference with Recipe 4 is how it get the <strong>schema</strong>. Thus the ways to fetch schemas in Recipe 5 are also applicable in this recipe. Here is only the example to load schema from disk file. I am pretty sure that you can finish the rest code. It should be noted that if the schema is parsed on the fly without any code generation, then when deserializing the data, you can only use the generic datum reader even if you attempt with <strong>ReflectDatumReader</strong>. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Test</span><span class="o">(</span><span class="n">dependsOnMethods</span> <span class="o">=</span> <span class="s">&quot;testSerializeOnTheFly&quot;</span><span class="o">)</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDeserializeOnTheFly</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">   <span class="n">Schema</span> <span class="n">schema</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Schema</span><span class="o">.</span><span class="na">Parser</span><span class="o">().</span><span class="na">parse</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;src/test/resources/LogEntry2.avsc&quot;</span><span class="o">));</span>
</span><span class="line">   <span class="n">DatumReader</span><span class="o">&lt;</span><span class="n">GenericRecord</span><span class="o">&gt;</span> <span class="n">datumReader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericDatumReader</span><span class="o">&lt;&gt;(</span><span class="n">schema</span><span class="o">);</span>
</span><span class="line">   <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/tmp/log2&quot;</span><span class="o">);</span>
</span><span class="line">   <span class="n">DataFileReader</span><span class="o">&lt;</span><span class="n">GenericRecord</span><span class="o">&gt;</span> <span class="n">dataFileReader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataFileReader</span><span class="o">&lt;&gt;(</span><span class="n">file</span><span class="o">,</span> <span class="n">datumReader</span><span class="o">);</span>
</span><span class="line">   <span class="n">GenericRecord</span> <span class="n">entry</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">   <span class="k">while</span> <span class="o">(</span><span class="n">dataFileReader</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">      <span class="n">entry</span> <span class="o">=</span> <span class="n">dataFileReader</span><span class="o">.</span><span class="na">next</span><span class="o">(</span><span class="n">entry</span><span class="o">);</span>
</span><span class="line">      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">entry</span><span class="o">);</span>
</span><span class="line">   <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avro Cookbook : Part I]]></title>
    <link href="http://bluesalt.github.io/blog/2014/02/06/avro-cookbook-part-i/"/>
    <updated>2014-02-06T15:49:00+08:00</updated>
    <id>http://bluesalt.github.io/blog/2014/02/06/avro-cookbook-part-i</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#initialize-the-project-structure">Initialize the project structure</a></li>
  <li><a href="#tweak-the-pomxml">Tweak the pom.xml</a></li>
  <li><a href="#import-the-project-into-intellij-idea">Import the project into Intellij IDEA</a></li>
  <li><a href="#recipe-2-define-a-schema">Recipe 2: Define a Schema</a></li>
  <li><a href="#recipe-3-serialize-the-log-data-to-disk-file">Recipe 3: Serialize the Log Data to Disk File</a></li>
  <li><a href="#recipe-4-deserialize-the-log-data-from-disk-file">Recipe 4: Deserialize the Log Data from Disk File</a></li>
</ul>

<p>Avro is a data serialization framework. It is an Apache project led by Doug Cutting who is also the author of several other open source projects such as Hadoop, Lucene. Recently I need to leverage Avro to serialize/deserialize some data, however, I found its document is too poor, at least too poor for newbies like me who don’t have much experience on data exchange format frameworks. </p>

<p>In fact, it is very easy to understand what Avro can do. It helps to convert Java objects into bytes and vice versa. The key information the framework needs to know is the format of the date, namely ‘Schema’ in Avro. In this article, I won’t spend any time on explaining what Avro is. 
<!--more-->
## Recipe 1: Create a Maven Avro Project
Intellij IDEA is my favorite Java IDE. The free Community edition has less features than the commercial Ultimate edition, however, great experience may be gained when the free community IDEA works with Maven. They complete each other. So the examples in this article will use Maven and Intellij IDEA as the IDE. Besides, <strong>TestNG</strong> instead of JUnit will be used as the test framework.</p>

<h3 id="initialize-the-project-structure">Initialize the project structure</h3>
<ul>
  <li>Create an project with quickstart archetype:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mvn archetype:generate -DgroupId=me.jeffli -DartifactId=avrosamples -Dversion=0.01 -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="tweak-the-pomxml">Tweak the pom.xml</h3>
<ul>
  <li>Add Avro dependency:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;dependency&gt;</span>
</span><span class="line">   <span class="nt">&lt;groupId&gt;</span>org.apache.avro<span class="nt">&lt;/groupId&gt;</span>
</span><span class="line">   <span class="nt">&lt;artifactId&gt;</span>avro<span class="nt">&lt;/artifactId&gt;</span>
</span><span class="line">   <span class="nt">&lt;version&gt;</span>1.7.5<span class="nt">&lt;/version&gt;</span>
</span><span class="line"><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Use Avro Maven plugin</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;plugin&gt;</span>
</span><span class="line">   <span class="nt">&lt;groupId&gt;</span>org.apache.avro<span class="nt">&lt;/groupId&gt;</span>
</span><span class="line">   <span class="nt">&lt;artifactId&gt;</span>avro-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class="line">   <span class="nt">&lt;version&gt;</span>1.7.5<span class="nt">&lt;/version&gt;</span>
</span><span class="line">   <span class="nt">&lt;executions&gt;</span>
</span><span class="line">      <span class="nt">&lt;execution&gt;</span>
</span><span class="line">         <span class="nt">&lt;phase&gt;</span>generate-sources<span class="nt">&lt;/phase&gt;</span>
</span><span class="line">         <span class="nt">&lt;goals&gt;</span>
</span><span class="line">            <span class="nt">&lt;goal&gt;</span>schema<span class="nt">&lt;/goal&gt;</span>
</span><span class="line">         <span class="nt">&lt;/goals&gt;</span>
</span><span class="line">         <span class="nt">&lt;configuration&gt;</span>
</span><span class="line">            <span class="c">&lt;!-- make sure the directory is created --&gt;</span>
</span><span class="line">            <span class="nt">&lt;sourceDirectory&gt;</span>${project.basedir}/src/main/avro/<span class="nt">&lt;/sourceDirectory&gt;</span>
</span><span class="line">            <span class="nt">&lt;outputDirectory&gt;</span>${project.basedir}/src/main/java/<span class="nt">&lt;/outputDirectory&gt;</span>
</span><span class="line">         <span class="nt">&lt;/configuration&gt;</span>
</span><span class="line">      <span class="nt">&lt;/execution&gt;</span>
</span><span class="line">   <span class="nt">&lt;/executions&gt;</span>
</span><span class="line"><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It should be noted that the directory <code>${project.basedir}/src/main/avro/</code> must be created even it is empty at first. It is used to place the Avro schema files. The whole pom.xml has been posted to <a href="https://gist.github.com/bluesalt/9807306">github gist</a>.</p>

<h3 id="import-the-project-into-intellij-idea">Import the project into Intellij IDEA</h3>
<p>IDEA provides full support to Maven, so it is very easy to import the Maven project as a IDEA project. Click “Import Project” in the ‘Quick Start’ panel. I suggest enable the Maven Auto-Import feature of IDEA before completing the importing process.</p>

<h2 id="recipe-2-define-a-schema">Recipe 2: Define a Schema</h2>
<p>Assume that you want to log every access of your server, to make it simple, we only define 3 attributes in a log entry, namely the username, resource and ip. So the schema can be defined as :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="json"><span class="line"><span class="p">{</span>
</span><span class="line"> <span class="nt">&quot;namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;me.jeffli.avrosamples.model&quot;</span><span class="p">,</span>
</span><span class="line"> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;record&quot;</span><span class="p">,</span>
</span><span class="line"> <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;LogEntry&quot;</span><span class="p">,</span>
</span><span class="line"> <span class="nt">&quot;fields&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class="line">     <span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">},</span>
</span><span class="line">     <span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;resource&quot;</span><span class="p">,</span>  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="s2">&quot;null&quot;</span><span class="p">]},</span>
</span><span class="line">     <span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;ip&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="s2">&quot;null&quot;</span><span class="p">]}</span>
</span><span class="line"> <span class="p">]</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Save the content as <code>${project.basedir}/src/main/avro/LogEntry.avsc</code>. After running <code>mvn compile</code>, a Java class <code>me.jeffli.avrosamples.model.LogEntry</code> will be generated automatically thank to the Avro Maven plugin.  </p>

<h2 id="recipe-3-serialize-the-log-data-to-disk-file">Recipe 3: Serialize the Log Data to Disk File</h2>
<p>Assume we want to store the log data to a disk file <code>/tmp/log</code>. The code snippet would be like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Test</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSerializeLogEntries</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">   <span class="n">LogEntry</span> <span class="n">entry1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LogEntry</span><span class="o">();</span>
</span><span class="line">   <span class="n">entry1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;Jeff&quot;</span><span class="o">);</span>
</span><span class="line">   <span class="n">entry1</span><span class="o">.</span><span class="na">setResource</span><span class="o">(</span><span class="s">&quot;readme.txt&quot;</span><span class="o">);</span>
</span><span class="line">   <span class="n">entry1</span><span class="o">.</span><span class="na">setIp</span><span class="o">(</span><span class="s">&quot;192.168.1.1&quot;</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">   <span class="n">LogEntry</span> <span class="n">entry2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LogEntry</span><span class="o">();</span>
</span><span class="line">   <span class="n">entry2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;John&quot;</span><span class="o">);</span>
</span><span class="line">   <span class="n">entry2</span><span class="o">.</span><span class="na">setResource</span><span class="o">(</span><span class="s">&quot;readme.md&quot;</span><span class="o">);</span>
</span><span class="line">   <span class="n">entry2</span><span class="o">.</span><span class="na">setIp</span><span class="o">(</span><span class="s">&quot;192.168.1.2&quot;</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">   <span class="n">DatumWriter</span><span class="o">&lt;</span><span class="n">LogEntry</span><span class="o">&gt;</span> <span class="n">logEntryDatumWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpecificDatumWriter</span><span class="o">&lt;&gt;(</span><span class="n">LogEntry</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">   <span class="n">DataFileWriter</span><span class="o">&lt;</span><span class="n">LogEntry</span><span class="o">&gt;</span> <span class="n">dataFileWriter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataFileWriter</span><span class="o">&lt;&gt;(</span><span class="n">logEntryDatumWriter</span><span class="o">);</span>
</span><span class="line">   <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/tmp/log&quot;</span><span class="o">);</span>
</span><span class="line">   <span class="n">dataFileWriter</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">entry1</span><span class="o">.</span><span class="na">getSchema</span><span class="o">(),</span> <span class="n">file</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">   <span class="n">dataFileWriter</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">entry1</span><span class="o">);</span>
</span><span class="line">   <span class="n">dataFileWriter</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">entry2</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">   <span class="n">dataFileWriter</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="recipe-4-deserialize-the-log-data-from-disk-file">Recipe 4: Deserialize the Log Data from Disk File</h2>
<p>Assume you need to parse the log data from disk files <code>/tmp/log</code>. Then the code snippet would be:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Test</span> <span class="o">(</span><span class="n">dependsOnMethods</span> <span class="o">=</span> <span class="s">&quot;testSerializeLogEntries&quot;</span><span class="o">)</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDeSerializeLogEntries</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">   <span class="n">DatumReader</span><span class="o">&lt;</span><span class="n">LogEntry</span><span class="o">&gt;</span> <span class="n">logEntryDatumReader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpecificDatumReader</span><span class="o">&lt;&gt;(</span><span class="n">LogEntry</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">   <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;/tmp/log&quot;</span><span class="o">);</span>
</span><span class="line">   <span class="n">DataFileReader</span><span class="o">&lt;</span><span class="n">LogEntry</span><span class="o">&gt;</span> <span class="n">dataFileReader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataFileReader</span><span class="o">&lt;&gt;(</span><span class="n">file</span><span class="o">,</span> <span class="n">logEntryDatumReader</span><span class="o">);</span>
</span><span class="line">   <span class="n">LogEntry</span> <span class="n">entry</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">   <span class="k">while</span> <span class="o">(</span><span class="n">dataFileReader</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">      <span class="n">entry</span> <span class="o">=</span> <span class="n">dataFileReader</span><span class="o">.</span><span class="na">next</span><span class="o">(</span><span class="n">entry</span><span class="o">);</span>
</span><span class="line">      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">entry</span><span class="o">);</span>
</span><span class="line">   <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jetty-maven-plugin and Https Support]]></title>
    <link href="http://bluesalt.github.io/blog/2013/07/29/jetty-maven-plugin-and-https-support/"/>
    <updated>2013-07-29T22:46:00+08:00</updated>
    <id>http://bluesalt.github.io/blog/2013/07/29/jetty-maven-plugin-and-https-support</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#v6">V6</a></li>
  <li><a href="#v8">V8</a></li>
</ul>

<h3 id="introduction">Introduction</h3>
<p><code>jetty-maven-plugin</code>(formerly known as <code>maven-jetty-plugin</code>)is a maven plugin which enables the jetty container in maven project. It is very convenient in development environment since you can start the web app by issue only one command <code>mvn jetty:run</code>. By default it only supports http protocol. Additional configuration is necessary if https is required. Roughly we needs:</p>

<ul>
  <li>A development certificate</li>
  <li>Instruct the jetty plugin to use the certificate</li>
</ul>

<p>Besides <code>jetty-maven-plugin</code>, another maven plugin called <code>keytool-maven-plugin</code> is also needed to generate the certificate.
It should be noted that the plugin has evolved a lot since version 7. The configuration is different from different version. 
<!--more--></p>

<h3 id="v6">V6</h3>
<p>If you are still using the version 6 plugin, please refer to this blog: <a href="http://mrhaki.blogspot.com/2009/05/configure-maven-jetty-plugin-for-ssl.html">Configure Maven Jetty plugin for SSL communication</a>. I tried it in my project, but it is unstable. Sometimes it works and sometimes it fails. So I have to upgrade the plugin to V8.</p>

<h3 id="v8">V8</h3>
<p>Add following sections to the <plugins> section in your pom.xml file(Pay attention to `Line 7 - Line9`, `Line 41`, `Line 47`):</plugins></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;plugin&gt;</span>
</span><span class="line">   <span class="nt">&lt;groupId&gt;</span>org.mortbay.jetty<span class="nt">&lt;/groupId&gt;</span>
</span><span class="line">   <span class="nt">&lt;artifactId&gt;</span>jetty-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class="line">   <span class="nt">&lt;version&gt;</span>8.1.11.v20130520<span class="nt">&lt;/version&gt;</span>
</span><span class="line">   <span class="nt">&lt;configuration&gt;</span>
</span><span class="line">      <span class="nt">&lt;scanIntervalSeconds&gt;</span>5<span class="nt">&lt;/scanIntervalSeconds&gt;</span>
</span><span class="line">      <span class="nt">&lt;webApp&gt;</span>
</span><span class="line">         <span class="nt">&lt;contextPath&gt;</span>/context<span class="nt">&lt;/contextPath&gt;</span>
</span><span class="line">      <span class="nt">&lt;/webApp&gt;</span>
</span><span class="line">      <span class="nt">&lt;connectors&gt;</span>
</span><span class="line">         <span class="nt">&lt;connector</span> <span class="na">implementation=</span><span class="s">&quot;org.eclipse.jetty.server.nio.SelectChannelConnector&quot;</span><span class="nt">&gt;</span>
</span><span class="line">            <span class="nt">&lt;port&gt;</span>8080<span class="nt">&lt;/port&gt;</span>
</span><span class="line">            <span class="nt">&lt;maxIdleTime&gt;</span>60000<span class="nt">&lt;/maxIdleTime&gt;</span>
</span><span class="line">         <span class="nt">&lt;/connector&gt;</span>
</span><span class="line">         <span class="nt">&lt;connector</span> <span class="na">implementation=</span><span class="s">&quot;org.eclipse.jetty.server.ssl.SslSelectChannelConnector&quot;</span><span class="nt">&gt;</span>
</span><span class="line">            <span class="nt">&lt;port&gt;</span>8443<span class="nt">&lt;/port&gt;</span>
</span><span class="line">            <span class="nt">&lt;maxIdleTime&gt;</span>60000<span class="nt">&lt;/maxIdleTime&gt;</span>
</span><span class="line">            <span class="nt">&lt;keystore&gt;</span>${project.build.directory}/jetty-ssl.keystore<span class="nt">&lt;/keystore&gt;</span>
</span><span class="line">            <span class="nt">&lt;password&gt;</span>jetty8<span class="nt">&lt;/password&gt;</span>
</span><span class="line">            <span class="nt">&lt;keyPassword&gt;</span>jetty8<span class="nt">&lt;/keyPassword&gt;</span>
</span><span class="line">         <span class="nt">&lt;/connector&gt;</span>
</span><span class="line">      <span class="nt">&lt;/connectors&gt;</span>
</span><span class="line">   <span class="nt">&lt;/configuration&gt;</span>
</span><span class="line"><span class="nt">&lt;/plugin&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;plugin&gt;</span>
</span><span class="line">   <span class="nt">&lt;groupId&gt;</span>org.codehaus.mojo<span class="nt">&lt;/groupId&gt;</span>
</span><span class="line">   <span class="nt">&lt;artifactId&gt;</span>keytool-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class="line">   <span class="nt">&lt;executions&gt;</span>
</span><span class="line">      <span class="nt">&lt;execution&gt;</span>
</span><span class="line">         <span class="nt">&lt;phase&gt;</span>generate-resources<span class="nt">&lt;/phase&gt;</span>
</span><span class="line">         <span class="nt">&lt;id&gt;</span>clean<span class="nt">&lt;/id&gt;</span>
</span><span class="line">         <span class="nt">&lt;goals&gt;</span>
</span><span class="line">            <span class="nt">&lt;goal&gt;</span>clean<span class="nt">&lt;/goal&gt;</span>
</span><span class="line">         <span class="nt">&lt;/goals&gt;</span>
</span><span class="line">      <span class="nt">&lt;/execution&gt;</span>
</span><span class="line">      <span class="nt">&lt;execution&gt;</span>
</span><span class="line">         <span class="nt">&lt;phase&gt;</span>generate-resources<span class="nt">&lt;/phase&gt;</span>
</span><span class="line">         <span class="nt">&lt;id&gt;</span>genkey<span class="nt">&lt;/id&gt;</span>
</span><span class="line">         <span class="nt">&lt;goals&gt;</span>
</span><span class="line">            <span class="nt">&lt;goal&gt;</span>generateKeyPair<span class="nt">&lt;/goal&gt;</span>
</span><span class="line">         <span class="nt">&lt;/goals&gt;</span>
</span><span class="line">      <span class="nt">&lt;/execution&gt;</span>
</span><span class="line">   <span class="nt">&lt;/executions&gt;</span>
</span><span class="line">   <span class="nt">&lt;configuration&gt;</span>
</span><span class="line">      <span class="nt">&lt;keystore&gt;</span>${project.build.directory}/jetty-ssl.keystore<span class="nt">&lt;/keystore&gt;</span>
</span><span class="line">      <span class="nt">&lt;dname&gt;</span>cn=localhost<span class="nt">&lt;/dname&gt;</span>
</span><span class="line">      <span class="nt">&lt;keypass&gt;</span>jetty8<span class="nt">&lt;/keypass&gt;</span>
</span><span class="line">      <span class="nt">&lt;storepass&gt;</span>jetty8<span class="nt">&lt;/storepass&gt;</span>
</span><span class="line">      <span class="nt">&lt;alias&gt;</span>jetty8<span class="nt">&lt;/alias&gt;</span>
</span><span class="line">      <span class="nt">&lt;keyalg&gt;</span>RSA<span class="nt">&lt;/keyalg&gt;</span>
</span><span class="line">   <span class="nt">&lt;/configuration&gt;</span>
</span><span class="line"><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Every thing should be ready now. If you are using Postman as your test tool, please navigate to <code>https://loocalhost:8443/context</code> to accept the certificate before you make further tests after running <code>mvn jetty:run</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips About Octopress]]></title>
    <link href="http://bluesalt.github.io/blog/2013/06/17/tips-about-octopress/"/>
    <updated>2013-06-17T07:55:00+08:00</updated>
    <id>http://bluesalt.github.io/blog/2013/06/17/tips-about-octopress</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#add-tags-and-tag-cloud-support-to-octopress">Add Tags and Tag Cloud Support to Octopress</a>    <ul>
      <li><a href="#basic-usage">Basic Usage</a></li>
      <li><a href="#trouble-shooting">Trouble Shooting</a></li>
    </ul>
  </li>
  <li><a href="#use-redcarpet-markdown-engine">Use Redcarpet Markdown Engine</a></li>
  <li><a href="#add-clicky-web-analysis-tool">Add Clicky Web Analysis Tool</a></li>
  <li><a href="#add-table-of-content-to-the-post">Add Table of Content to the post</a></li>
  <li><a href="#shorten-the-homepage">Shorten the homepage</a></li>
  <li><a href="#fix-slow-speed-access-from-china">Fix slow speed access from China</a></li>
</ul>

<!--more-->

<h2 id="add-tags-and-tag-cloud-support-to-octopress">Add Tags and Tag Cloud Support to Octopress</h2>
<p><span class="caption-wrapper left"><img class="caption" src="http://bluesalt.github.io/images/tags.png" width="500" height="250" alt="Fig-1: Tags" title="Fig-1: Tags" /><span class="caption-text">Fig-1: Tags</span></span>
<span class="caption-wrapper right"><img class="caption" src="http://bluesalt.github.io/images/tag-cloud.png" width="250" height="500" alt="Fig-2: Tag Cloud" title="Fig-2: Tag Cloud" /><span class="caption-text">Fig-2: Tag Cloud</span></span></p>

<h4 id="basic-usage">Basic Usage</h4>
<p>After migrating my blog system from WordPress to Octopress, I have got more fun from blogging. Definitely Octopress is cool, however, no official support for tags and tag cloud makes it looks not so cool. IMO, using tags to organizing your posts is much more better using only categories. Luckily, after googling the topic, I found two plugins: <a href="https://github.com/robbyedwards/octopress-tag-pages">octopress-tag-pages</a> and <a href="https://github.com/robbyedwards/octopress-tag-cloud">octopress-tag-cloud</a>. The former generates tags for your posts(Fig-1)while the latter(Fig-2) collects all the tags and displays them in the aside area. The former can be applied without the latter while you have to install both plugins if you want to use tag cloud plugin.</p>

<p>Here I don’t want to talk too much about how to install the plugins because I think commit diffs can explain everything. This <a href="https://github.com/bluesalt/bluesalt.github.io/commit/d3e90232c14b4bc413567273fe5da9295d1be809">commit</a> shows you how to use the octopress-tag-pages plugin and this <a href="https://github.com/bluesalt/bluesalt.github.io/commit/628ee6fb8d92b0b910982122141882b45dee7dd1">one</a> demos how to use octopress-tag-cloud which is based on octopress-tag-pages.</p>

<h4 id="trouble-shooting">Trouble Shooting</h4>
<p>When playing with the tag-cloud plugin, I encounter the trouble when I try to run <code>rake generate</code>:</p>

<p><code>Liquid Exception: comparison of Array with Array failed in page</code></p>

<p>This would occur when every tag is applied for only ONCE. Not sure if this is a bug. Anyway you can simply apply one of the tags on more than one post.</p>

<p>P.S. When composing this post, I have found another useful plugin which add caption to image. Refer this post for the details:<a href="http://blog.zerosharp.com/image-captions-for-octopress/">Image Captions for Octopress</a></p>

<h2 id="use-redcarpet-markdown-engine">Use Redcarpet Markdown Engine</h2>
<p>As a programmer, I have got quite familiar with the markdown syntax which Github is used, the so called <em>Github Flavored Markdown</em>(GFM). Unfortunately, the default Markdown engine used by Octopress doesn’t support GFM. Good news is that it is very switch the Markdown engine in Octopress now. First upgrade jekyll to ~&gt; 0.12.1, then add ‘redcarpet’ gem to Gemfile and finally modify the _config.yml to switch the Markdown engine from <strong>rdiscount</strong> to <strong>redcarpet</strong>. Refer this <a href="https://github.com/bluesalt/bluesalt.github.io/commit/305a3d4b6ef55dd3230498aa06617a6c5bb0f8fd">commit</a> for more detail.</p>

<h2 id="add-clicky-web-analysis-tool">Add Clicky Web Analysis Tool</h2>
<p>Clicky is similar to Google Web Analysis. Unfortunately Octopress does not support Clicky by default, however, it is very easy to add Clicky analysis widget to your Octopress site. After registering your website from <a href="getclicky.com">Clicky</a>, a piece of Html code will be generated. All you need to do is add  the Html code snippet to <code>source/_includes/custom/after_footer.html</code>. Refer to this <a href="https://github.com/bluesalt/bluesalt.github.io/commit/648b13bafcd47a7499e5db0c296f7be9b8c3ed9b">commit</a> for more detail.</p>

<h2 id="add-table-of-content-to-the-post">Add Table of Content to the post</h2>
<p>Table of content can improve the read experience greatly. After goolging the topic for a short time, the most easy easy I found is <a href="http://blog.riemann.cc/2013/04/10/table-of-contents-in-octopress/">Robert Riemann’s tutorial</a>. If that is not clear, refer to the change set in my <a href="https://github.com/bluesalt/bluesalt.github.io/commit/77d28a7c7557b117e80094a2fc74de842a6af057">github repo</a>. It should be mentioned that after change the markdown engine from <code>redcarpet</code> to <code>kramdown</code>, the engine can’t parse the code block correctly. A blank line is required to be placed in front of the code block. </p>

<h2 id="shorten-the-homepage">Shorten the homepage</h2>
<p>By default, when you access the homepage of your blog, you will see every blog post will be displayed completely which is not so friendly to readers. A simple way is use the <code>&lt;!--more--&gt;</code> tag to customize excerpts which are shown in the homepage from the posts.</p>

<h2 id="fix-slow-speed-access-from-china">Fix slow speed access from China</h2>
<p>Octopress will use Google CDN to accelerate the access speed. However, Google CDN is blocked in China mainland due to some reasons which makes the fastest CDN become the slowest CDN. Quite ironical, isn’t it? Octopress use Google CDN in two place. One is the fonts and the other is the jQuery library.  Resolve jQuery issue is simply, just replace it with CloudFlare’s jQuery service. The fonts’ issue is not so easy because of some <a href="https://github.com/cdnjs/cdnjs/issues/682">reasons</a>. So I just remove the fonts service and so good so far. Refer <a href="https://github.com/bluesalt/bluesalt.github.io/commit/15531b15707bfd61f7e02e567d57397985a890ba">here</a> to see how to fix it.</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://bluesalt.github.io/blog/2013/05/19/hello-world/"/>
    <updated>2013-05-19T13:59:00+08:00</updated>
    <id>http://bluesalt.github.io/blog/2013/05/19/hello-world</id>
    <content type="html"><![CDATA[<h3 id="the-first-post-written-by-markdown">The first post written by markdown!</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test if a Value Implements an Interface in Golang]]></title>
    <link href="http://bluesalt.github.io/blog/2012/09/25/test-if-a-value-implements-an-interface-in-golang/"/>
    <updated>2012-09-25T06:11:00+08:00</updated>
    <id>http://bluesalt.github.io/blog/2012/09/25/test-if-a-value-implements-an-interface-in-golang</id>
    <content type="html"><![CDATA[<p>We all know that type assert could be used to cast a interface type variable to its actual type value. In the other way, golang allows you to query if a value has implement an interface. This could be used when writing unit test cases, for example, you want to make sure that a struct actually implements certain interfaces.</p>

<!--more-->

<ul>
  <li>
    <p>Assign the value to an empty interface variable</p>
  </li>
  <li>
    <p>Use type assert: assert the empty interface type to any specific interface you are interested</p>
  </li>
</ul>

<p>Here is a small while complete example</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="p">(</span>
</span><span class="line">  <span class="p">.</span> <span class="s">&quot;launchpad.net/gocheck&quot;</span>
</span><span class="line">  <span class="s">&quot;testing&quot;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">Test</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">TestingT</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">type</span> <span class="nx">MySuite</span> <span class="kd">struct</span><span class="p">{}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">Suite</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">MySuite</span><span class="p">{})</span>
</span><span class="line">
</span><span class="line"><span class="kd">type</span> <span class="nx">IFoobar</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">foobar</span><span class="p">()</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">type</span> <span class="nx">Foobar</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">Foobar</span><span class="p">)</span> <span class="nx">foobar</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">MySuite</span><span class="p">)</span> <span class="nx">TestFoobar</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">C</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">v</span> <span class="o">:=</span> <span class="nx">Foobar</span><span class="p">{}</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">i</span> <span class="kd">interface</span><span class="p">{}</span> <span class="p">=</span> <span class="nx">v</span>
</span><span class="line">  <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">i</span><span class="p">.(</span><span class="nx">IFoobar</span><span class="p">)</span>
</span><span class="line">  <span class="nx">c</span><span class="p">.</span><span class="nx">Assert</span><span class="p">(</span><span class="nx">ok</span><span class="p">,</span> <span class="nx">Equals</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="kd">var</span> <span class="nx">p</span> <span class="kd">interface</span><span class="p">{}</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">v</span>
</span><span class="line">  <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="p">=</span> <span class="nx">p</span><span class="p">.(</span><span class="nx">IFoobar</span><span class="p">)</span>
</span><span class="line">  <span class="nx">c</span><span class="p">.</span><span class="nx">Assert</span><span class="p">(</span><span class="nx">ok</span><span class="p">,</span> <span class="nx">Equals</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bundles Command Error in TextMate 2]]></title>
    <link href="http://bluesalt.github.io/blog/2012/08/18/bundles-command-error-in-textmate-2/"/>
    <updated>2012-08-18T22:43:52+08:00</updated>
    <id>http://bluesalt.github.io/blog/2012/08/18/bundles-command-error-in-textmate-2</id>
    <content type="html"><![CDATA[<p>When getting the news that the famous text editor in Max OS platform–TextMate 2 had been released as an open source software in github, I couldn’t wait to  give it a try though I am a big fan of VIM. When trying to run scripts files such as Ruby, Python or Even Golang, I failed. The error information was shown like this :</p>

<p><em>/Users/xxxxxxx/Library/Application Support/TextMate/Managed/Bundles/Bundle Support.tmbundle/Support/shared/lib/escape.rb:23:in <code>e_url': undefined method </code>gsub’ for nil:NilClass (NoMethodError)</em>
<em>from (erb):21:in <code>header'_
_from /Users/xxxxxxx/.rvm/rubies/ruby-1.9.3-p125/lib/ruby/1.9.1/erb.rb:835:in </code>eval’</em>
<em>from /Users/xxxxxxx/.rvm/rubies/ruby-1.9.3-p125/lib/ruby/1.9.1/erb.rb:835:in <code>block in result'_
_from /Users/xxxxxxx/.rvm/rubies/ruby-1.9.3-p125/lib/ruby/1.9.1/erb.rb:833:in </code>call’</em>
<em>from /Users/xxxxxxx/.rvm/rubies/ruby-1.9.3-p125/lib/ruby/1.9.1/erb.rb:833:in <code>result'_
_from /Users/xxxxxxx/Library/Application Support/TextMate/Managed/Bundles/Bundle Support.tmbundle/Support/shared/lib/tm/htmloutput.rb:91:in </code>header’</em>
<em>from /Users/xxxxxxx/Library/Application Support/TextMate/Managed/Bundles/Bundle Support.tmbundle/Support/shared/lib/tm/htmloutput.rb:68:in <code>show'_
_from /Users/xxxxxxx/Library/Application Support/TextMate/Managed/Bundles/Bundle Support.tmbundle/Support/shared/lib/tm/executor.rb:110:in </code>run’</em>
_from /Users/xxxxxxx/Library/Application Support/Avian/Bundles/Go.tmbundle/Support/gomate.rb:63:in <code>launch'_
_from Run:4:in </code><main>&#8216;_</main></p>

<p>This is caused by the lack of themes files for the output window.The most easy way to solve this is getting the theme files and make the bundles find it.I am curious why doesn’t the textmate 2  ship with these files.
<!--more-->
1. Get the files from here :  <a href="https://www.dropbox.com/s/kdo0j21xij3mzos/themes.tar">theme</a></p>

<ol>
  <li>
    <p>Extract it to anywhere you like, I put it in:  ~/Library/Application Support/Avian</p>
  </li>
  <li>
    <p>Create a new environment variable called ‘TM_THEME_PATH’  under Preferences -&gt; Variables. Fill the path where you put your themes in the value field. In my case, the entry is this :</p>
  </li>
</ol>

<p>TM_THEME_PATH=$HOME/Library/Application Support/Avian/themes/</p>

<p>Enjoy the powerful editor brought by community of open source!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ECUG Con 2011]]></title>
    <link href="http://bluesalt.github.io/blog/2011/11/22/ecug-con-2011/"/>
    <updated>2011-11-22T20:11:46+08:00</updated>
    <id>http://bluesalt.github.io/blog/2011/11/22/ecug-con-2011</id>
    <content type="html"><![CDATA[<p>从买域名到空间终于把博客搭好了，以后再慢慢弄wordpress。第一篇blog，严格的说应该是独立博客的第一篇，以后再慢慢研究要不要吧javaeye上的blog迁移过来，写点ECUG的吧，第一次参加这样的会议。</p>

<p>第一天去了，第二天身体不大舒服，就没有去，想想还是有点遗憾。会议的主题是关于Go语言的应用，这个会议之前是关于Erlang，听许式伟的介绍，他在实践中发现Go语言比Erlang更适合他的项目使用需求，因此转向Go。关于语言的好坏真的是很难讲，几年前对语言还挺感兴趣，这几天虽然也关注语言的发展，当自己的兴趣已经更多的转移到服务器后端架构上了，所以对于Erlang与Go语言孰好孰坏也不作评价了。</p>

<p>第一场演讲是黄东的系统工程师的非专业课，主要是宽带的计费的，互动很多，听听挺有意思，原来宽带的计费学问还挺大的。</p>

<p><img src="http://pic.yupoo.com/bluesalt/Bxnj2cTq/medish.jpg" alt="" /></p>

<p>接下来老莫的云储存。分布式存储一直是感兴趣的方向，因此听得格外仔细。当然由于公司原因，自然不会提到太多的细节。让我记住的一点是做网络相关服务器应用要保守，不需要采用太trick的算法，可靠性才是首要考虑目标，而不是性能。</p>

<p><img src="http://pic.yupoo.com/bluesalt/BxnjbiQD/medish.jpg" alt="" /></p>

<p>下午第一场是新浪微博田琪的关于redis的，这方面俺完全不懂。。</p>

<p><img src="http://pic.yupoo.com/bluesalt/Bxnjklnq/medish.jpg" alt="" /></p>

<p>上海商派的王磊讲关于他们自己开发的PaaS平台的。说实话，国内公司做这一方面开发而且愿意拿出来分享，我真的觉得挺意外的。。</p>

<p><img src="http://pic.yupoo.com/bluesalt/BxnjsvfS/medish.jpg" alt="" /></p>

<p>第一天最后一场：韦光京的关于Go语言的</p>

<p><img src="http://pic.yupoo.com/bluesalt/BxnjBrZf/medish.jpg" alt="" /></p>

<p>小花絮：参加ECUG的最小听众~</p>

<p><img src="http://pic.yupoo.com/bluesalt/BxnjM8JR/medish.jpg" alt="" /></p>
]]></content>
  </entry>
  
</feed>
