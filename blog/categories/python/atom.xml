<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Jeff Li]]></title>
  <link href="http://bluesalt.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://bluesalt.github.io/"/>
  <updated>2017-09-05T21:38:27+08:00</updated>
  <id>http://bluesalt.github.io/</id>
  <author>
    <name><![CDATA[Jeff Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keep Python gRPC  Client Connection Truly Alive]]></title>
    <link href="http://bluesalt.github.io/blog/2017/08/02/keep-python-grpc-client-connection-truly-alive/"/>
    <updated>2017-08-02T07:27:54+08:00</updated>
    <id>http://bluesalt.github.io/blog/2017/08/02/keep-python-grpc-client-connection-truly-alive</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#triage">Triage</a>    <ul>
      <li><a href="#reconnection-mechanism">Reconnection Mechanism</a></li>
      <li><a href="#code-revisit">Code Revisit</a></li>
    </ul>
  </li>
  <li><a href="#solution">Solution</a></li>
  <li><a href="#epilogue">Epilogue</a></li>
</ul>

<h3 id="introduction">Introduction</h3>
<p><a href="https://grpc.io/">gRPC</a> is a high performance RPC framework from Google which helps to reduce the gap between components within large scale systems. It provides a program paradigm in which code written by various languages is able to work together as a single language. The framework is promising due to the microservices  tide at the moment. </p>

<p>I have been working on a project which leverages gRPC recently. In the project, a component, the gRPC client, written with Python communicates with another one, the gRPC server every day like a daily cron job. And during each round, multiple calls will be issued by the client. </p>

<p>It worked well on the first round. One day later, when 2nd round got scheduled, unavailable exception was observed from the first call with the complaint.</p>

<!--more-->

<p><code>
_Rendezvous: &lt;_Rendezvous of RPC that terminated with (StatusCode.UNAVAILABLE,Endpoint read failed)&gt;
</code></p>

<p>What is more, succeeding calls were totally OK. </p>

<p>Fortunately, the issue is able to be reproduced by using the simple <a href="https://github.com/grpc/grpc/tree/master/examples/python/helloworld">hello world exmaple</a>. So I present a small project in <a href="https://github.com/bluesalt/pygrpc-reconnection">GitHub</a> based on the example to explain the detail. The demo program wraps a RPC client with object oriented style code.</p>

<ul>
  <li><a href="https://github.com/bluesalt/pygrpc-reconnection/commit/c12a3c2ab2e12de176f28919779cd48ef2aa13cf">Buggy code</a></li>
  <li><a href="https://github.com/bluesalt/pygrpc-reconnection/commit/b1f3ab21151f5d9ad4be611d19c143cebc2afcc2">Resolved code</a></li>
</ul>

<p>Check out the buggy code and reproduce the bug with the steps.</p>

<ol>
  <li>Start the server with <code>python server.py</code>.</li>
  <li>Start the client <code>python client.py</code> in another terminal and a normal greeting could see.</li>
  <li>Kill the server started in step 1 with <code>Ctrl + C</code> and then restart it within 30s. When next round is scheduled, the exception should be raised.</li>
</ol>

<h3 id="triage">Triage</h3>
<p>The issue is actually not rare. Through Google, one could find that there is even an <a href="https://github.com/grpc/grpc/issues/11043">official GitHub issue 11043</a> tracking the problem and that is exactly what I have met. However, it does not make any sense because the issue has been solved by <a href="https://github.com/grpc/grpc/pull/11154">PR 11154</a> and has been applied in our environment definitely. However, we are sure about 2 things at least.</p>

<ol>
  <li>The issue is caused by disconnected communication channel.</li>
  <li>The reconnection mechanism did not work as expected.</li>
</ol>

<h4 id="reconnection-mechanism">Reconnection Mechanism</h4>
<p>Every time an instance of <a href="https://github.com/grpc/grpc/blob/v1.4.2/src/python/grpcio/grpc/_channel.py#L912"><code>grpc._channel.Channel</code></a> is initialized, a <a href="https://github.com/grpc/grpc/blob/v1.4.2/src/python/grpcio/grpc/_channel.py#L932">subscription</a> which takes an callback parameter to monitor the connection status will be started. Multiple callbacks are allowed and every time the state of the connection changes, all of them will be called. According to the comment of the code, this is a workaround and will be removed in the future when c-core supports retry. The subscription actually takes following actions.</p>

<ol>
  <li><a href="https://github.com/grpc/grpc/blob/v1.4.2/src/python/grpcio/grpc/_channel.py#L880">Creates a thread</a> intended to poll the connection status if it does not exist yet.</li>
  <li><a href="https://github.com/grpc/grpc/blob/v1.4.2/src/python/grpcio/grpc/_channel.py#L880">Polling</a> the state of the connection.</li>
  <li>If there is no callback, <a href="https://github.com/grpc/grpc/blob/v1.4.2/src/python/grpcio/grpc/_channel.py#L854">quit the polling thread</a></li>
</ol>

<p>All the callbacks attached to the <code>grpc._channel.Channel</code> instance will be removed when the object is disposed by Python garbage collector because <a href="https://github.com/grpc/grpc/blob/v1.4.2/src/python/grpcio/grpc/_channel.py#L976">customized <code>__del__</code> method</a> which will detach all the callbacks is provided. That means connection state polling will be stopped which could cause our bug. Thus we are able to make an assumption now: the channel instance we have created somehow got destroyed by GC unexpectedly so that there is no connection monitor anymore.</p>

<h4 id="code-revisit">Code Revisit</h4>

<p>Let’s reexamine the buggy code.</p>

<p>```python
class RpcClient(object):
    def <strong>init</strong>(self):
        channel = grpc.insecure_channel(‘localhost:50051’)
        self.stub = helloworld_pb2_grpc.GreeterStub(channel)</p>

<pre><code>def say_hi(self ):
    response = self.stub.SayHello(helloworld_pb2.HelloRequest(name='you'))
    return response.message ```
</code></pre>

<p>Line 3 creates a channel instance that will be passed to initialize the client stub of type <a href="https://github.com/bluesalt/pygrpc-reconnection/blob/master/common/helloworld_pb2_grpc.py#L7"><code>GreeterStub</code></a> which is generated by the protocol buffer compiler. If we are able to find anything that proves that there is not reference to the channel instance anymore after some time, we get more close to the truth.</p>

<p>What is checked next is the generated code of <code>GreeterStub</code>.</p>

<p>```python
class GreeterStub(object):
  “"”The greeting service definition.
  “””</p>

<p>def <strong>init</strong>(self, channel):
    “"”Constructor.
    Args:
      channel: A grpc.Channel.
    “””
    self.SayHello = channel.unary_unary(
        ‘/helloworld.Greeter/SayHello’,
        request_serializer=helloworld__pb2.HelloRequest.SerializeToString,
        response_deserializer=helloworld__pb2.HelloReply.FromString,
        )
```  </p>

<p>Oh, there is no explicit reference to the channel instance in this class but it is insufficient to rule out implicit reference yet. The <a href="https://github.com/grpc/grpc/blob/v1.4.2/src/python/grpcio/grpc/_channel.py#L940"><code>grpc._channel.Channel.unary_unary</code></a> method requires more investigation. </p>

<p><code>python
def unary_unary(self,
                 method,
                 request_serializer=None,
                 response_deserializer=None):
     return _UnaryUnaryMultiCallable(
         self._channel,
         _channel_managed_call_management(self._call_state),
         _common.encode(method), request_serializer, response_deserializer)
</code></p>

<p>We can see that—although the whole channel instance is passed—the method references just some attributes of our channel instance but not the channel itself. That means after client stub is initialized, the channel instance will become an orphan Python object. So everything makes sense now.</p>

<h3 id="solution">Solution</h3>
<p>The solution is simple—prevent the channel instance from being collected.</p>

<p>```python
class RpcClient(object):
    def <strong>init</strong>(self):
        self.channel = grpc.insecure_channel(‘localhost:50051’)
        self.stub = helloworld_pb2_grpc.GreeterStub(self.channel)</p>

<pre><code>def say_hi(self ):
    response = self.stub.SayHello(helloworld_pb2.HelloRequest(name='you'))
    return response.message ```
</code></pre>

<h3 id="epilogue">Epilogue</h3>
<p>To be honest, the behavior is quite surprising. <code>__del__</code> is evil most of the time   and should be avoided unless you have to. We shall not blame the authors of gRPC because without this mechanism, resource leak occurs. And I believe this is the best solution so far.</p>

<p>This would be confusing for beginners because there is no doc about this. And almost all the code samples—even the unit test case in gRPC code base—use Python procedural programming style in which the bug would not be produced. A warning should have been documented. That is why this post is created.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Processes Relation on Python Multiprocessing Module]]></title>
    <link href="http://bluesalt.github.io/blog/2016/04/02/processes-relation-on-python-multiprocessing-module/"/>
    <updated>2016-04-02T11:40:59+08:00</updated>
    <id>http://bluesalt.github.io/blog/2016/04/02/processes-relation-on-python-multiprocessing-module</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#related-processes-in-linux">Related Processes in Linux</a></li>
  <li><a href="#multiple-processes-in-python">Multiple Processes in Python</a>    <ul>
      <li><a href="#fork-primitive">fork primitive</a></li>
      <li><a href="#multiprocess-module">multiprocess module</a></li>
    </ul>
  </li>
  <li><a href="#conclusion">Conclusion</a></li>
  <li><a href="#reference">Reference</a></li>
</ul>

<h3 id="related-processes-in-linux">Related Processes in Linux</h3>
<p>In 2007, when I was taking the undergraduate operating system course, the textbook<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> mentioned that a child process could possible be terminated on its parent’s exit.  Years later, I came to the world of Linux and found that the design is OS-dependent because in Linux, the child process will keep running even though its parent is gone. But it will be adopted by the process 1 instead of becoming an orphan. Let’s use a small program<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> to validate the behaviour.</p>

<!--more-->

<p>```c
#include &lt;sys/types.h&gt;
#include <unistd.h>
#include <stdio.h></stdio.h></unistd.h></p>

<p>int main(int argc, const char **argv)
{
    pid_t pid = fork();
    if (pid &gt; 0) {
        printf(“I am the parent of pid=%d\n”, pid);
        sleep(10);
    }
    else  if (!pid) {
        printf(“I am the child\n”);
        for (int i=0; i&lt;5; i++) {
            printf(“loop %d\n”, i);
            sleep(5);
        }
    } else if (pid == -1)
        perror (“fork”);
    return 0;
}
```</p>

<p>In Linux, let’s start 2 shell sessions. In the first one, type</p>

<p><code>bash
gcc --std=c99 fork.c
./a.out
</code></p>

<p>In the other one, type <code>ps -ef | grep a.out</code> to check the status of the 2 processes. About 10s later, you should find that the parent is gone and the the child is still alive. But the parent of the child has become process 1. </p>

<p>Based on what we have observed, it can be concluded that</p>

<ul>
  <li>child will continue to run even though its parent is dead, and it will be adopted by the <code>init</code> process whose pid is 1.</li>
  <li>parent will not wait for child’s termination if only <code>fork</code> primitive is used.</li>
</ul>

<p>Now let’s think about another case. If you press <code>ctrl + c</code> in the shell immediately after running <code>a.out</code>, you could find that both parent and child are terminated. This seems to contradict what we have mentioned. Actually, when <code>ctrl + c</code> is typed, the <code>SIGINT</code> will be sent to the whole foreground process group instead of a single process<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>. When a child is forked by the parent, they will share the same process group id. So both the parent and child will receive the <code>SIGINT</code> signal and exit. You can change the child’s process group id to see what happens.</p>

<h3 id="multiple-processes-in-python">Multiple Processes in Python</h3>
<p>There are multiple ways in the standard lib to implement multiple processes in Python, one is the <code>fork</code> primitive provided by the <code>os</code> package and another is the <code>multiprocess</code> module.</p>

<h4 id="fork-primitive">fork primitive</h4>
<p>The <code>os.fork</code> function is a wrapper of the  <code>fork</code> function in C. So its behaviour is similar. I won’t give too much detail about it. Here is a sample program. You can find that it behaves as the C version one.</p>

<p>```python
import os
import time</p>

<p>def child():
    print “process id of child is: %d” % os.getpid()
    time.sleep(10)</p>

<p>p = os.fork()</p>

<p>if p == 0:
    child()
else:
    print “process id of parent is: %d” % os.getpid()
    time.sleep(5)
```</p>

<h4 id="multiprocess-module">multiprocess module</h4>
<p><code>multiprocess</code> is a high level module built upon the primitives such as <code>fork</code>, thus it is much more versatile. Besides forking child processes, it also provides features like daemonic process, shared variables. On this post, I will focus only on the process relation. Let’s start with a simple piece of code.</p>

<p>```python
from multiprocessing import Process
import time
import os</p>

<p>def child():
    print “child process pid: %d” % os.getpid()
    time.sleep(10)</p>

<p>p = Process(target=child, args=())
p.start()</p>

<p>print “parent process pid: %d” % os.getpid()</p>

<p>```  </p>

<p>You can find that the parent will always wait for the children to terminated even no <code>join</code> or <code>wait</code> are called. Besides, if the child process is set to be daemonic, instead of waiting, the parent will kill the child before it exits. The behaviour is documented <a href="https://docs.python.org/2/library/multiprocessing.html#multiprocessing.Process.daemon">here</a>. So how does the module achieve that? Let’s navigate to the source code of class <a href="https://github.com/python/cpython/blob/2.7/Lib/multiprocessing/process.py#L86">Process</a> and check the implementation.</p>

<ul>
  <li>When the <code>start</code> method of the child is invoked, it will create a <a href="https://github.com/python/cpython/blob/2.7/Lib/multiprocessing/forking.py#L114">Popen</a> object which will fork a new process and execute the child process by calling back the child’s <a href="https://github.com/python/cpython/blob/2.7/Lib/multiprocessing/process.py#L241">_bootstrap</a> method.</li>
  <li>Meanwhile, the parent will maintain a list to save all its children.</li>
  <li>The <a href="https://github.com/python/cpython/blob/2.7/Lib/multiprocessing/process.py#L241">_bootstrap</a> method imports the <code>util</code> module in which a <a href="https://github.com/python/cpython/blob/2.7/Lib/multiprocessing/util.py#L294">_exit_function</a> function is registered as a cleanup handler. The function will check all its children and terminate all the daemonic children but wait for those that are not.</li>
  <li><code>daemonic</code> is quit different from the <code>daemon process</code> in Linux system programming. In Python multiprocessing module, it is just a flag indicating how the child processes should be handled when parent exits.</li>
</ul>

<h3 id="conclusion">Conclusion</h3>
<p>Due to the GIL, multithreading is very limited in high concurrency scenario. Even in the gevent’s implementation of thread pool, the issue is a big pain. Thus multiprocessing is encouraged in (C)Python. This post can not cover all the aspects of multiprocessing in Python, but I hope it can help you understand the concurrency in Python.</p>

<h3 id="reference">Reference</h3>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Operating Systems: Internals and Design Principles, 5th edition, by William Stalling<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Linux System Programming, 2nd edition, by Robert Love<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>The Linux Programming Interface, by Michael Kerrisk<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
